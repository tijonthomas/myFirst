<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Smoke Tests" resourceRoot="" soapui-version="5.0.0" id="374ecf56-a780-4e6a-b19a-ba2676ea3c8f" xmlns:con="http://eviware.com/soapui/config">
  <con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Promotion Issue-GREEN"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Macys_QA\15G\soapuireport\"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value="JUnit-Style HTML Report"/>
</xml-fragment>]]></con:setting></con:settings>
  
  
  <con:testSuite name="SDP 19098:Password Reset" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="true" maxResults="0" name="Password Reset" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="474aaa42-32d5-43df-9504-da068e573b69">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
        <con:setting id="IncludeOverview">true</con:setting>
        <con:setting id="IncludeResults">true</con:setting>
        <con:setting id="FlowLayout">true</con:setting>
        <con:setting id="ErrorDetails">true</con:setting>
        <con:setting id="IncludeCoverage">true</con:setting>
        <con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting>
        <con:setting id="GeneratableJUnitReport@Folder">C:\Users\tijo.thomas\Desktop</con:setting>
      </con:settings>
      
      <con:testStep type="datagen" name="RandomEmailGenerator">
      <con:settings/>
      <con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:property type="Script">
          <con:configuration><script>def sdf = new java.text.SimpleDateFormat("ddhhmmss")
					def useremail =  "user"+sdf.format( new Date())+"@user.com"
					def regEmail =  "user"+sdf.format( new Date())+"@reg.com"
					def coregEmail =  "user"+sdf.format( new Date())+"@coreg.com"					

					def coregFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(5)
					def coregLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
					def regFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(7)
					def regLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(8)
					
					testRunner.testCase.testSuite.setPropertyValue( "emailId", useremail )
					testRunner.testCase.testSuite.setPropertyValue( "regEmail", regEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregEmail", coregEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregFirstname", coregFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "coregLastname", coregLastname )
					testRunner.testCase.testSuite.setPropertyValue( "regFirstname", regFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "regLastname", regLastname )
					return email 
			</script></con:configuration>
          <con:name>emailAddress</con:name>
          <con:mode>STEP</con:mode>
          <con:shared>true</con:shared>
        </con:property>
      </con:config>
    </con:testStep>
      <con:testStep type="httprequest" name="Create user JSON">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="Create user JSON" postQueryString="false" mediaType="application/json" id="2266e574-c513-4336-886d-a4647b7cd1b1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="X-tokenHeader" value="value"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user</con:endpoint>
          <con:request>{
    "firstname": "${#Project#userfirstname}",
    "lastname": "${#Project#userlastname}",
    "address1": "${#Project#useraddress1}",
    "address2": "${#Project#useraddress2}",
    "gender": "${#Project#usergender}",
    "city": "${#Project#usercity}",
    "state": "${#Project#userstate}",
    "zipcode": "${#Project#userzip}",
    "countrycode": "${#Project#usercountry}",
    "emailaddress": "${#TestSuite#emailId}",
    "verifyemailaddress": "${#TestSuite#emailId}",
    "password": "${#Project#password}",
    "verifypassword": "${#Project#password}",
    "birthdateday": "31",
    "birthdatemonth": "05",
    "birthdateyear": "1976",
    "subscription": "N",
    "textoption": "false",
    "bestphone": "${#Project#userbestphone}",
    "mobilephone": "${#Project#usermobilephone}",
    "passwordHintQuestion": "1",
    "passwordHintAnswer": "${#Project#hintAnswer}",
    "shippingAddress": {
        "shippingAddressFirstName": "${#Project#shippingFirstName}",
        "shippingAddressLastName": "${#Project#shippingLastName}",
        "shippingAddress1": "${#Project#shippingAddress1}",
        "shippingAddressZipCode": "${#Project#shippingZip}",
        "shippingAddressBestPhone": "${#Project#shippingBestPhone}",
        "shippingAddressCity": "${#Project#shippingCity}",
        "shippingAddressState": "${#Project#shippingState}"
    },
    "userPreferredStoreId": "${#Project#preferredStoreId}"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="470e589a-b65d-47b0-97b2-5f2c49a422f4">
            <con:configuration><codes>200</codes></con:configuration>
          </con:assertion>
          
          <con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success=true]"><con:configuration><path>//response[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set-userId,guid,BVid">
              <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def userId=holder.getNodeValue("//response/userId")
def guid=holder.getNodeValue("//response/guid")
def bazaarVoiceId=holder.getNodeValue("//response/bazaarVoiceId")

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "userId", userId.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "guid", guid.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "bazaarVoiceId", bazaarVoiceId.toString() )
</scriptText></con:configuration>
            </con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
        
        
        <con:testStep type="httprequest" name="v1/user/sdptoken">
          <con:settings/>
          <con:config method="POST" xsi:type="con:HttpRequest" name="v1/user/sdptoken" postQueryString="false" mediaType="application/xml" id="47cc95bb-ddd0-4401-963b-cd7baad328ce" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
            <con:endpoint>${#Project#endPoint}/v1/user/sdptoken</con:endpoint>
            <con:request><![CDATA[<request>
  <email>${#TestSuite#emailId}</email>
  <password>${#Project#password}</password>
</request> ]]></con:request>
            <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="5169e013-1db6-41ca-aa3a-78649feb7345">
              <con:configuration>
                <codes>200</codes>
              </con:configuration>
            </con:assertion>
            
            
            <con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//sdpinfo[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [token]" id="cae1e16b-01b2-433c-9f5a-2edd07087121">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def token = holder.getNodeValue( "//sdpinfo/token" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "genctxToken", token )


assert token != null
</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:config>
        </con:testStep>
      <con:testStep type="httprequest" name="GET v2/user">
          <con:settings/>
          <con:config method="GET" xsi:type="con:HttpRequest" name="GET v2/user" postQueryString="false" mediaType="application/xml" id="52c30410-c89e-4401-8305-47ac12ef91c5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  &lt;con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
            <con:endpoint>${#Project#endPoint}/v2/user?show=summary,shipping,store,billing</con:endpoint>
            <con:request/>
            <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c75b0db2-8ba0-4105-acfd-bc46a618dcf1">
              <con:configuration>
                <codes>200</codes>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/profile[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [address]"><con:configuration><path>exists( //response/profile/address)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [shippingContact]"><con:configuration><path>exists( //response/shippingContactMapper/shippingContact)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionMapper]"><con:configuration><path>exists( //response/subscriptionMapper)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/profile[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/profile[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [addressLine1]"><con:configuration><path>//response[1]/profile[1]/address[1]/addressLine1[1]/text()</path><content>${#Project#useraddress1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [addressLine2]"><con:configuration><path>//response[1]/profile[1]/address[1]/addressLine2[1]/text()</path><content>${#Project#useraddress2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [city]"><con:configuration><path>//response[1]/profile[1]/address[1]/city[1]/text()</path><content>${#Project#usercity}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [stateCode]"><con:configuration><path>//response[1]/profile[1]/address[1]/stateCode[1]/text()</path><content>${#Project#userstate}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [postalCode]"><con:configuration><path>//response[1]/profile[1]/address[1]/postalCode[1]/text()</path><content>${#Project#userzip}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [phoneNumber]"><con:configuration><path>//response[1]/profile[1]/address[1]/phoneNumber[1]/text()</path><content>${#Project#userbestphone}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [gender]"><con:configuration><path>//response[1]/profile[1]/gender[1]/text()</path><content>${#Project#usergender}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/profile[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/profile[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]" id="92a5d6f8-fe84-4b5e-ba31-39d47a2ead6e"><con:configuration><path>//response/profile/userName/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [email]"><con:configuration><path>//response[1]/shippingContactMapper[1]/shippingContact[1]/email[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:config>
        </con:testStep>
      
      
      <con:testStep type="httprequest" name="v2/oauth2/token/userDetails">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="v2/oauth2/token/userDetails" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="8365a970-dc61-4b50-9fdc-ce9529b8b384" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/userDetails?application=Mobile</con:endpoint>
          <con:request>grant_type=password&amp;username=${#TestSuite#emailId}&amp;password=${#Project#password}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4a264877-2520-44da-a7f2-d9ea73b106ed">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Set access_token&amp;refresh_token" id="1f40e6fe-fc09-4b21-aeea-1a6343bb8a02">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def access_token=holder.getNodeValue("//response/access_token");
def refresh_token=holder.getNodeValue("//response/refresh_token");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "refresh_token", refresh_token.toString() )

assert access_token != null
assert refresh_token != null</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [userId]" id="5ba4ba49-627e-4c08-b3f4-3e2c6025677e"><con:configuration><path>//response/userDetails/userId/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [guid]" id="d4559cb8-0920-4f99-8091-818135cf89c3"><con:configuration><path>//response/userDetails/guid/text()</path><content>${#TestSuite#guid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]" id="a2e6e10e-4deb-4673-86b9-435209863193"><con:configuration><path>//response/userDetails/bazaarVoiceId/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [token_type]"><con:configuration><path>//response[1]/token_type[1]/text()</path><content>bearer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expires_in]"><con:configuration><path>//response[1]/expires_in[1]/text()</path><content>3600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/userDetails[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/userDetails[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/userDetails[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      
      
      <con:testStep type="httprequest" name="v2/user/hintqn"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="v2/user/hintqn" postQueryString="false" mediaType="application/json" id="535d7270-9ec6-4eed-b8a2-5e011dbf9a28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v2/user/hintquestion?emailaddress=${#TestSuite#emailId}</con:endpoint><con:request>{
    "validateUserHint": {
        "userId": "${#TestSuite#userId}",
        "hintId": "1",
        "hintAnswer": "answer",
        "userName": "${RandomEmailGenerator#emailAddress}"
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="32b3943b-3d33-474d-aab3-1b39dd7dbbf8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [hintId]"><con:configuration><path>//response[1]/hintId[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="v2/user/hintanswer">
          <con:settings/>
          <con:config method="PUT" xsi:type="con:HttpRequest" name="v2/user/hintanswer" postQueryString="false" mediaType="application/json" id="efc87ac3-6e93-44df-92c0-d20ef250cb28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user/hintanswer</con:endpoint>
          <con:request>{
    "validateUserHint": {
        "userId": "${#TestSuite#userId}",
        "hintId": "1",
        "hintAnswer": "${#Project#hintAnswer}",
        "userName": "${#TestSuite#emailId}"
    }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f321c440-e983-4674-8b11-e7e55e4f1ae3">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/validateUserHint[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/validateUserHint[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v2/user/resetpassword-200">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="v2/user/resetpassword-200" postQueryString="false" mediaType="application/json" id="7afb72ef-b8cd-4a5d-9950-bba8e110ace7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 1,
    "hintAnswer": "${#Project#hintAnswer}",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate}",
    "verifyPassword": "${#Project#passwordupdate}",
    "mobileAppId":"QAtesting"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ad1640d8-3dfd-45c1-ba1d-bcd6c37a67d6">
            <con:configuration><codes>200</codes></con:configuration>
          </con:assertion>
          
          
          
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userDetails]"><con:configuration><path>exists( //response/userDetails)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/userDetails[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [guid]"><con:configuration><path>//response[1]/userDetails[1]/guid[1]/text()</path><content>${#TestSuite#guid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [firstName]"><con:configuration><path>exists( //response/userDetails/firstName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [lastName]"><con:configuration><path>exists( //response/userDetails/lastName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/userDetails[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [token_type]"><con:configuration><path>//response[1]/token_type[1]/text()</path><content>bearer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expires_in]"><con:configuration><path>//response[1]/expires_in[1]/text()</path><content>3600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/userDetails[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/userDetails[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/userDetails[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="SdpToken after password reset">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="SdpToken after password reset" postQueryString="false" mediaType="application/xml" id="449e3662-8c3c-4e8a-93d2-7d694cfbd1ea" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v1/user/sdptoken</con:endpoint>
          <con:request><![CDATA[<request>
   <email>${#TestSuite#emailId}</email>
   <password>${#Project#passwordupdate}</password>
</request>]]></con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6957a925-fd85-471c-9ed0-64c2ff24231b">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          
          
          <con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//sdpinfo[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [New token]" id="c66a7771-255c-4556-9db4-f2257b9a608a">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def token = holder.getNodeValue( "//sdpinfo/token" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "genctxToken", token )


assert token != null
</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="user GET after password reset">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="user GET after password reset" postQueryString="false" mediaType="application/xml" id="2327b834-ff73-4c87-b4d0-31888f7352cc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user?show=summary,shipping,store,billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="a2588009-4ce9-4093-b9ae-b5bae0bb2fb7">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response/profile/userName/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/profile[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [address]"><con:configuration><path>exists( //response/profile/address)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [shippingContact]"><con:configuration><path>exists( //response/shippingContactMapper/shippingContact)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionMapper]"><con:configuration><path>exists( //response/subscriptionMapper)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/profile[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/profile[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/profile[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [phoneNumber]"><con:configuration><path>//response[1]/profile[1]/address[1]/phoneNumber[1]/text()</path><content>${#Project#userbestphone}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [gender]"><con:configuration><path>//response[1]/profile[1]/gender[1]/text()</path><content>${#Project#usergender}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/profile[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [email]"><con:configuration><path>//response[1]/shippingContactMapper[1]/shippingContact[1]/email[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="NEW v2/oauth2/token/resetpassword-Invalid hintAnswer">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="NEW v2/oauth2/token/resetpassword-Invalid hintAnswer" postQueryString="false" mediaType="application/json" id="a324d225-29d4-4dbc-9904-a297073baf17" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 1,
    "hintAnswer": "Invalid",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate2}",
    "verifyPassword": "${#Project#passwordupdate2}",
    "mobileAppId":"QAtesting"
}</con:request>
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Invalid data</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>We're sorry, the answer to hint answer you entered is not valid. Please try again.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="NEW v2/oauth2/token/resetpassword-Invalid hintId">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="NEW v2/oauth2/token/resetpassword-Invalid hintId" postQueryString="false" mediaType="application/json" id="a324d225-29d4-4dbc-9904-a297073baf17" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 9,
    "hintAnswer": "${#Project#hintAnswer}",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate2}",
    "verifyPassword": "${#Project#passwordupdate2}",
    "mobileAppId":"QAtesting"
}</con:request>
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Invalid data</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>We're sorry, the hintId is not valid. Please try again.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="NEW v2/oauth2/token/resetpassword-Invalid hintId/hintAnswer">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="NEW v2/oauth2/token/resetpassword-Invalid hintId/hintAnswer" postQueryString="false" mediaType="application/json" id="a324d225-29d4-4dbc-9904-a297073baf17" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 9,
    "hintAnswer": "Invalid",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate2}",
    "verifyPassword": "${#Project#passwordupdate2}",
    "mobileAppId":"QAtesting"
}</con:request>
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Invalid data</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>We're sorry, the hintId is not valid. Please try again.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="NEW v2/oauth2/token/resetpassword">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="NEW v2/oauth2/token/resetpassword" postQueryString="false" mediaType="application/json" id="a324d225-29d4-4dbc-9904-a297073baf17" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 1,
    "hintAnswer": "${#Project#hintAnswer}",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate2}",
    "verifyPassword": "${#Project#passwordupdate2}",
    "mobileAppId":"QAtesting"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="90e66958-2e3d-4503-af3b-ece2cb07e540">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          
          
          
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userDetails]"><con:configuration><path>exists( //response/userDetails)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/userDetails[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [guid]"><con:configuration><path>//response[1]/userDetails[1]/guid[1]/text()</path><content>${#TestSuite#guid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [firstName]"><con:configuration><path>exists( //response/userDetails/firstName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [lastName]"><con:configuration><path>exists( //response/userDetails/lastName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/userDetails[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [token_type]"><con:configuration><path>//response[1]/token_type[1]/text()</path><content>bearer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expires_in]"><con:configuration><path>//response[1]/expires_in[1]/text()</path><content>3600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]1"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/userDetails[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/userDetails[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/userDetails[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="SdpToken after password reset 2">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="SdpToken after password reset 2" postQueryString="false" mediaType="application/xml" id="22527ce6-47c3-4fd3-89f6-b727343f741c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v1/user/sdptoken</con:endpoint>
          <con:request><![CDATA[<request>
   <email>${#TestSuite#emailId}</email>
   <password>${#Project#passwordupdate2}</password>
</request>]]></con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="961a2d9d-fc3c-4ee1-b4c0-4964a7dfadf6">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          
          
          <con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//sdpinfo[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [New token]" id="83cfa9a5-971e-4a41-bc10-d0f597ca2472">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def token = holder.getNodeValue( "//sdpinfo/token" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "genctxToken", token )


assert token != null
</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="user GET after password reset 2">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="user GET after password reset 2" postQueryString="false" mediaType="application/xml" id="afdcfee4-dbf5-4fce-b639-b192dfe33d48" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user?show=summary,shipping,store,billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="354e4a45-85bf-4f7e-8a9f-d424e5359e3f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response/profile/userName/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/profile[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [address]"><con:configuration><path>exists( //response/profile/address)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [shippingContact]"><con:configuration><path>exists( //response/shippingContactMapper/shippingContact)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionMapper]"><con:configuration><path>exists( //response/subscriptionMapper)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/profile[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/profile[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/profile[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [phoneNumber]"><con:configuration><path>//response[1]/profile[1]/address[1]/phoneNumber[1]/text()</path><content>${#Project#userbestphone}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [gender]"><con:configuration><path>//response[1]/profile[1]/gender[1]/text()</path><content>${#Project#usergender}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/profile[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [email]"><con:configuration><path>//response[1]/shippingContactMapper[1]/shippingContact[1]/email[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="SDP-v1/users/passwordreset-without token" id="69848f84-8c34-407d-86b6-40152b6ea7c7">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="SDP-v1/users/passwordreset-without token" postQueryString="false" mediaType="application/json" id="7afb72ef-b8cd-4a5d-9950-bba8e110ace7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/sdp/api/customer/v1/users/passwordreset</con:endpoint>
          <con:request>{
    "user": {
        "userPasswordHint": {
            "id": 1,
            "answer": "${#Project#hintAnswer}"
        }
    }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ad1640d8-3dfd-45c1-ba1d-bcd6c37a67d6">
            <con:configuration><codes>503</codes></con:configuration>
          </con:assertion>
          
          
          
          <con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="SDP-v1/users/passwordreset">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="SDP-v1/users/passwordreset" postQueryString="false" mediaType="application/json" id="7afb72ef-b8cd-4a5d-9950-bba8e110ace7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/sdp/api/customer/v1/users/passwordreset</con:endpoint>
          <con:request>{
    "user": {
        "userPasswordHint": {
            "id": 1,
            "answer": "${#Project#hintAnswer}"
        }
    }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ad1640d8-3dfd-45c1-ba1d-bcd6c37a67d6">
            <con:configuration><codes>503</codes></con:configuration>
          </con:assertion>
          
          
          
          <con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="SDP-v1/profile/passwordreset-without token" id="dec2138e-dcfe-4b14-8c0e-b7fbed555390">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="SDP-v1/profile/passwordreset-without token" postQueryString="false" mediaType="application/json" id="7afb72ef-b8cd-4a5d-9950-bba8e110ace7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/sdp/api/customer/v1/profile/passwordreset</con:endpoint>
          <con:request>{
    "user": {
        "userPasswordHint": {
            "id": 1,
            "answer": "${#Project#hintAnswer}"
        }
    }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ad1640d8-3dfd-45c1-ba1d-bcd6c37a67d6">
            <con:configuration><codes>503</codes></con:configuration>
          </con:assertion>
          
          
          
          <con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="SDP-v1/profile/passwordreset">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="SDP-v1/profile/passwordreset" postQueryString="false" mediaType="application/json" id="7afb72ef-b8cd-4a5d-9950-bba8e110ace7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/sdp/api/customer/v1/profile/passwordreset</con:endpoint>
          <con:request>{
    "user": {
        "userPasswordHint": {
            "id": 1,
            "answer": "${#Project#hintAnswer}"
        }
    }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ad1640d8-3dfd-45c1-ba1d-bcd6c37a67d6">
            <con:configuration><codes>503</codes></con:configuration>
          </con:assertion>
          
          
          
          <con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="NEW v2/oauth2/token/resetpassword-https" id="46ebd632-7293-40f9-8416-70fa1252a2ad">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="NEW v2/oauth2/token/resetpassword-https" postQueryString="false" mediaType="application/json" id="a324d225-29d4-4dbc-9904-a297073baf17" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>https://auth.macys.com/v2/oauth2/token/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 1,
    "hintAnswer": "${#Project#hintAnswer}",
    "userName": "${#TestSuite#emailId}",
    "password": "test123456",
    "verifyPassword": "test123456",
    "mobileAppId":"QAtesting"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="90e66958-2e3d-4503-af3b-ece2cb07e540">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          
          
          
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userDetails]"><con:configuration><path>exists( //response/userDetails)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/userDetails[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [guid]"><con:configuration><path>//response[1]/userDetails[1]/guid[1]/text()</path><content>${#TestSuite#guid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [firstName]"><con:configuration><path>exists( //response/userDetails/firstName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [lastName]"><con:configuration><path>exists( //response/userDetails/lastName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/userDetails[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [token_type]"><con:configuration><path>//response[1]/token_type[1]/text()</path><content>bearer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expires_in]"><con:configuration><path>//response[1]/expires_in[1]/text()</path><content>3600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]1"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/userDetails[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/userDetails[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/userDetails[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="NEW v2/oauth2/token/updatepassword" id="8cba3438-1de4-4bac-a6e3-a77a30ba1f9a">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="NEW v2/oauth2/token/updatepassword" postQueryString="false" mediaType="application/json" id="a324d225-29d4-4dbc-9904-a297073baf17" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/updatepassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 1,
    "hintAnswer": "${#Project#hintAnswer}",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate3}",
    "verifyPassword": "${#Project#passwordupdate3}",
    "mobileAppId":"QAtesting"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="90e66958-2e3d-4503-af3b-ece2cb07e540">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          
          
          
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userDetails]"><con:configuration><path>exists( //response/userDetails)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/userDetails[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [guid]"><con:configuration><path>//response[1]/userDetails[1]/guid[1]/text()</path><content>${#TestSuite#guid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [firstName]"><con:configuration><path>exists( //response/userDetails/firstName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [lastName]"><con:configuration><path>exists( //response/userDetails/lastName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/userDetails[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [token_type]"><con:configuration><path>//response[1]/token_type[1]/text()</path><content>bearer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expires_in]"><con:configuration><path>//response[1]/expires_in[1]/text()</path><content>3600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]1"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/userDetails[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/userDetails[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/userDetails[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>itemFound_flag</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>productId</con:name>
          <con:value>28882</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>0592ea83-f3a6-4715-a90d-61a7d166ee99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>9ffeff1c-93b3-4911-802f-7b3249befd99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0b3fa046-21fa-4659-88e8-b6c33f1cf804</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>4f5c7e3c-135f-4654-93c5-d190df1852a8</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f8c76a06-37f8-4430-aeb2-95dae3164a6f</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>6872eaa4-73e8-4f42-b546-bc576a1e8b72</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>c136b370-6432-414a-8fa5-58bd2e0bbe82</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>92ec6ffc-03d0-480a-b2ca-46d275a19e41</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f0059ac9-6192-4a1e-b7fc-a1e05a6f09b5</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>bbc35938-5b71-4610-ba04-3544735df16b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>93bd8caa-2b6a-45c1-a4da-99dd6ec3d88e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e04cf0d4-2f9f-40eb-b6a6-92f97540b861</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>da4ec907-3bbe-43da-a488-fa36cab4313b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b9cfe94f-350f-4aec-a0d4-c1ef63289c4b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3ac7cb55-c0a9-4fb5-a7ad-c7aeb199a019</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>03474a32-c822-4545-b562-2b96e0134fea</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>505ee185-4d82-4c4a-a7d6-a41dd9c1d6f0</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>909feb60-d9f4-48c2-b9b4-539eb072ad17</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a7d3655f-5895-4bdd-9509-ae876f731273</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>88c4bfb7-99b8-4b0a-9f17-0b98a961a714</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a9b09540-cda6-4a4b-b13e-c7f52370eda2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>42f5b219-5485-468c-8e76-2a419789cd8a</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3245cf88-02bc-420d-8cda-9842d008c2cc</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3a329d8f-0c5b-4a5d-b19d-19cfb4ab41bf</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>8f648578-cbf5-49c9-9f30-1c26faabb4af</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>00716173-f33f-4414-badf-682d962d8850</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0141cb0c-98f6-4d7e-822a-6864e5e6c251</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>963184d7-ff9e-4db6-b4b8-6dcc09a27b5d</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>276d686a-98f8-497d-a7b0-4a0eaf4029c9</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b01c8947-86f0-4e9a-85e6-f6e82be11ff1</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>987b86e6-69f4-48e3-964f-2cdf26df18b6</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e1c4a7cf-ba07-4781-b9aa-2a06a6eb7c64</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>7f3b1263-a5a7-47ea-9a29-8ec42d9478be</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0e5c94c2-733b-49d9-a665-f180c7b83997</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>630f94af-7ad1-44fe-ad25-8e8b0194e3ad</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    <con:breakPoints><con:testStepId>aa3ecccd-3afd-4ab1-9d33-30bb80755908</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>560329e7-45f0-49fa-a556-82052ea5b881</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>49d18a11-f314-4933-99e6-e77051d91281</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>93599fcc-c00e-454c-ae48-447ba1cf3882</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35a3862a-ed63-49aa-987b-d6fff099f1ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1ffa996-f3ef-4b50-874f-919e5c65b010</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8cf67a34-747a-4aa4-b446-171be3cfc157</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2d3c7ca7-baca-4787-b6e0-71170c0a3035</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>002dc4a0-448d-4046-bfdd-0c47f62c9647</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>10fc762d-01ef-479f-9ee5-e62e0c6f7e02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46d622e6-6d47-4689-b8fd-4a3e4882bd6e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d3709c35-3816-4317-b38f-179eaedf8dde</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf4a2f60-b0b0-44d6-b1e0-81834e6f7f51</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6c8396dd-0ca9-41d4-ac04-dbe734b9519a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26d55283-9cec-419a-934f-c404d89d1c47</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe1ce6d0-fd05-43d8-8fa5-a55447f80b8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8cba3438-1de4-4bac-a6e3-a77a30ba1f9a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:properties>
      
      <con:property>
        <con:name>userId</con:name>
        <con:value>2158646117</con:value>
      </con:property>
      <con:property>
        <con:name>emailId</con:name>
        <con:value>user24053619@user.com</con:value>
      </con:property>
      <con:property>
        <con:name>registryId</con:name>
        <con:value>802775</con:value>
      </con:property>
      <con:property>
        <con:name>CityCoRegUpdate</con:name>
        <con:value>Citycoregupdate</con:value>
      </con:property>
      <con:property>
        <con:name>CityRegUpdate</con:name>
        <con:value>Cityregpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>CoRegAddfromReg</con:name>
        <con:value>false</con:value>
      </con:property>
      <con:property>
        <con:name>coregCity</con:name>
        <con:value>Coregcity</con:value>
      </con:property>
      <con:property>
        <con:name>CoRegCityShippingUpdate</con:name>
        <con:value>Coregcityshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>CoRegCountryShippingUpdate</con:name>
        <con:value>USA</con:value>
      </con:property>
      <con:property>
        <con:name>coregEmail</con:name>
        <con:value>user24053619@coreg.com</con:value>
      </con:property>
      <con:property>
        <con:name>coregEmailToUpdate</con:name>
        <con:value>coregemaiorsonupdate@macys.com</con:value>
      </con:property>
      <con:property>
        <con:name>coregFirstname</con:name>
        <con:value>Gogod</con:value>
      </con:property>
      <con:property>
        <con:name>coregFirstnameToUpdate</con:name>
        <con:value>Coregfpersonupdatee</con:value>
      </con:property>
      <con:property>
        <con:name>coregLastname</con:name>
        <con:value>UECtyo</con:value>
      </con:property>
      <con:property>
        <con:name>coregLastnameToUpdate</con:name>
        <con:value>Coreglpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>coregMiddlename</con:name>
        <con:value>Coregmiddlenamee</con:value>
      </con:property>
      <con:property>
        <con:name>coregMiddlenameToUpdate</con:name>
        <con:value>Coregiddlepersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>coregPhone</con:name>
        <con:value>1230456786</con:value>
      </con:property>
      <con:property>
        <con:name>coregPhoneToUpdate</con:name>
        <con:value>1111111118</con:value>
      </con:property>
      <con:property>
        <con:name>CoRegStateShippingUpdate</con:name>
        <con:value>CA</con:value>
      </con:property>
      <con:property>
        <con:name>CoRegZipShippingUpdate</con:name>
        <con:value>10022</con:value>
      </con:property>
      <con:property>
        <con:name>couplesMessage</con:name>
        <con:value>Wishes 2nd!!!</con:value>
      </con:property>
      <con:property>
        <con:name>couplesMessageToUpdate</con:name>
        <con:value>couples Message Update</con:value>
      </con:property>
      <con:property>
        <con:name>CRFName</con:name>
        <con:value>zEiAVzZOGHdThBtCTwj</con:value>
      </con:property>
      <con:property>
        <con:name>CRLName</con:name>
        <con:value>DeEPdDPFGusSmfDWqHji</con:value>
      </con:property>
      <con:property>
        <con:name>EventDay</con:name>
        <con:value>15</con:value>
      </con:property>
      <con:property>
        <con:name>EventDayPersonUpdate</con:name>
        <con:value>5</con:value>
      </con:property>
      <con:property>
        <con:name>EventDayToUpdate</con:name>
        <con:value>19</con:value>
      </con:property>
      <con:property>
        <con:name>EventMonth</con:name>
        <con:value>9</con:value>
      </con:property>
      <con:property>
        <con:name>EventMonthPersonUpdate</con:name>
        <con:value>5</con:value>
      </con:property>
      <con:property>
        <con:name>EventMonthToUpdate</con:name>
        <con:value>12</con:value>
      </con:property>
      <con:property>
        <con:name>EventYear</con:name>
        <con:value>2015</con:value>
      </con:property>
      <con:property>
        <con:name>EventYearPersonUpdate</con:name>
        <con:value>2017</con:value>
      </con:property>
      <con:property>
        <con:name>EventYearToUpdate</con:name>
        <con:value>2018</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingCity</con:name>
        <con:value>Fshippingcityy</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingCityUpdate</con:name>
        <con:value>los angels</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingCountryUpdate</con:name>
        <con:value>USA</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingState</con:name>
        <con:value>CA</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingStateUpdate</con:name>
        <con:value>LA</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingZip</con:name>
        <con:value>90478</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingZipUpdate</con:name>
        <con:value>11002</con:value>
      </con:property>
      <con:property>
        <con:name>FutEffDay</con:name>
        <con:value>10</con:value>
      </con:property>
      <con:property>
        <con:name>FutEffMonth</con:name>
        <con:value>10</con:value>
      </con:property>
      <con:property>
        <con:name>FutEffYear</con:name>
        <con:value>2019</con:value>
      </con:property>
      <con:property>
        <con:name>futureShippingSource</con:name>
        <con:value>REGISTRANT</con:value>
      </con:property>
      <con:property>
        <con:name>goGreen</con:name>
        <con:value>true</con:value>
      </con:property>
      <con:property>
        <con:name>GoGreenToUpdate</con:name>
        <con:value>false</con:value>
      </con:property>
      <con:property>
        <con:name>isFutureAdd</con:name>
        <con:value>false</con:value>
      </con:property>
      <con:property>
        <con:name>Line1CoReg</con:name>
        <con:value>Line1coreg</con:value>
      </con:property>
      <con:property>
        <con:name>Line1CoRegShippingUpdate</con:name>
        <con:value>Line1coregshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line1CoRegUpdate</con:name>
        <con:value>Line1coregpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line1FShippingUpdate</con:name>
        <con:value>Line1fshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line1Future</con:name>
        <con:value>Line1futuree</con:value>
      </con:property>
      <con:property>
        <con:name>Line1Reg</con:name>
        <con:value>Line1rege</con:value>
      </con:property>
      <con:property>
        <con:name>Line1RegShippingUpdate</con:name>
        <con:value>Line1regshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line1RegUpdate</con:name>
        <con:value>Line1regpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line1Shipping</con:name>
        <con:value>Line1shippinge</con:value>
      </con:property>
      <con:property>
        <con:name>Line1ShippingUpdate</con:name>
        <con:value>Line1shippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line2CoReg</con:name>
        <con:value>Line2corege</con:value>
      </con:property>
      <con:property>
        <con:name>Line2CoRegShippingUpdate</con:name>
        <con:value>Line2coregshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line2CoRegUpdate</con:name>
        <con:value>Line2coregpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line2FShippingUpdate</con:name>
        <con:value>Line2fshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line2Future</con:name>
        <con:value>Line2future</con:value>
      </con:property>
      <con:property>
        <con:name>Line2Reg</con:name>
        <con:value>Line2rege</con:value>
      </con:property>
      <con:property>
        <con:name>Line2RegShippingUpdate</con:name>
        <con:value>Line2regshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line2RegUpdate</con:name>
        <con:value>Line2regpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line2Shipping</con:name>
        <con:value>Line2shipping</con:value>
      </con:property>
      <con:property>
        <con:name>Line2ShippingUpdate</con:name>
        <con:value>Line2shippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line3CoReg</con:name>
        <con:value>Line3corege</con:value>
      </con:property>
      <con:property>
        <con:name>Line3CoRegShippingUpdate</con:name>
        <con:value>Line3coregshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line3CoRegUpdate</con:name>
        <con:value>Line3coregpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line3FShippingUpdate</con:name>
        <con:value>Line3fshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line3Future</con:name>
        <con:value>Line3futuree</con:value>
      </con:property>
      <con:property>
        <con:name>Line3Reg</con:name>
        <con:value>Line3reg</con:value>
      </con:property>
      <con:property>
        <con:name>Line3RegShippingUpdate</con:name>
        <con:value>Line3regshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line3RegUpdate</con:name>
        <con:value>Line3regpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line3Shipping</con:name>
        <con:value>Line3shipping</con:value>
      </con:property>
      <con:property>
        <con:name>Line3ShippingUpdate</con:name>
        <con:value>Line3shippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>NoOfGuests</con:name>
        <con:value>50</con:value>
      </con:property>
      <con:property>
        <con:name>NoOfGuestsToUpdate</con:name>
        <con:value>33</con:value>
      </con:property>
      <con:property>
        <con:name>OnlineUPC</con:name>
        <con:value>11644599126</con:value>
      </con:property>
      <con:property>
        <con:name>OnTheInternet</con:name>
        <con:value>true</con:value>
      </con:property>
      <con:property>
        <con:name>preferredStoreId</con:name>
        <con:value>4</con:value>
      </con:property>
      <con:property>
        <con:name>preferredStoreIdUpdate</con:name>
        <con:value>71</con:value>
      </con:property>
      <con:property>
        <con:name>productids</con:name>
        <con:value>2585,2591,2638,2639,2640,2641,2644,2646,2647,2665,2666,2667,2668,2669,2672,2676,2679,2680,2681,2682,2683,2686,2687,2688,2689</con:value>
      </con:property>
      <con:property>
        <con:name>publicRegistry</con:name>
        <con:value>true</con:value>
      </con:property>
      <con:property>
        <con:name>regCity</con:name>
        <con:value>Regcity</con:value>
      </con:property>
      <con:property>
        <con:name>regCityShippingUpdate</con:name>
        <con:value>Regctysippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>regCountryShippingUpdate</con:name>
        <con:value>USA</con:value>
      </con:property>
      <con:property>
        <con:name>regEmail</con:name>
        <con:value>user24053619@reg.com</con:value>
      </con:property>
      <con:property>
        <con:name>regEmailToUpdate</con:name>
        <con:value>regemailpersonupdate@macys.com</con:value>
      </con:property>
      <con:property>
        <con:name>regFirstname</con:name>
        <con:value>rzdkQQA</con:value>
      </con:property>
      <con:property>
        <con:name>regFirstnameToUpdate</con:name>
        <con:value>Regfirstpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>registryBarcode</con:name>
        <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2800008027751</con:value>
      </con:property>
      <con:property>
        <con:name>registryType</con:name>
        <con:value>WEDDING</con:value>
      </con:property>
      <con:property>
        <con:name>registryTypeupdate</con:name>
        <con:value>COMMITMENT</con:value>
      </con:property>
      <con:property>
        <con:name>regLastname</con:name>
        <con:value>UaORkJnf</con:value>
      </con:property>
      <con:property>
        <con:name>regLastnameToUpdate</con:name>
        <con:value>Reglastpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>regMiddlename</con:name>
        <con:value>Regmiddlenamee</con:value>
      </con:property>
      <con:property>
        <con:name>regMiddlenameToUpdate</con:name>
        <con:value>Regmiddlepersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>regPhone</con:name>
        <con:value>1230456785</con:value>
      </con:property>
      <con:property>
        <con:name>regPhoneToUpdate</con:name>
        <con:value>2222222280</con:value>
      </con:property>
      <con:property>
        <con:name>regState</con:name>
        <con:value>MA</con:value>
      </con:property>
      <con:property>
        <con:name>regStateShippingUpdate</con:name>
        <con:value>MA</con:value>
      </con:property>
      <con:property>
        <con:name>regZipShippingUpdate</con:name>
        <con:value>12345</con:value>
      </con:property>
      <con:property>
        <con:name>RFName</con:name>
        <con:value>aUBWjhIYkhAoiTvVx</con:value>
      </con:property>
      <con:property>
        <con:name>RLName</con:name>
        <con:value>AwulpXimCCtGhfuFSk</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingCity</con:name>
        <con:value>Shippingcity</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingCityUpdate</con:name>
        <con:value>Shippingcityupdate</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingCountryUpdate</con:name>
        <con:value>USA</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingFName</con:name>
        <con:value>Shippingfname</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingLName</con:name>
        <con:value>Shippinglname</con:value>
      </con:property>
      <con:property>
        <con:name>shippingSource</con:name>
        <con:value>REGISTRANT</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingState</con:name>
        <con:value>NY</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingStateUpdate</con:name>
        <con:value>CA</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingZip</con:name>
        <con:value>10022</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingZipUpdate</con:name>
        <con:value>94538</con:value>
      </con:property>
      <con:property>
        <con:name>StatecodeToUpdate</con:name>
        <con:value>LA</con:value>
      </con:property>
      <con:property>
        <con:name>StateCoReg</con:name>
        <con:value>LA</con:value>
      </con:property>
      <con:property>
        <con:name>StateCoRegUpdate</con:name>
        <con:value>MA</con:value>
      </con:property>
      <con:property>
        <con:name>StateRegUpdate</con:name>
        <con:value>CA</con:value>
      </con:property>
      <con:property>
        <con:name>subscribeWeddingEmail</con:name>
        <con:value>true</con:value>
      </con:property>
      <con:property>
        <con:name>subscribeWeddingEmailUpdate</con:name>
        <con:value>false</con:value>
      </con:property>
      <con:property>
        <con:name>ZipcodeCoReg</con:name>
        <con:value>10022</con:value>
      </con:property>
      <con:property>
        <con:name>ZipcodeCoRegUpdate</con:name>
        <con:value>10022</con:value>
      </con:property>
      <con:property>
        <con:name>ZipcodeReg</con:name>
        <con:value>90412</con:value>
      </con:property>
      <con:property>
        <con:name>ZipcodeRegUpdate</con:name>
        <con:value>94103</con:value>
      </con:property>
      <con:property>
        <con:name>FutEffMonthShippingUpdate</con:name>
        <con:value>10</con:value>
      </con:property>
      <con:property>
        <con:name>FutEffDayShippingUpdate</con:name>
        <con:value>25</con:value>
      </con:property>
      <con:property>
        <con:name>FutEffYearShippingUpdate</con:name>
        <con:value>2020</con:value>
      </con:property>
      <con:property>
        <con:name>futureShippingAttentionUpdate</con:name>
        <con:value>Future Shipping Attention Update</con:value>
      </con:property>
      <con:property>
        <con:name>futureShippingAddressSourceUpdate</con:name>
        <con:value>REGISTRANT</con:value>
      </con:property>
      <con:property>
        <con:name>shippingAddressSourceUpdate</con:name>
        <con:value>COREGISTRANT</con:value>
      </con:property>
    <con:property><con:name>guid</con:name><con:value>791a79e1-1d77-4441-a5e0-8f6866ff7386</con:value></con:property><con:property><con:name>bazaarVoiceId</con:name><con:value>e4f11ccc4f9306c73aec1effad62831d32313538363436313137</con:value></con:property><con:property><con:name>access_token</con:name><con:value>etgddtxyj2vbhyf88sgamsrh</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>q6fyyt2anbrv6buqxt5e6dnr</con:value></con:property><con:property><con:name>genctxToken</con:name><con:value>5rTvy9h8s38YtttXr6yjWCAjwHnNaHJ1DaaLm1aKxjVi7Ty7UVZGTw4vdNOCW30IP0fhCcJK0+fyV5NXs8+gLPiibIkq5TR1M4JsCMHrBE9ZIuDYkAPWO2khRzTqr9kZOy4UYXBVwIyTXVgJV+rKOBAQlsylQOhs1kEkQMhFINpAQQg2oUstrYR/XXd3AdIS</con:value></con:property></con:properties>
    <con:reportParameters/>
  </con:testSuite>
  
<con:testSuite name="19098:Password Reset-GREEN" id="62a6c3d3-8efe-4bc8-b85a-dc62490867b4">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="true" maxResults="0" name="Password Reset" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8fa46605-8347-47b6-94e0-532d06ceaefb">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
        <con:setting id="IncludeOverview">true</con:setting>
        <con:setting id="IncludeResults">true</con:setting>
        <con:setting id="FlowLayout">true</con:setting>
        <con:setting id="ErrorDetails">true</con:setting>
        <con:setting id="IncludeCoverage">true</con:setting>
        <con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting>
        <con:setting id="GeneratableJUnitReport@Folder">C:\Users\tijo.thomas\Desktop</con:setting>
      </con:settings>
      
      <con:testStep type="datagen" name="RandomEmailGenerator" id="aa3ecccd-3afd-4ab1-9d33-30bb80755908">
      <con:settings/>
      <con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:property type="Script">
          <con:configuration><script>def sdf = new java.text.SimpleDateFormat("ddhhmmss")
					def useremail =  "user"+sdf.format( new Date())+"@user.com"
					def regEmail =  "user"+sdf.format( new Date())+"@reg.com"
					def coregEmail =  "user"+sdf.format( new Date())+"@coreg.com"					

					def coregFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(5)
					def coregLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
					def regFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(7)
					def regLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(8)
					
					testRunner.testCase.testSuite.setPropertyValue( "emailId", useremail )
					testRunner.testCase.testSuite.setPropertyValue( "regEmail", regEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregEmail", coregEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregFirstname", coregFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "coregLastname", coregLastname )
					testRunner.testCase.testSuite.setPropertyValue( "regFirstname", regFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "regLastname", regLastname )
					return email 
			</script></con:configuration>
          <con:name>emailAddress</con:name>
          <con:mode>STEP</con:mode>
          <con:shared>true</con:shared>
        </con:property>
      </con:config>
    </con:testStep>
      <con:testStep type="httprequest" name="Create user JSON" id="630f94af-7ad1-44fe-ad25-8e8b0194e3ad">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="Create user JSON" postQueryString="false" mediaType="application/json" id="2266e574-c513-4336-886d-a4647b7cd1b1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-tokenHeader" value="value"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user</con:endpoint>
          <con:request>{
    "firstname": "${#Project#userfirstname}",
    "lastname": "${#Project#userlastname}",
    "address1": "${#Project#useraddress1}",
    "address2": "${#Project#useraddress2}",
    "gender": "${#Project#usergender}",
    "city": "${#Project#usercity}",
    "state": "${#Project#userstate}",
    "zipcode": "${#Project#userzip}",
    "countrycode": "${#Project#usercountry}",
    "emailaddress": "${#TestSuite#emailId}",
    "verifyemailaddress": "${#TestSuite#emailId}",
    "password": "${#Project#password}",
    "verifypassword": "${#Project#password}",
    "birthdateday": "31",
    "birthdatemonth": "05",
    "birthdateyear": "1976",
    "subscription": "N",
    "textoption": "false",
    "bestphone": "${#Project#userbestphone}",
    "mobilephone": "${#Project#usermobilephone}",
    "passwordHintQuestion": "1",
    "passwordHintAnswer": "${#Project#hintAnswer}",
    "shippingAddress": {
        "shippingAddressFirstName": "${#Project#shippingFirstName}",
        "shippingAddressLastName": "${#Project#shippingLastName}",
        "shippingAddress1": "${#Project#shippingAddress1}",
        "shippingAddressZipCode": "${#Project#shippingZip}",
        "shippingAddressBestPhone": "${#Project#shippingBestPhone}",
        "shippingAddressCity": "${#Project#shippingCity}",
        "shippingAddressState": "${#Project#shippingState}"
    },
    "userPreferredStoreId": "${#Project#preferredStoreId}"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="470e589a-b65d-47b0-97b2-5f2c49a422f4">
            <con:configuration><codes>200</codes></con:configuration>
          </con:assertion>
          
          <con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success=true]"><con:configuration><path>//response[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set-userId,guid,BVid">
              <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def userId=holder.getNodeValue("//response/userId")
def guid=holder.getNodeValue("//response/guid")
def bazaarVoiceId=holder.getNodeValue("//response/bazaarVoiceId")

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "userId", userId.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "guid", guid.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "bazaarVoiceId", bazaarVoiceId.toString() )
</scriptText></con:configuration>
            </con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
        
        <con:testStep type="httprequest" name="POST v2/user" id="cf8673c1-95b2-4798-9434-f9d94efb4213" disabled="true">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="POST v2/user" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="ced1a7fb-1292-460a-a87a-f09ea6dd7143" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user</con:endpoint>
          <con:request><![CDATA[firstname=${#Project#userfirstname}&lastname=${#Project#userlastname}&address1=${#Project#useraddress1}&address2=${#Project#useraddress2}&gender=${#Project#usergender}&city=${#Project#usercity}&state=${#Project#userstate}&zipcode=${#Project#userzip}&countrycode=${#Project#usercountry}&emailaddress=${#TestSuite#emailId}&verifyemailaddress=${#TestSuite#emailId}&password=${#Project#password}&verifypassword=${#Project#password}&birthdateday=14&birthdatemonth=05&birthdateyear=1976&subscription=N&textoption=N&bestphone=${#Project#userbestphone}&mobilephone=${#Project#usermobilephone}&hintquestion=1&hintanswer=${#Project#hintAnswer}&userPreferredStoreId=${#Project#preferredStoreId}]]></con:request>
            <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f6e4e10a-5c4b-43f7-9117-df461f64209c">
              <con:configuration>
                <codes>200</codes>
              </con:configuration>
            </con:assertion>
            
            <con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success=true]" id="0bdd4cbc-b83f-4558-8941-b4c16a810d65"><con:configuration><path>//response[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set-userId,guid,BVid" id="075d956a-c3cb-4ec9-ac02-02cdd8af9521">
              <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def userId=holder.getNodeValue("//response/userId")
def guid=holder.getNodeValue("//response/guid")
def bazaarVoiceId=holder.getNodeValue("//response/bazaarVoiceId")

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "userId", userId.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "guid", guid.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "bazaarVoiceId", bazaarVoiceId.toString() )
</scriptText></con:configuration>
            </con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:config>
        </con:testStep>
        <con:testStep type="httprequest" name="v1/user/sdptoken" id="4959a9c5-84a3-4088-a8db-3e1c145669e7">
          <con:settings/>
          <con:config method="POST" xsi:type="con:HttpRequest" name="v1/user/sdptoken" postQueryString="false" mediaType="application/xml" id="47cc95bb-ddd0-4401-963b-cd7baad328ce" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
            <con:endpoint>${#Project#endPoint}/v1/user/sdptoken</con:endpoint>
            <con:request><![CDATA[<request>
  <email>${#TestSuite#emailId}</email>
  <password>${#Project#password}</password>
</request> ]]></con:request>
            <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="5169e013-1db6-41ca-aa3a-78649feb7345">
              <con:configuration>
                <codes>200</codes>
              </con:configuration>
            </con:assertion>
            
            
            <con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//sdpinfo[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [token]" id="cae1e16b-01b2-433c-9f5a-2edd07087121">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def token = holder.getNodeValue( "//sdpinfo/token" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "genctxToken", token )


assert token != null
</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:config>
        </con:testStep>
      <con:testStep type="httprequest" name="GET v2/user" id="c8a4ad30-853e-4702-b45d-409fccb3566d">
          <con:settings/>
          <con:config method="GET" xsi:type="con:HttpRequest" name="GET v2/user" postQueryString="false" mediaType="application/xml" id="52c30410-c89e-4401-8305-47ac12ef91c5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
            <con:endpoint>${#Project#endPoint}/v2/user?show=summary,shipping,store,billing</con:endpoint>
            <con:request/>
            <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c75b0db2-8ba0-4105-acfd-bc46a618dcf1">
              <con:configuration>
                <codes>200</codes>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/profile[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [address]"><con:configuration><path>exists( //response/profile/address)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [shippingContact]"><con:configuration><path>exists( //response/shippingContactMapper/shippingContact)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionMapper]"><con:configuration><path>exists( //response/subscriptionMapper)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/profile[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/profile[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [addressLine1]"><con:configuration><path>//response[1]/profile[1]/address[1]/addressLine1[1]/text()</path><content>${#Project#useraddress1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [addressLine2]"><con:configuration><path>//response[1]/profile[1]/address[1]/addressLine2[1]/text()</path><content>${#Project#useraddress2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [city]"><con:configuration><path>//response[1]/profile[1]/address[1]/city[1]/text()</path><content>${#Project#usercity}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [stateCode]"><con:configuration><path>//response[1]/profile[1]/address[1]/stateCode[1]/text()</path><content>${#Project#userstate}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [postalCode]"><con:configuration><path>//response[1]/profile[1]/address[1]/postalCode[1]/text()</path><content>${#Project#userzip}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [phoneNumber]"><con:configuration><path>//response[1]/profile[1]/address[1]/phoneNumber[1]/text()</path><content>${#Project#userbestphone}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [gender]"><con:configuration><path>//response[1]/profile[1]/gender[1]/text()</path><content>${#Project#usergender}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/profile[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/profile[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]" id="92a5d6f8-fe84-4b5e-ba31-39d47a2ead6e"><con:configuration><path>//response/profile/userName/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [email]"><con:configuration><path>//response[1]/shippingContactMapper[1]/shippingContact[1]/email[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:config>
        </con:testStep>
      
      <con:testStep type="httprequest" name="SDP-v1/users/passwordreset" id="fe1ce6d0-fd05-43d8-8fa5-a55447f80b8f" disabled="true">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="SDP-v1/users/passwordreset" postQueryString="false" mediaType="application/json" id="7afb72ef-b8cd-4a5d-9950-bba8e110ace7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/sdp/api/customer/v1/users/passwordreset</con:endpoint>
          <con:request>{
    "user": {
        "userPasswordHint": {
            "id": 1,
            "answer": "${#Project#hintAnswer}"
        }
    }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ad1640d8-3dfd-45c1-ba1d-bcd6c37a67d6">
            <con:configuration><codes>200</codes></con:configuration>
          </con:assertion>
          
          
          
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userDetails]"><con:configuration><path>exists( //response/userDetails)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/userDetails[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [guid]"><con:configuration><path>//response[1]/userDetails[1]/guid[1]/text()</path><content>${#TestSuite#guid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [firstName]"><con:configuration><path>exists( //response/userDetails/firstName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [lastName]"><con:configuration><path>exists( //response/userDetails/lastName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match-registryId" id="342fb240-e5a6-4b3f-8f3d-271a2a6ad675">
            <con:configuration><path>//response/userDetails/registryId/text()</path><content>${#TestSuite#registryId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
          </con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/userDetails[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [token_type]"><con:configuration><path>//response[1]/token_type[1]/text()</path><content>bearer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expires_in]"><con:configuration><path>//response[1]/expires_in[1]/text()</path><content>3600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/userDetails[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/userDetails[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/userDetails[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="v2/oauth2/token/userDetails" id="560329e7-45f0-49fa-a556-82052ea5b881">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="v2/oauth2/token/userDetails" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="8365a970-dc61-4b50-9fdc-ce9529b8b384" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/userDetails?application=Mobile</con:endpoint>
          <con:request>grant_type=password&amp;username=${#TestSuite#emailId}&amp;password=${#Project#password}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4a264877-2520-44da-a7f2-d9ea73b106ed">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Set access_token&amp;refresh_token" id="1f40e6fe-fc09-4b21-aeea-1a6343bb8a02">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def access_token=holder.getNodeValue("//response/access_token");
def refresh_token=holder.getNodeValue("//response/refresh_token");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "refresh_token", refresh_token.toString() )

assert access_token != null
assert refresh_token != null</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [userId]" id="5ba4ba49-627e-4c08-b3f4-3e2c6025677e"><con:configuration><path>//response/userDetails/userId/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [guid]" id="d4559cb8-0920-4f99-8091-818135cf89c3"><con:configuration><path>//response/userDetails/guid/text()</path><content>${#TestSuite#guid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]" id="a2e6e10e-4deb-4673-86b9-435209863193"><con:configuration><path>//response/userDetails/bazaarVoiceId/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [token_type]"><con:configuration><path>//response[1]/token_type[1]/text()</path><content>bearer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expires_in]"><con:configuration><path>//response[1]/expires_in[1]/text()</path><content>3600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/userDetails[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/userDetails[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/userDetails[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="v2/user/emailPassword?unregistered-400" id="35a3862a-ed63-49aa-987b-d6fff099f1ce"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="v2/user/emailPassword?unregistered-400" postQueryString="false" mediaType="application/json" id="535d7270-9ec6-4eed-b8a2-5e011dbf9a28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v2/user/emailPassword?emailaddress=unregistered@macys.com</con:endpoint><con:request>{
    "validateUserHint": {
        "userId": "${#TestSuite#userId}",
        "hintId": "1",
        "hintAnswer": "answer",
        "userName": "${RandomEmailGenerator#emailAddress}"
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes-Def-15471" id="32b3943b-3d33-474d-aab3-1b39dd7dbbf8"><con:configuration><codes>502</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Remote error</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep>
      <con:testStep type="httprequest" name="v2/user/hintqn?unregistered-400" id="b1ffa996-f3ef-4b50-874f-919e5c65b010"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="v2/user/hintqn?unregistered-400" postQueryString="false" mediaType="application/json" id="535d7270-9ec6-4eed-b8a2-5e011dbf9a28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v2/user/hintquestion?emailaddress=unregistered@macys.com</con:endpoint><con:request>{
    "validateUserHint": {
        "userId": "${#TestSuite#userId}",
        "hintId": "1",
        "hintAnswer": "answer",
        "userName": "${RandomEmailGenerator#emailAddress}"
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="32b3943b-3d33-474d-aab3-1b39dd7dbbf8"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep>
      <con:testStep type="httprequest" name="v2/user/hintqn" id="49d18a11-f314-4933-99e6-e77051d91281"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="v2/user/hintqn" postQueryString="false" mediaType="application/json" id="535d7270-9ec6-4eed-b8a2-5e011dbf9a28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v2/user/hintquestion?emailaddress=${#TestSuite#emailId}</con:endpoint><con:request>{
    "validateUserHint": {
        "userId": "${#TestSuite#userId}",
        "hintId": "1",
        "hintAnswer": "answer",
        "userName": "${RandomEmailGenerator#emailAddress}"
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="32b3943b-3d33-474d-aab3-1b39dd7dbbf8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [hintId]"><con:configuration><path>//response[1]/hintId[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="v2/user/hintanswer - Invalid Qn" id="cf4a2f60-b0b0-44d6-b1e0-81834e6f7f51">
          <con:settings/>
          <con:config method="PUT" xsi:type="con:HttpRequest" name="v2/user/hintanswer - Invalid Qn" postQueryString="false" mediaType="application/json" id="efc87ac3-6e93-44df-92c0-d20ef250cb28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user/hintanswer</con:endpoint>
          <con:request>{
    "validateUserHint": {
        "userId": "${#TestSuite#userId}",
        "hintId": "9",
        "hintAnswer": "${#Project#hintAnswer}",
        "userName": "${#TestSuite#emailId}"
    }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f321c440-e983-4674-8b11-e7e55e4f1ae3">
            <con:configuration><codes>400</codes></con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Invalid data</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>We're sorry, the hintId is not valid. Please try again.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v2/user/hintanswer - Invalid Answer" id="2d3c7ca7-baca-4787-b6e0-71170c0a3035">
          <con:settings/>
          <con:config method="PUT" xsi:type="con:HttpRequest" name="v2/user/hintanswer - Invalid Answer" postQueryString="false" mediaType="application/json" id="efc87ac3-6e93-44df-92c0-d20ef250cb28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user/hintanswer</con:endpoint>
          <con:request>{
    "validateUserHint": {
        "userId": "${#TestSuite#userId}",
        "hintId": "1",
        "hintAnswer": "Invalid",
        "userName": "${#TestSuite#emailId}"
    }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f321c440-e983-4674-8b11-e7e55e4f1ae3">
            <con:configuration><codes>400</codes></con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Invalid data</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>We're sorry, the answer to hint answer you entered is not valid. Please try again.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v2/user/hintanswer" id="3cf490b4-991b-4657-bfe4-09e4dbe0dfd7">
          <con:settings/>
          <con:config method="PUT" xsi:type="con:HttpRequest" name="v2/user/hintanswer" postQueryString="false" mediaType="application/json" id="efc87ac3-6e93-44df-92c0-d20ef250cb28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user/hintanswer</con:endpoint>
          <con:request>{
    "validateUserHint": {
        "userId": "${#TestSuite#userId}",
        "hintId": "1",
        "hintAnswer": "${#Project#hintAnswer}",
        "userName": "${#TestSuite#emailId}"
    }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f321c440-e983-4674-8b11-e7e55e4f1ae3">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/validateUserHint[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/validateUserHint[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="Create Registry.JSON REAL" id="26d55283-9cec-419a-934f-c404d89d1c47" disabled="true"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Create Registry.JSON REAL" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v2/registry</con:endpoint><con:request>{
    "registry": {
      "shippingAddressSource": "REGISTRANT",
      "futureShippingAddressSource": "COREGISTRANT",
      "coRegistrantContactInfo": {
       
        "emailAddress": "jack.rollers@hotmail.com",
        "bestPhone": "4157895526",
        "lastName": "rollers",
        "firstName": "jack",
        "currentAddress": {
          "addressLine1": "C205",
          "addressLine2": "walnut street",
          
          "state": "CA",
          "city": "San Jose",
          "postalCode": "98451",
          "country": "USA"
        }
      },
      "registrantContactInfo": {
        
        "emailAddress": "Mila.shia@hotmail.com",
        "bestPhone": "4157896503",
        "lastName": "shia",
        "firstName": "mila",
        "currentAddress": {
          "addressLine1": "Apt 406",
          "addressLine2": "market street",
          
          "state": "CA",
          "city": "Paso Padre",
          "postalCode": "98476",
          "country": "USA"
        }
      },
      "coRegistrantAddressFromRegistrant": "${#TestSuite#CoRegAddfromReg}",
      "isFutureAddress": "false",
      "futureShippingAttention": "FutureShippingAttention",
      "futureShippingAddressEffectiveMonth": "${#TestSuite#FutEffMonth}",
      "futureShippingAddressEffectiveDay": "${#TestSuite#FutEffDay}",
      "futureShippingAddressEffectiveYear": "${#TestSuite#FutEffYear}",
      "futureShippingAddress": {
        "addressLine1": "${#TestSuite#Line1Future}",
        "addressLine2": "${#TestSuite#Line2Future}",
        "addressLine3": "${#TestSuite#Line3Future}",
        "state": "${#TestSuite#FShippingState}",
        "city": "${#TestSuite#FShippingCity}",
        "postalCode": "${#TestSuite#FShippingZip}",
        "country": "USA"
      },
      "shippingAddress": {
        "addressLine1": "${#TestSuite#Line1Shipping}",
        "addressLine2": "${#TestSuite#Line2Shipping}",
        "addressLine3": "${#TestSuite#Line3Shipping}",
        "state": "${#TestSuite#ShippingState}",
        "city": "${#TestSuite#ShippingCity}",
        "postalCode": "${#TestSuite#ShippingZip}",
        "country": "USA"
      },
      "registryInfo": {
        "estimatedNoOfGuests": "25",
        "eventDay": "${#TestSuite#EventDay}",
        "eventMonth": "${#TestSuite#EventMonth}",
        "eventYear": "${#TestSuite#EventYear}",
        "eventLocationStateCode": "CA",
        "eventLocationStateName": "New york",
        "preferredStoreID": "${#TestSuite#preferredStoreId}",
        "availableOnTheInternet": "${#TestSuite#OnTheInternet}",
        "publicRegistry": "${#TestSuite#publicRegistry}",
        "goGreen": "${#TestSuite#goGreen}",
        "registryType": "${#TestSuite#registryType}",
        "subscribeWeddingEmailSalesEvents": "${#TestSuite#subscribeWeddingEmail}",
        "couplesMessage": "Blessings"
      }
    }
  }</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [registryId]"><con:configuration><path>exists( //response/registryId)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [isUserAuthenticated]"><con:configuration><path>//response[1]/isUserAuthenticated[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [batchFlagText]"><con:configuration><path>exists( //response/batchFlagText)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [registryId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response/registryId" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "registryId", node )


assert node != null
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Create Registry.XML" id="e1c4a7cf-ba07-4781-b9aa-2a06a6eb7c64">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="Create Registry.XML" postQueryString="false" mediaType="application/xml" id="d9817d33-bde8-4e58-9e47-9f515d3709ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
          </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/registry</con:endpoint>
          <con:request><![CDATA[<request>
   <registry>
      <shippingAddressSource>${#TestSuite#shippingSource}</shippingAddressSource>
      <futureShippingAddressSource>${#TestSuite#futureShippingSource}</futureShippingAddressSource>
      <coRegistrantContactInfo>
         <middleName>${#TestSuite#coregMiddlename}</middleName>
         <emailAddress>${#TestSuite#coregEmail}</emailAddress>
         <bestPhone>${#TestSuite#coregPhone}</bestPhone>
         <lastName>${#TestSuite#coregLastname}</lastName>
         <firstName>${#TestSuite#coregFirstname}</firstName>
         <currentAddress>
            <addressLine1>${#TestSuite#Line1CoReg}</addressLine1>
            <addressLine2>${#TestSuite#Line2CoReg}</addressLine2>
            <addressLine3>${#TestSuite#Line3CoReg}</addressLine3>
            <state>${#TestSuite#StateCoReg}</state>
            <city>${#TestSuite#coregCity}</city>
            <postalCode>${#TestSuite#ZipcodeCoReg}</postalCode>
            <country>USA</country>
         </currentAddress>
      </coRegistrantContactInfo>
      <registrantContactInfo>
         <middleName>${#TestSuite#regMiddlename}</middleName>
         <emailAddress>${#TestSuite#regEmail}</emailAddress>
         <bestPhone>${#TestSuite#regPhone}</bestPhone>
         <lastName>${#TestSuite#regLastname}</lastName>
         <firstName>${#TestSuite#regFirstname}</firstName>
         <currentAddress>
            <addressLine1>${#TestSuite#Line1Reg}</addressLine1>
            <addressLine2>${#TestSuite#Line2Reg}</addressLine2>
            <addressLine3>${#TestSuite#Line3Reg}</addressLine3>
            <state>${#TestSuite#regState}</state>
            <city>${#TestSuite#regCity}</city>
            <postalCode>${#TestSuite#ZipcodeReg}</postalCode>
            <country>USA</country>
         </currentAddress>
      </registrantContactInfo>
      <coRegistrantAddressFromRegistrant>${#TestSuite#CoRegAddfromReg}</coRegistrantAddressFromRegistrant>
      <isFutureAddress>${#TestSuite#isFutureAdd}</isFutureAddress>
      <futureShippingAttention>FutureShippingAttention</futureShippingAttention>
      <futureShippingAddressEffectiveMonth>${#TestSuite#FutEffMonth}</futureShippingAddressEffectiveMonth>
      <futureShippingAddressEffectiveDay>${#TestSuite#FutEffDay}</futureShippingAddressEffectiveDay>
      <futureShippingAddressEffectiveYear>${#TestSuite#FutEffYear}</futureShippingAddressEffectiveYear>
      <futureShippingAddress>
         <addressLine1>${#TestSuite#Line1Future}</addressLine1>
         <addressLine2>${#TestSuite#Line2Future}</addressLine2>
         <addressLine3>${#TestSuite#Line3Future}</addressLine3>
         <state>${#TestSuite#FShippingState}</state>
         <city>${#TestSuite#FShippingCity}</city>
         <postalCode>${#TestSuite#FShippingZip}</postalCode>
         <country>USA</country>
      </futureShippingAddress>
      <shippingAddress>
         <addressLine1>${#TestSuite#Line1Shipping}</addressLine1>
         <addressLine2>${#TestSuite#Line2Shipping}</addressLine2>
         <addressLine3>${#TestSuite#Line3Shipping}</addressLine3>
         <state>${#TestSuite#ShippingState}</state>
         <city>${#TestSuite#ShippingCity}</city>
         <postalCode>${#TestSuite#ShippingZip}</postalCode>
         <country>USA</country>
      </shippingAddress>
      <registryInfo>
         <estimatedNoOfGuests>${#TestSuite#NoOfGuests}</estimatedNoOfGuests>
         <eventDay>${#TestSuite#EventDay}</eventDay>
         <eventMonth>${#TestSuite#EventMonth}</eventMonth>
         <eventYear>${#TestSuite#EventYear}</eventYear>
         <eventLocationStateCode>NY</eventLocationStateCode>
         <eventLocationStateName>New york</eventLocationStateName>
         <preferredStoreID>${#TestSuite#preferredStoreId}</preferredStoreID>
         <availableOnTheInternet>${#TestSuite#OnTheInternet}</availableOnTheInternet>
         <publicRegistry>${#TestSuite#publicRegistry}</publicRegistry>
         <goGreen>${#TestSuite#goGreen}</goGreen>
         <registryType>${#TestSuite#registryType}</registryType>
         <subscribeWeddingEmailSalesEvents>${#TestSuite#subscribeWeddingEmail}</subscribeWeddingEmailSalesEvents>
         <couplesMessage>${#TestSuite#couplesMessage}</couplesMessage>
      </registryInfo>
   </registry>
</request>]]></con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f026a73c-8f2e-4c4a-b28c-1973f7eac1a3">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [success]" id="54117710-16f7-478e-be09-a81c87ea2562">
            <con:configuration>
              <path>//response[1]/success[1]/text()</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          
          <con:assertion type="XPath Match" name="Check for existance of [isUserAuthenticated]" id="c5d665ad-a7bf-46e4-9006-9df079510353">
            <con:configuration>
              <path>exists( //response/isUserAuthenticated)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [batchFlagText]" id="475bb97d-2807-46e8-8310-830ac3798517">
            <con:configuration>
              <path>exists( //response/batchFlagText)</path>
              <content>false</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Set [registryId]" id="37fd26bb-f51d-4d38-a2d6-2a0c6db4d609">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/registryId[1]" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "registryId", node.toString())

assert node != null
</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="BVR" id="7f3b1263-a5a7-47ea-9a29-8ec42d9478be">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="BVR" postQueryString="false" mediaType="application/xml" id="49a98480-da73-4da3-acbf-8e79160cf614" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/registry?type=BVR&amp;show=basic,bride,groom,Shipping,items,totals,minitems</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="366e97bc-1da8-4e95-ae1c-04f31b38afe5">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [coRegistrantContactInfo]" id="89a70c57-12d6-4ba3-929f-b17ae2fb465e">
            <con:configuration>
              <path>exists( //response/coRegistrantContactInfo)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [currentAddress]" id="b2f1065e-032c-41f5-b7cd-adcc45ca7f5c">
            <con:configuration>
              <path>exists( //response/coRegistrantContactInfo/currentAddress)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [coRegistrantAddressFromRegistrant]" id="cb18e195-e6b8-44ff-b007-dec1c6d28779">
            <con:configuration>
              <path>exists( //response/coRegistrantAddressFromRegistrant)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [registryInfo]" id="e713bd3e-db12-405d-8aa7-435a5a46904c">
            <con:configuration>
              <path>exists( //response/registryInfo)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [registrantContactInfo]" id="3966a419-12b2-4da4-8327-ee5c3959c0f3">
            <con:configuration>
              <path>exists( //response/registrantContactInfo)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [contactAddress]" id="fc12a3c6-a90c-4a0c-896f-ebc50e8bf16e">
            <con:configuration>
              <path>exists( //response/registrantContactInfo/contactAddress)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [totalQty]" id="b618776f-1dab-4f23-81c3-35644e7abcec">
            <con:configuration>
              <path>exists( //response/totalQty)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [emailAddress]" id="e82c86d5-ca19-4376-bd4b-c51ca3be155f">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/emailAddress[1]/text()</path>
              <content>${#TestSuite#coregEmail}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [bestPhone]" id="dad6e731-2808-4969-b68b-a5736ec7555a">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/bestPhone[1]/text()</path>
              <content>${#TestSuite#coregPhone}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          
          
          <con:assertion type="XPath Match" name="CoReg's [addressLine1]" id="6b001054-6366-424d-ba18-acebaba8fb6c">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/addressLine1[1]/text()</path>
              <content>${#TestSuite#Line1CoReg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [addressLine2]" id="97b3428c-412f-4680-b295-3269b7b8f2d3">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/addressLine2[1]/text()</path>
              <content>${#TestSuite#Line2CoReg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [addressLine3]" id="909031b2-552e-49f7-9648-44d08e3f3fff">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/addressLine3[1]/text()</path>
              <content>${#TestSuite#Line3CoReg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [state]" id="496ec41f-5688-4a6a-b6c5-17c8120b4053">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/state[1]/text()</path>
              <content>${#TestSuite#StateCoReg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [city]" id="15de9a97-45f2-4f1d-87ea-efe21b7fcf1f">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/city[1]/text()</path>
              <content>${#TestSuite#coregCity}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [postalCode]" id="2e241e3b-793b-4545-96ac-1db0ffde81f9">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/postalCode[1]/text()</path>
              <content>${#TestSuite#ZipcodeCoReg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [country]" id="5f811a58-dcc6-4c08-ad97-49e57f0bc12a">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/country[1]/text()</path>
              <content>USA</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [middleName]" id="c1b368f1-b881-4c07-8b7c-c8278028018d">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/middleName[1]/text()</path>
              <content>${#TestSuite#coregMiddlename}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [emailAddress]" id="1443a037-1b25-437b-90bf-04d1da316625">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/emailAddress[1]/text()</path>
              <content>${#TestSuite#regEmail}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [bestPhone]" id="f82d797a-0628-4d6b-9c5e-fedaffb7bc1f">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/bestPhone[1]/text()</path>
              <content>${#TestSuite#regPhone}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          
          
          <con:assertion type="XPath Match" name="Reg's [addressLine1]" id="2f28d338-2ba5-4f94-ae08-db2dd42dc9f4">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/addressLine1[1]/text()</path>
              <content>${#TestSuite#Line1Reg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [addressLine2]" id="b29d8460-a7a2-4cb4-8be2-fc9a98258ae5">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/addressLine2[1]/text()</path>
              <content>${#TestSuite#Line2Reg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [addressLine3]" id="8850583c-5059-4539-8617-2fd373486f15">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/addressLine3[1]/text()</path>
              <content>${#TestSuite#Line3Reg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [state]" id="cb6bd8d1-b6e0-4b07-9c11-c3fd02ee081c">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/state[1]/text()</path>
              <content>${#TestSuite#regState}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [city]" id="1cf17cf8-a40d-4a99-b3aa-cf9d86f5c5ac">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/city[1]/text()</path>
              <content>${#TestSuite#regCity}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [postalCode]" id="3e7e4004-d65f-4e48-bad6-d6531349cc80">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/postalCode[1]/text()</path>
              <content>${#TestSuite#ZipcodeReg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [country]" id="1f19ba57-7039-4a77-bee4-3c769dccbfaa">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/country[1]/text()</path>
              <content>USA</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [middleName]" id="b44e5cb7-beec-401b-bfe3-c35a1b69cf71">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/middleName[1]/text()</path>
              <content>${#TestSuite#regMiddlename}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Existance of totals [totalQty]" id="17ae3fd1-dd11-48a3-b3c0-5c8eb5de2486">
            <con:configuration>
              <path>exists( //response/totalQty)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Existance of totals [purchasedQty]" id="de8cbbe9-e17c-47a8-8bd2-a9fc40dca2c3">
            <con:configuration>
              <path>exists( //response/purchasedQty)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Existance of totals [stillOpenTotal]" id="f4e8300f-e4b6-4b5e-9e5f-88612bc68abb">
            <con:configuration>
              <path>exists( //response/stillOpenTotal)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [registryType]" id="6180bf91-da7a-4079-ae07-6508709f6560">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/registryType[1]/text()</path>
              <content>${#TestSuite#registryType}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [eventDay]" disabled="true" id="50669555-7edf-4a40-a1bb-ca20ebbf3d69">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/eventDay[1]/text()</path>
              <content>${#TestSuite#EventDay}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [eventMonth]" id="9c25573a-f1f5-4a59-9382-2a42107a4c9e">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/eventMonth[1]/text()</path>
              <content>${#TestSuite#EventMonth}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [eventYear]" id="fd39770e-ba04-4b61-9e23-2fcf58926c0a">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/eventYear[1]/text()</path>
              <content>${#TestSuite#EventYear}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [estimatedNoOfGuests]" id="bab58a60-a91f-47aa-a53b-8ff4bf8b8041">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/estimatedNoOfGuests[1]/text()</path>
              <content>${#TestSuite#NoOfGuests}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [preferredStoreID]" id="c3545e81-dcff-4161-b021-d7e9eb08e101">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/preferredStoreID[1]/text()</path>
              <content>${#TestSuite#preferredStoreId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [registryId]" id="3a47c16a-a9b8-4d63-be53-d62b98bf83b2">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/registryId[1]/text()</path>
              <content>${#TestSuite#registryId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [publicRegistry]" id="eb0b0029-236f-49a1-9214-ca3afe2a2ac5">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/publicRegistry[1]/text()</path>
              <content>${#TestSuite#publicRegistry}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [eventLocationStateName]" disabled="true" id="3d30d948-eeec-4839-94ac-2fbbdcdf79b0">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/eventLocationStateName[1]/text()</path>
              <content>New York</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [availableOnTheInternet]" id="3ba504ac-12b6-4e70-baf4-8aa8d78defd2">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/availableOnTheInternet[1]/text()</path>
              <content>${#TestSuite#OnTheInternet}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [subscribeWeddingEmailSalesEvents]" id="00d2360e-2444-49e7-ae35-4a69995ce582">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/subscribeWeddingEmailSalesEvents[1]/text()</path>
              <content>${#TestSuite#subscribeWeddingEmail}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [couplesMessage]" id="c6fa6ebd-d1a8-419a-90ea-4b72e875a14c">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/couplesMessage[1]/text()</path>
              <content>${#TestSuite#couplesMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [goGreen]" id="5b73de80-188c-4cf4-a699-8cfdb8aa8280">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/goGreen[1]/text()</path>
              <content>${#TestSuite#goGreen}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Set [registryBarcode]" id="e82277ab-bd3c-4596-b09e-8320000016c4">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def registryBarcode = holder.getNodeValue( "//response/registryInfo/registryBarcode" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "registryBarcode", registryBarcode )

assert registryBarcode != null
</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [shippingAddressSource]" id="db01102d-0a25-42a5-982c-3932ed8e5da6">
            <con:configuration>
              <path>//response[1]/shippingAddressSource[1]/text()</path>
              <content>${#TestSuite#shippingSource}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [futureShippingAddressSource]" disabled="true" id="b182140c-4077-40e6-8936-513ff1fdda7c">
            <con:configuration>
              <path>//response[1]/futureShippingAddressSource[1]/text()</path>
              <content>${#TestSuite#futureShippingSource}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert [shipping &amp; Future Shipping Address]" disabled="true" id="50c4e6e9-1ebd-4ca9-8fcc-cde6557bcc8a">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder

def shippingSource = context.expand('${#TestSuite#shippingSource}');
def futureShippingSource = context.expand('${#TestSuite#futureShippingSource}');

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def shippingaddressLine1 = holder.getNodeValue( "//response/shippingAddress/addressLine1" )
def shippingaddressLine2 = holder.getNodeValue( "//response/shippingAddress/addressLine2" )
def shippingaddressLine3 = holder.getNodeValue( "//response/shippingAddress/addressLine3" )
def shippingState = holder.getNodeValue( "//response/shippingAddress/state" )
def shippingCity = holder.getNodeValue( "//response/shippingAddress/city" )
def shippingPin = holder.getNodeValue( "//response/shippingAddress/postalCode" )
def shippingCountry = holder.getNodeValue( "//response/shippingAddress/country" )

def fshippingaddressLine1 = holder.getNodeValue( "//response/futureShippingAddress/addressLine1" )
def fshippingaddressLine2 = holder.getNodeValue( "//response/futureShippingAddress/addressLine2" )
def fshippingaddressLine3 = holder.getNodeValue( "//response/futureShippingAddress/addressLine3" )
def fshippingState = holder.getNodeValue( "//response/futureShippingAddress/state" )
def fshippingCity = holder.getNodeValue( "//response/futureShippingAddress/city" )
def fshippingPin = holder.getNodeValue( "//response/futureShippingAddress/postalCode" )
def fshippingCountry = holder.getNodeValue( "//response/futureShippingAddress/country" )

def regaddressLine1 = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/addressLine1" )
def regaddressLine2 = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/addressLine2" )
def regaddressLine3 = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/addressLine3" )
def regstate = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/state" )
def regcity = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/city" )
def regpin = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/postalCode" )
def regcountry = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/country" )

//def coregaddressLine1 = holder.getNodeValue( "//response/coRegistrantContactInfo/contactAddress/addressLine1" )
def coregaddressLine1 = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/addressLine1" )
def coregaddressLine2 = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/addressLine2" )
def coregaddressLine3 = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/addressLine3" )
def coregstate = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/state" )
def coregcity = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/city" )
def coregpin = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/postalCode" )
def coregcountry = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/country" )

//Shipping Address
if(shippingSource=='REGISTRANT'){
assert shippingaddressLine1.equals(regaddressLine1)
assert shippingaddressLine2.equals(regaddressLine2)
assert shippingaddressLine3.equals(regaddressLine3)
assert shippingState.equals(regstate)
assert shippingCity.equals(regcity)
assert shippingPin.equals(regpin)
assert shippingCountry.equals(regcountry)
}
else if(shippingSource=='COREGISTRANT'){
assert shippingaddressLine1.equals(coregaddressLine1)
assert shippingaddressLine2.equals(coregaddressLine2)
assert shippingaddressLine3.equals(coregaddressLine3)
assert shippingState.equals(coregstate)
assert shippingCity.equals(coregcity)
assert shippingPin.equals(coregpin)
assert shippingCountry.equals(coregcountry)
}

// Future Shipping Address
if(futureShippingSource=='REGISTRANT'){
assert fshippingaddressLine1.equals(regaddressLine1)
assert fshippingaddressLine2.equals(regaddressLine2)
assert fshippingaddressLine3.equals(regaddressLine3)
assert fshippingState.equals(regstate)
assert fshippingCity.equals(regcity)
assert fshippingPin.equals(regpin)
assert fshippingCountry.equals(regcountry)
}
else if(futureShippingSource=='COREGISTRANT'){
assert fshippingaddressLine1.equals(coregaddressLine1)
assert fshippingaddressLine2.equals(coregaddressLine2)
assert fshippingaddressLine3.equals(coregaddressLine3)
assert fshippingState.equals(coregstate)
assert fshippingCity.equals(coregcity)
assert fshippingPin.equals(coregpin)
assert fshippingCountry.equals(coregcountry)
}
//else if(shippingSource=='OTHER'){
//
//}

//assert shippingAddress != null
</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assert-Names" id="328840b0-ec3a-475b-88c7-7ce8b0ba48d0"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def colastName = holder.getNodeValue( "//response/coRegistrantContactInfo/lastName" )
def cofirstName = holder.getNodeValue( "//response/coRegistrantContactInfo/firstName")
def reglastName = holder.getNodeValue( "//response/registrantContactInfo/lastName")
def regfirstName = holder.getNodeValue( "//response/registrantContactInfo/firstName")

assert colastName.equalsIgnoreCase(context.expand('${#TestSuite#coreglastname}'))
assert cofirstName.equalsIgnoreCase(context.expand('${#TestSuite#coregFirstname}'))
assert reglastName.equalsIgnoreCase(context.expand('${#TestSuite#regLastname}'))
assert regfirstName.equalsIgnoreCase(context.expand('${#TestSuite#regFirstname}'))</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="api BVR" id="93599fcc-c00e-454c-ae48-447ba1cf3882">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="api BVR" postQueryString="false" mediaType="application/xml" id="49a98480-da73-4da3-acbf-8e79160cf614" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/registry?type=BVR&amp;show=basic,bride,groom,Shipping,items,totals,minitems</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="366e97bc-1da8-4e95-ae1c-04f31b38afe5">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [coRegistrantContactInfo]" id="89a70c57-12d6-4ba3-929f-b17ae2fb465e">
            <con:configuration>
              <path>exists( //response/coRegistrantContactInfo)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [currentAddress]" id="b2f1065e-032c-41f5-b7cd-adcc45ca7f5c">
            <con:configuration>
              <path>exists( //response/coRegistrantContactInfo/currentAddress)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [coRegistrantAddressFromRegistrant]" id="cb18e195-e6b8-44ff-b007-dec1c6d28779">
            <con:configuration>
              <path>exists( //response/coRegistrantAddressFromRegistrant)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [registryInfo]" id="e713bd3e-db12-405d-8aa7-435a5a46904c">
            <con:configuration>
              <path>exists( //response/registryInfo)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [registrantContactInfo]" id="3966a419-12b2-4da4-8327-ee5c3959c0f3">
            <con:configuration>
              <path>exists( //response/registrantContactInfo)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [contactAddress]" id="fc12a3c6-a90c-4a0c-896f-ebc50e8bf16e">
            <con:configuration>
              <path>exists( //response/registrantContactInfo/contactAddress)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [totalQty]" id="b618776f-1dab-4f23-81c3-35644e7abcec">
            <con:configuration>
              <path>exists( //response/totalQty)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [emailAddress]" id="e82c86d5-ca19-4376-bd4b-c51ca3be155f">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/emailAddress[1]/text()</path>
              <content>${#TestSuite#coregEmail}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [bestPhone]" id="dad6e731-2808-4969-b68b-a5736ec7555a">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/bestPhone[1]/text()</path>
              <content>${#TestSuite#coregPhone}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          
          
          <con:assertion type="XPath Match" name="CoReg's [addressLine1]" id="6b001054-6366-424d-ba18-acebaba8fb6c">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/addressLine1[1]/text()</path>
              <content>${#TestSuite#Line1CoReg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [addressLine2]" id="97b3428c-412f-4680-b295-3269b7b8f2d3">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/addressLine2[1]/text()</path>
              <content>${#TestSuite#Line2CoReg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [addressLine3]" id="909031b2-552e-49f7-9648-44d08e3f3fff">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/addressLine3[1]/text()</path>
              <content>${#TestSuite#Line3CoReg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [state]" id="496ec41f-5688-4a6a-b6c5-17c8120b4053">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/state[1]/text()</path>
              <content>${#TestSuite#StateCoReg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [city]" id="15de9a97-45f2-4f1d-87ea-efe21b7fcf1f">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/city[1]/text()</path>
              <content>${#TestSuite#coregCity}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [postalCode]" id="2e241e3b-793b-4545-96ac-1db0ffde81f9">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/postalCode[1]/text()</path>
              <content>${#TestSuite#ZipcodeCoReg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [country]" id="5f811a58-dcc6-4c08-ad97-49e57f0bc12a">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/currentAddress[1]/country[1]/text()</path>
              <content>USA</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="CoReg's [middleName]" id="c1b368f1-b881-4c07-8b7c-c8278028018d">
            <con:configuration>
              <path>//response[1]/coRegistrantContactInfo[1]/middleName[1]/text()</path>
              <content>${#TestSuite#coregMiddlename}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [emailAddress]" id="1443a037-1b25-437b-90bf-04d1da316625">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/emailAddress[1]/text()</path>
              <content>${#TestSuite#regEmail}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [bestPhone]" id="f82d797a-0628-4d6b-9c5e-fedaffb7bc1f">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/bestPhone[1]/text()</path>
              <content>${#TestSuite#regPhone}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          
          
          <con:assertion type="XPath Match" name="Reg's [addressLine1]" id="2f28d338-2ba5-4f94-ae08-db2dd42dc9f4">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/addressLine1[1]/text()</path>
              <content>${#TestSuite#Line1Reg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [addressLine2]" id="b29d8460-a7a2-4cb4-8be2-fc9a98258ae5">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/addressLine2[1]/text()</path>
              <content>${#TestSuite#Line2Reg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [addressLine3]" id="8850583c-5059-4539-8617-2fd373486f15">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/addressLine3[1]/text()</path>
              <content>${#TestSuite#Line3Reg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [state]" id="cb6bd8d1-b6e0-4b07-9c11-c3fd02ee081c">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/state[1]/text()</path>
              <content>${#TestSuite#regState}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [city]" id="1cf17cf8-a40d-4a99-b3aa-cf9d86f5c5ac">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/city[1]/text()</path>
              <content>${#TestSuite#regCity}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [postalCode]" id="3e7e4004-d65f-4e48-bad6-d6531349cc80">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/postalCode[1]/text()</path>
              <content>${#TestSuite#ZipcodeReg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [country]" id="1f19ba57-7039-4a77-bee4-3c769dccbfaa">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/contactAddress[1]/country[1]/text()</path>
              <content>USA</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Reg's [middleName]" id="b44e5cb7-beec-401b-bfe3-c35a1b69cf71">
            <con:configuration>
              <path>//response[1]/registrantContactInfo[1]/middleName[1]/text()</path>
              <content>${#TestSuite#regMiddlename}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Existance of totals [totalQty]" id="17ae3fd1-dd11-48a3-b3c0-5c8eb5de2486">
            <con:configuration>
              <path>exists( //response/totalQty)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Existance of totals [purchasedQty]" id="de8cbbe9-e17c-47a8-8bd2-a9fc40dca2c3">
            <con:configuration>
              <path>exists( //response/purchasedQty)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Existance of totals [stillOpenTotal]" id="f4e8300f-e4b6-4b5e-9e5f-88612bc68abb">
            <con:configuration>
              <path>exists( //response/stillOpenTotal)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [registryType]" id="6180bf91-da7a-4079-ae07-6508709f6560">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/registryType[1]/text()</path>
              <content>${#TestSuite#registryType}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [eventDay]" disabled="true" id="50669555-7edf-4a40-a1bb-ca20ebbf3d69">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/eventDay[1]/text()</path>
              <content>${#TestSuite#EventDay}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [eventMonth]" id="9c25573a-f1f5-4a59-9382-2a42107a4c9e">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/eventMonth[1]/text()</path>
              <content>${#TestSuite#EventMonth}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [eventYear]" id="fd39770e-ba04-4b61-9e23-2fcf58926c0a">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/eventYear[1]/text()</path>
              <content>${#TestSuite#EventYear}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [estimatedNoOfGuests]" id="bab58a60-a91f-47aa-a53b-8ff4bf8b8041">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/estimatedNoOfGuests[1]/text()</path>
              <content>${#TestSuite#NoOfGuests}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [preferredStoreID]" id="c3545e81-dcff-4161-b021-d7e9eb08e101">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/preferredStoreID[1]/text()</path>
              <content>${#TestSuite#preferredStoreId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [registryId]" id="3a47c16a-a9b8-4d63-be53-d62b98bf83b2">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/registryId[1]/text()</path>
              <content>${#TestSuite#registryId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [publicRegistry]" id="eb0b0029-236f-49a1-9214-ca3afe2a2ac5">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/publicRegistry[1]/text()</path>
              <content>${#TestSuite#publicRegistry}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [eventLocationStateName]" disabled="true" id="3d30d948-eeec-4839-94ac-2fbbdcdf79b0">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/eventLocationStateName[1]/text()</path>
              <content>New York</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [availableOnTheInternet]" id="3ba504ac-12b6-4e70-baf4-8aa8d78defd2">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/availableOnTheInternet[1]/text()</path>
              <content>${#TestSuite#OnTheInternet}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [subscribeWeddingEmailSalesEvents]" id="00d2360e-2444-49e7-ae35-4a69995ce582">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/subscribeWeddingEmailSalesEvents[1]/text()</path>
              <content>${#TestSuite#subscribeWeddingEmail}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [couplesMessage]" id="c6fa6ebd-d1a8-419a-90ea-4b72e875a14c">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/couplesMessage[1]/text()</path>
              <content>${#TestSuite#couplesMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Registry's [goGreen]" id="5b73de80-188c-4cf4-a699-8cfdb8aa8280">
            <con:configuration>
              <path>//response[1]/registryInfo[1]/goGreen[1]/text()</path>
              <content>${#TestSuite#goGreen}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Set [registryBarcode]" id="e82277ab-bd3c-4596-b09e-8320000016c4">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def registryBarcode = holder.getNodeValue( "//response/registryInfo/registryBarcode" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "registryBarcode", registryBarcode )

assert registryBarcode != null
</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [shippingAddressSource]" id="db01102d-0a25-42a5-982c-3932ed8e5da6">
            <con:configuration>
              <path>//response[1]/shippingAddressSource[1]/text()</path>
              <content>${#TestSuite#shippingSource}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [futureShippingAddressSource]" disabled="true" id="b182140c-4077-40e6-8936-513ff1fdda7c">
            <con:configuration>
              <path>//response[1]/futureShippingAddressSource[1]/text()</path>
              <content>${#TestSuite#futureShippingSource}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert [shipping &amp; Future Shipping Address]" disabled="true" id="50c4e6e9-1ebd-4ca9-8fcc-cde6557bcc8a">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder

def shippingSource = context.expand('${#TestSuite#shippingSource}');
def futureShippingSource = context.expand('${#TestSuite#futureShippingSource}');

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def shippingaddressLine1 = holder.getNodeValue( "//response/shippingAddress/addressLine1" )
def shippingaddressLine2 = holder.getNodeValue( "//response/shippingAddress/addressLine2" )
def shippingaddressLine3 = holder.getNodeValue( "//response/shippingAddress/addressLine3" )
def shippingState = holder.getNodeValue( "//response/shippingAddress/state" )
def shippingCity = holder.getNodeValue( "//response/shippingAddress/city" )
def shippingPin = holder.getNodeValue( "//response/shippingAddress/postalCode" )
def shippingCountry = holder.getNodeValue( "//response/shippingAddress/country" )

def fshippingaddressLine1 = holder.getNodeValue( "//response/futureShippingAddress/addressLine1" )
def fshippingaddressLine2 = holder.getNodeValue( "//response/futureShippingAddress/addressLine2" )
def fshippingaddressLine3 = holder.getNodeValue( "//response/futureShippingAddress/addressLine3" )
def fshippingState = holder.getNodeValue( "//response/futureShippingAddress/state" )
def fshippingCity = holder.getNodeValue( "//response/futureShippingAddress/city" )
def fshippingPin = holder.getNodeValue( "//response/futureShippingAddress/postalCode" )
def fshippingCountry = holder.getNodeValue( "//response/futureShippingAddress/country" )

def regaddressLine1 = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/addressLine1" )
def regaddressLine2 = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/addressLine2" )
def regaddressLine3 = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/addressLine3" )
def regstate = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/state" )
def regcity = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/city" )
def regpin = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/postalCode" )
def regcountry = holder.getNodeValue( "//response/registrantContactInfo/contactAddress/country" )

//def coregaddressLine1 = holder.getNodeValue( "//response/coRegistrantContactInfo/contactAddress/addressLine1" )
def coregaddressLine1 = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/addressLine1" )
def coregaddressLine2 = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/addressLine2" )
def coregaddressLine3 = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/addressLine3" )
def coregstate = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/state" )
def coregcity = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/city" )
def coregpin = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/postalCode" )
def coregcountry = holder.getNodeValue( "//response/coRegistrantContactInfo/currentAddress/country" )

//Shipping Address
if(shippingSource=='REGISTRANT'){
assert shippingaddressLine1.equals(regaddressLine1)
assert shippingaddressLine2.equals(regaddressLine2)
assert shippingaddressLine3.equals(regaddressLine3)
assert shippingState.equals(regstate)
assert shippingCity.equals(regcity)
assert shippingPin.equals(regpin)
assert shippingCountry.equals(regcountry)
}
else if(shippingSource=='COREGISTRANT'){
assert shippingaddressLine1.equals(coregaddressLine1)
assert shippingaddressLine2.equals(coregaddressLine2)
assert shippingaddressLine3.equals(coregaddressLine3)
assert shippingState.equals(coregstate)
assert shippingCity.equals(coregcity)
assert shippingPin.equals(coregpin)
assert shippingCountry.equals(coregcountry)
}

// Future Shipping Address
if(futureShippingSource=='REGISTRANT'){
assert fshippingaddressLine1.equals(regaddressLine1)
assert fshippingaddressLine2.equals(regaddressLine2)
assert fshippingaddressLine3.equals(regaddressLine3)
assert fshippingState.equals(regstate)
assert fshippingCity.equals(regcity)
assert fshippingPin.equals(regpin)
assert fshippingCountry.equals(regcountry)
}
else if(futureShippingSource=='COREGISTRANT'){
assert fshippingaddressLine1.equals(coregaddressLine1)
assert fshippingaddressLine2.equals(coregaddressLine2)
assert fshippingaddressLine3.equals(coregaddressLine3)
assert fshippingState.equals(coregstate)
assert fshippingCity.equals(coregcity)
assert fshippingPin.equals(coregpin)
assert fshippingCountry.equals(coregcountry)
}
//else if(shippingSource=='OTHER'){
//
//}

//assert shippingAddress != null
</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assert-Names" id="328840b0-ec3a-475b-88c7-7ce8b0ba48d0"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def colastName = holder.getNodeValue( "//response/coRegistrantContactInfo/lastName" )
def cofirstName = holder.getNodeValue( "//response/coRegistrantContactInfo/firstName")
def reglastName = holder.getNodeValue( "//response/registrantContactInfo/lastName")
def regfirstName = holder.getNodeValue( "//response/registrantContactInfo/firstName")

assert colastName.equalsIgnoreCase(context.expand('${#TestSuite#coreglastname}'))
assert cofirstName.equalsIgnoreCase(context.expand('${#TestSuite#coregFirstname}'))
assert reglastName.equalsIgnoreCase(context.expand('${#TestSuite#regLastname}'))
assert regfirstName.equalsIgnoreCase(context.expand('${#TestSuite#regFirstname}'))</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v2/oauth2/token/userDetails with Registry" id="8cf67a34-747a-4aa4-b446-171be3cfc157">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="v2/oauth2/token/userDetails with Registry" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="8365a970-dc61-4b50-9fdc-ce9529b8b384" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/userDetails</con:endpoint>
          <con:request>grant_type=password&amp;username=${#TestSuite#emailId}&amp;password=${#Project#password}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4a264877-2520-44da-a7f2-d9ea73b106ed">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [token_type]"><con:configuration><path>//response[1]/token_type[1]/text()</path><content>bearer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expires_in]"><con:configuration><path>//response[1]/expires_in[1]/text()</path><content>3600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set access_token&amp;refresh_token" id="1f40e6fe-fc09-4b21-aeea-1a6343bb8a02">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def access_token=holder.getNodeValue("//response/access_token");
def refresh_token=holder.getNodeValue("//response/refresh_token");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "refresh_token", refresh_token.toString() )

assert access_token != null
assert refresh_token != null</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [userId]" id="5ba4ba49-627e-4c08-b3f4-3e2c6025677e"><con:configuration><path>//response/userDetails/userId/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [guid]" id="d4559cb8-0920-4f99-8091-818135cf89c3"><con:configuration><path>//response/userDetails/guid/text()</path><content>${#TestSuite#guid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/userDetails[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/userDetails[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [registryId]"><con:configuration><path>//response[1]/userDetails[1]/registryId[1]/text()</path><content>${#TestSuite#registryId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]" id="a2e6e10e-4deb-4673-86b9-435209863193"><con:configuration><path>//response/userDetails/bazaarVoiceId/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/userDetails[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v2/user/resetpassword-Invalid hintAnswer-400" id="002dc4a0-448d-4046-bfdd-0c47f62c9647">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="v2/user/resetpassword-Invalid hintAnswer-400" postQueryString="false" mediaType="application/json" id="7afb72ef-b8cd-4a5d-9950-bba8e110ace7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 1,
    "hintAnswer": "Invalid",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate}",
    "verifyPassword": "${#Project#passwordupdate}",
    "mobileAppId":"QAtesting"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ad1640d8-3dfd-45c1-ba1d-bcd6c37a67d6">
            <con:configuration><codes>400</codes></con:configuration>
          </con:assertion>
          
          
          
          <con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Invalid data</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>We're sorry, the answer to hint answer you entered is not valid. Please try again.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v2/user/resetpassword password mismatch-400" id="10fc762d-01ef-479f-9ee5-e62e0c6f7e02">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="v2/user/resetpassword password mismatch-400" postQueryString="false" mediaType="application/json" id="5055c4a1-b2bf-4edd-b3d2-3a2c3c47150e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 1,
    "hintAnswer": "answer",
    "userName": "${RandomEmailGenerator#emailAddress}",
    "password": "newpassword",
    "verifyPassword": "newpasswo1rd"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fea5211c-50b5-4841-b067-397abbbacb31">
            <con:configuration>
              <codes>400</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>103</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Incorrect arguments types or combination</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v2/user/resetpassword-200" id="5a239f31-3f91-4672-a131-5ced175cc281">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="v2/user/resetpassword-200" postQueryString="false" mediaType="application/json" id="7afb72ef-b8cd-4a5d-9950-bba8e110ace7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 1,
    "hintAnswer": "${#Project#hintAnswer}",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate}",
    "verifyPassword": "${#Project#passwordupdate}",
    "mobileAppId":"QAtesting"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ad1640d8-3dfd-45c1-ba1d-bcd6c37a67d6">
            <con:configuration><codes>200</codes></con:configuration>
          </con:assertion>
          
          
          
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userDetails]"><con:configuration><path>exists( //response/userDetails)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/userDetails[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [guid]"><con:configuration><path>//response[1]/userDetails[1]/guid[1]/text()</path><content>${#TestSuite#guid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [firstName]"><con:configuration><path>exists( //response/userDetails/firstName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [lastName]"><con:configuration><path>exists( //response/userDetails/lastName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match-registryId" id="342fb240-e5a6-4b3f-8f3d-271a2a6ad675">
            <con:configuration><path>//response/userDetails/registryId/text()</path><content>${#TestSuite#registryId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
          </con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/userDetails[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [token_type]"><con:configuration><path>//response[1]/token_type[1]/text()</path><content>bearer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expires_in]"><con:configuration><path>//response[1]/expires_in[1]/text()</path><content>3600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/userDetails[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/userDetails[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/userDetails[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="SdpToken after password reset" id="0e5c94c2-733b-49d9-a665-f180c7b83997">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="SdpToken after password reset" postQueryString="false" mediaType="application/xml" id="449e3662-8c3c-4e8a-93d2-7d694cfbd1ea" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v1/user/sdptoken</con:endpoint>
          <con:request><![CDATA[<request>
   <email>${#TestSuite#emailId}</email>
   <password>${#Project#passwordupdate}</password>
</request>]]></con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6957a925-fd85-471c-9ed0-64c2ff24231b">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          
          
          <con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//sdpinfo[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [New token]" id="c66a7771-255c-4556-9db4-f2257b9a608a">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def token = holder.getNodeValue( "//sdpinfo/token" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "genctxToken", token )


assert token != null
</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="user GET after password reset" id="8e6ee5fb-f187-48f6-ba1e-5859bbad6dfc">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="user GET after password reset" postQueryString="false" mediaType="application/xml" id="2327b834-ff73-4c87-b4d0-31888f7352cc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user?show=summary,shipping,store,billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="a2588009-4ce9-4093-b9ae-b5bae0bb2fb7">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response/profile/userName/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/profile[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [address]"><con:configuration><path>exists( //response/profile/address)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [shippingContact]"><con:configuration><path>exists( //response/shippingContactMapper/shippingContact)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionMapper]"><con:configuration><path>exists( //response/subscriptionMapper)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [registryId]"><con:configuration><path>//response[1]/registryMapper[1]/registryInfo[1]/registryId[1]/text()</path><content>${#TestSuite#registryId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/profile[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/profile[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/profile[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [addressLine1(reg)]"><con:configuration><path>//response[1]/profile[1]/address[1]/addressLine1[1]/text()</path><content>${#TestSuite#Line1Reg}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [addressLine2]"><con:configuration><path>//response[1]/profile[1]/address[1]/addressLine2[1]/text()</path><content>${#TestSuite#Line2Reg}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [city(reg)]"><con:configuration><path>//response[1]/profile[1]/address[1]/city[1]/text()</path><content>${#TestSuite#regCity}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [stateCode(reg)]"><con:configuration><path>//response[1]/profile[1]/address[1]/stateCode[1]/text()</path><content>${#TestSuite#regState}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [postalCode(reg)]"><con:configuration><path>//response[1]/profile[1]/address[1]/postalCode[1]/text()</path><content>${#TestSuite#ZipcodeReg}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [phoneNumber]"><con:configuration><path>//response[1]/profile[1]/address[1]/phoneNumber[1]/text()</path><content>${#Project#userbestphone}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [gender]"><con:configuration><path>//response[1]/profile[1]/gender[1]/text()</path><content>${#Project#usergender}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/profile[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [email]"><con:configuration><path>//response[1]/shippingContactMapper[1]/shippingContact[1]/email[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="NEW v2/oauth2/token/resetpassword-Invalid hintAnswer" id="46d622e6-6d47-4689-b8fd-4a3e4882bd6e">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="NEW v2/oauth2/token/resetpassword-Invalid hintAnswer" postQueryString="false" mediaType="application/json" id="a324d225-29d4-4dbc-9904-a297073baf17" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 1,
    "hintAnswer": "Invalid",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate2}",
    "verifyPassword": "${#Project#passwordupdate2}",
    "mobileAppId":"QAtesting"
}</con:request>
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Invalid data</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>We're sorry, the answer to hint answer you entered is not valid. Please try again.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="NEW v2/oauth2/token/resetpassword-Invalid hintId" id="6c8396dd-0ca9-41d4-ac04-dbe734b9519a">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="NEW v2/oauth2/token/resetpassword-Invalid hintId" postQueryString="false" mediaType="application/json" id="a324d225-29d4-4dbc-9904-a297073baf17" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 9,
    "hintAnswer": "${#Project#hintAnswer}",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate2}",
    "verifyPassword": "${#Project#passwordupdate2}",
    "mobileAppId":"QAtesting"
}</con:request>
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Invalid data</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>We're sorry, the hintId is not valid. Please try again.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="NEW v2/oauth2/token/resetpassword-Invalid hintId/hintAnswer" id="d3709c35-3816-4317-b38f-179eaedf8dde">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="NEW v2/oauth2/token/resetpassword-Invalid hintId/hintAnswer" postQueryString="false" mediaType="application/json" id="a324d225-29d4-4dbc-9904-a297073baf17" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 9,
    "hintAnswer": "Invalid",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate2}",
    "verifyPassword": "${#Project#passwordupdate2}",
    "mobileAppId":"QAtesting"
}</con:request>
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Invalid data</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>We're sorry, the hintId is not valid. Please try again.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="NEW v2/oauth2/token/resetpassword" id="a6f0af66-cb0c-4a2f-9fbd-034ca75e0be1">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="NEW v2/oauth2/token/resetpassword" postQueryString="false" mediaType="application/json" id="a324d225-29d4-4dbc-9904-a297073baf17" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/resetpassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 1,
    "hintAnswer": "${#Project#hintAnswer}",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate2}",
    "verifyPassword": "${#Project#passwordupdate2}",
    "mobileAppId":"QAtesting"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="90e66958-2e3d-4503-af3b-ece2cb07e540">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          
          
          
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userDetails]"><con:configuration><path>exists( //response/userDetails)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/userDetails[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [guid]"><con:configuration><path>//response[1]/userDetails[1]/guid[1]/text()</path><content>${#TestSuite#guid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [firstName]"><con:configuration><path>exists( //response/userDetails/firstName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [lastName]"><con:configuration><path>exists( //response/userDetails/lastName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match-registryId">
            <con:configuration>
              <path>//response/userDetails/registryId/text()</path>
              <content>${#TestSuite#registryId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/userDetails[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [token_type]"><con:configuration><path>//response[1]/token_type[1]/text()</path><content>bearer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expires_in]"><con:configuration><path>//response[1]/expires_in[1]/text()</path><content>3600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]1"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/userDetails[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/userDetails[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/userDetails[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="SdpToken after password reset 2" id="40feb917-28ee-4332-b6da-e61e1d85a03c">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="SdpToken after password reset 2" postQueryString="false" mediaType="application/xml" id="22527ce6-47c3-4fd3-89f6-b727343f741c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v1/user/sdptoken</con:endpoint>
          <con:request><![CDATA[<request>
   <email>${#TestSuite#emailId}</email>
   <password>${#Project#passwordupdate2}</password>
</request>]]></con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="961a2d9d-fc3c-4ee1-b4c0-4964a7dfadf6">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          
          
          <con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//sdpinfo[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [New token]" id="83cfa9a5-971e-4a41-bc10-d0f597ca2472">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def token = holder.getNodeValue( "//sdpinfo/token" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "genctxToken", token )


assert token != null
</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="user GET after password reset 2" id="2f8a42bd-fcf3-4f2f-9b67-5d16302aeed9">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="user GET after password reset 2" postQueryString="false" mediaType="application/xml" id="afdcfee4-dbf5-4fce-b639-b192dfe33d48" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user?show=summary,shipping,store,billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="354e4a45-85bf-4f7e-8a9f-d424e5359e3f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response/profile/userName/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/profile[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [address]"><con:configuration><path>exists( //response/profile/address)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [shippingContact]"><con:configuration><path>exists( //response/shippingContactMapper/shippingContact)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionMapper]"><con:configuration><path>exists( //response/subscriptionMapper)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [registryId]"><con:configuration><path>//response[1]/registryMapper[1]/registryInfo[1]/registryId[1]/text()</path><content>${#TestSuite#registryId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/profile[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/profile[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/profile[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [addressLine1]"><con:configuration><path>//response[1]/profile[1]/address[1]/addressLine1[1]/text()</path><content>${#TestSuite#Line1Reg}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [addressLine2]"><con:configuration><path>//response[1]/profile[1]/address[1]/addressLine2[1]/text()</path><content>${#TestSuite#Line2Reg}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [city]"><con:configuration><path>//response[1]/profile[1]/address[1]/city[1]/text()</path><content>${#TestSuite#regCity}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [stateCode]"><con:configuration><path>//response[1]/profile[1]/address[1]/stateCode[1]/text()</path><content>${#TestSuite#regState}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [postalCode]"><con:configuration><path>//response[1]/profile[1]/address[1]/postalCode[1]/text()</path><content>${#TestSuite#ZipcodeReg}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [phoneNumber]"><con:configuration><path>//response[1]/profile[1]/address[1]/phoneNumber[1]/text()</path><content>${#Project#userbestphone}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [gender]"><con:configuration><path>//response[1]/profile[1]/gender[1]/text()</path><content>${#Project#usergender}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/profile[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [email]"><con:configuration><path>//response[1]/shippingContactMapper[1]/shippingContact[1]/email[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v2/user/lockreset">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v2/user/lockreset" postQueryString="false" mediaType="application/xml" id="afdcfee4-dbf5-4fce-b639-b192dfe33d48" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user/lockreset?emailaddress=${#TestSuite#emailId}</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="354e4a45-85bf-4f7e-8a9f-d424e5359e3f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/success[1]/text()</path><content>USERNOTLOCKED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="NEW v2/oauth2/token/updatepassword">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="NEW v2/oauth2/token/updatepassword" postQueryString="false" mediaType="application/json" id="a324d225-29d4-4dbc-9904-a297073baf17" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/updatepassword</con:endpoint>
          <con:request>{
    "userId": "${#TestSuite#userId}",
    "hintId": 1,
    "hintAnswer": "${#Project#hintAnswer}",
    "userName": "${#TestSuite#emailId}",
    "password": "${#Project#passwordupdate3}",
    "verifyPassword": "${#Project#passwordupdate3}",
    "mobileAppId":"QAtesting"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="90e66958-2e3d-4503-af3b-ece2cb07e540">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          
          
          
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userDetails]"><con:configuration><path>exists( //response/userDetails)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userId]"><con:configuration><path>//response[1]/userDetails[1]/userId[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [guid]"><con:configuration><path>//response[1]/userDetails[1]/guid[1]/text()</path><content>${#TestSuite#guid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [firstName]"><con:configuration><path>exists( //response/userDetails/firstName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [lastName]"><con:configuration><path>exists( //response/userDetails/lastName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [bazaarVoiceId]"><con:configuration><path>//response[1]/userDetails[1]/bazaarVoiceId[1]/text()</path><content>${#TestSuite#bazaarVoiceId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [token_type]"><con:configuration><path>//response[1]/token_type[1]/text()</path><content>bearer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expires_in]"><con:configuration><path>//response[1]/expires_in[1]/text()</path><content>3600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]1"><con:configuration><path>//response[1]/userDetails[1]/userName[1]/text()</path><content>${#TestSuite#emailId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/userDetails[1]/firstName[1]/text()</path><content>${#Project#userfirstname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/userDetails[1]/lastName[1]/text()</path><content>${#Project#userlastname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userPreferredStoreId]"><con:configuration><path>//response[1]/userDetails[1]/userPreferredStoreId[1]/text()</path><content>${#Project#preferredStoreId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>itemFound_flag</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>productId</con:name>
          <con:value>28882</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>0592ea83-f3a6-4715-a90d-61a7d166ee99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>9ffeff1c-93b3-4911-802f-7b3249befd99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0b3fa046-21fa-4659-88e8-b6c33f1cf804</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>4f5c7e3c-135f-4654-93c5-d190df1852a8</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f8c76a06-37f8-4430-aeb2-95dae3164a6f</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>6872eaa4-73e8-4f42-b546-bc576a1e8b72</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>c136b370-6432-414a-8fa5-58bd2e0bbe82</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>92ec6ffc-03d0-480a-b2ca-46d275a19e41</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f0059ac9-6192-4a1e-b7fc-a1e05a6f09b5</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>bbc35938-5b71-4610-ba04-3544735df16b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>93bd8caa-2b6a-45c1-a4da-99dd6ec3d88e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e04cf0d4-2f9f-40eb-b6a6-92f97540b861</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>da4ec907-3bbe-43da-a488-fa36cab4313b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b9cfe94f-350f-4aec-a0d4-c1ef63289c4b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3ac7cb55-c0a9-4fb5-a7ad-c7aeb199a019</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>03474a32-c822-4545-b562-2b96e0134fea</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>505ee185-4d82-4c4a-a7d6-a41dd9c1d6f0</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>909feb60-d9f4-48c2-b9b4-539eb072ad17</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a7d3655f-5895-4bdd-9509-ae876f731273</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>88c4bfb7-99b8-4b0a-9f17-0b98a961a714</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a9b09540-cda6-4a4b-b13e-c7f52370eda2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>42f5b219-5485-468c-8e76-2a419789cd8a</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3245cf88-02bc-420d-8cda-9842d008c2cc</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3a329d8f-0c5b-4a5d-b19d-19cfb4ab41bf</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>8f648578-cbf5-49c9-9f30-1c26faabb4af</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>00716173-f33f-4414-badf-682d962d8850</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0141cb0c-98f6-4d7e-822a-6864e5e6c251</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>963184d7-ff9e-4db6-b4b8-6dcc09a27b5d</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>276d686a-98f8-497d-a7b0-4a0eaf4029c9</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b01c8947-86f0-4e9a-85e6-f6e82be11ff1</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>987b86e6-69f4-48e3-964f-2cdf26df18b6</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e1c4a7cf-ba07-4781-b9aa-2a06a6eb7c64</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>7f3b1263-a5a7-47ea-9a29-8ec42d9478be</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0e5c94c2-733b-49d9-a665-f180c7b83997</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>630f94af-7ad1-44fe-ad25-8e8b0194e3ad</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    <con:breakPoints><con:testStepId>aa3ecccd-3afd-4ab1-9d33-30bb80755908</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>560329e7-45f0-49fa-a556-82052ea5b881</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>49d18a11-f314-4933-99e6-e77051d91281</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>93599fcc-c00e-454c-ae48-447ba1cf3882</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35a3862a-ed63-49aa-987b-d6fff099f1ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1ffa996-f3ef-4b50-874f-919e5c65b010</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8cf67a34-747a-4aa4-b446-171be3cfc157</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2d3c7ca7-baca-4787-b6e0-71170c0a3035</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>002dc4a0-448d-4046-bfdd-0c47f62c9647</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>10fc762d-01ef-479f-9ee5-e62e0c6f7e02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46d622e6-6d47-4689-b8fd-4a3e4882bd6e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d3709c35-3816-4317-b38f-179eaedf8dde</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cf4a2f60-b0b0-44d6-b1e0-81834e6f7f51</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6c8396dd-0ca9-41d4-ac04-dbe734b9519a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26d55283-9cec-419a-934f-c404d89d1c47</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe1ce6d0-fd05-43d8-8fa5-a55447f80b8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:properties>
      
      <con:property>
        <con:name>userId</con:name>
        <con:value>2158124515</con:value>
      </con:property>
      <con:property>
        <con:name>emailId</con:name>
        <con:value>user24053619@user.com</con:value>
      </con:property>
      <con:property>
        <con:name>registryId</con:name>
        <con:value>872473</con:value>
      </con:property>
      <con:property>
        <con:name>CityCoRegUpdate</con:name>
        <con:value>Citycoregupdate</con:value>
      </con:property>
      <con:property>
        <con:name>CityRegUpdate</con:name>
        <con:value>Cityregpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>CoRegAddfromReg</con:name>
        <con:value>false</con:value>
      </con:property>
      <con:property>
        <con:name>coregCity</con:name>
        <con:value>Coregcity</con:value>
      </con:property>
      <con:property>
        <con:name>CoRegCityShippingUpdate</con:name>
        <con:value>Coregcityshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>CoRegCountryShippingUpdate</con:name>
        <con:value>USA</con:value>
      </con:property>
      <con:property>
        <con:name>coregEmail</con:name>
        <con:value>user24053619@coreg.com</con:value>
      </con:property>
      <con:property>
        <con:name>coregEmailToUpdate</con:name>
        <con:value>coregemaiorsonupdate@macys.com</con:value>
      </con:property>
      <con:property>
        <con:name>coregFirstname</con:name>
        <con:value>zllNB</con:value>
      </con:property>
      <con:property>
        <con:name>coregFirstnameToUpdate</con:name>
        <con:value>Coregfpersonupdatee</con:value>
      </con:property>
      <con:property>
        <con:name>coregLastname</con:name>
        <con:value>qeUiNV</con:value>
      </con:property>
      <con:property>
        <con:name>coregLastnameToUpdate</con:name>
        <con:value>Coreglpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>coregMiddlename</con:name>
        <con:value>Coregmiddlenamee</con:value>
      </con:property>
      <con:property>
        <con:name>coregMiddlenameToUpdate</con:name>
        <con:value>Coregiddlepersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>coregPhone</con:name>
        <con:value>1230456786</con:value>
      </con:property>
      <con:property>
        <con:name>coregPhoneToUpdate</con:name>
        <con:value>1111111118</con:value>
      </con:property>
      <con:property>
        <con:name>CoRegStateShippingUpdate</con:name>
        <con:value>CA</con:value>
      </con:property>
      <con:property>
        <con:name>CoRegZipShippingUpdate</con:name>
        <con:value>10022</con:value>
      </con:property>
      <con:property>
        <con:name>couplesMessage</con:name>
        <con:value>Wishes 2nd!!!</con:value>
      </con:property>
      <con:property>
        <con:name>couplesMessageToUpdate</con:name>
        <con:value>couples Message Update</con:value>
      </con:property>
      <con:property>
        <con:name>CRFName</con:name>
        <con:value>zEiAVzZOGHdThBtCTwj</con:value>
      </con:property>
      <con:property>
        <con:name>CRLName</con:name>
        <con:value>DeEPdDPFGusSmfDWqHji</con:value>
      </con:property>
      <con:property>
        <con:name>EventDay</con:name>
        <con:value>15</con:value>
      </con:property>
      <con:property>
        <con:name>EventDayPersonUpdate</con:name>
        <con:value>5</con:value>
      </con:property>
      <con:property>
        <con:name>EventDayToUpdate</con:name>
        <con:value>19</con:value>
      </con:property>
      <con:property>
        <con:name>EventMonth</con:name>
        <con:value>9</con:value>
      </con:property>
      <con:property>
        <con:name>EventMonthPersonUpdate</con:name>
        <con:value>5</con:value>
      </con:property>
      <con:property>
        <con:name>EventMonthToUpdate</con:name>
        <con:value>12</con:value>
      </con:property>
      <con:property>
        <con:name>EventYear</con:name>
        <con:value>2015</con:value>
      </con:property>
      <con:property>
        <con:name>EventYearPersonUpdate</con:name>
        <con:value>2017</con:value>
      </con:property>
      <con:property>
        <con:name>EventYearToUpdate</con:name>
        <con:value>2018</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingCity</con:name>
        <con:value>Fshippingcityy</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingCityUpdate</con:name>
        <con:value>los angels</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingCountryUpdate</con:name>
        <con:value>USA</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingState</con:name>
        <con:value>CA</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingStateUpdate</con:name>
        <con:value>LA</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingZip</con:name>
        <con:value>90478</con:value>
      </con:property>
      <con:property>
        <con:name>FShippingZipUpdate</con:name>
        <con:value>11002</con:value>
      </con:property>
      <con:property>
        <con:name>FutEffDay</con:name>
        <con:value>10</con:value>
      </con:property>
      <con:property>
        <con:name>FutEffMonth</con:name>
        <con:value>10</con:value>
      </con:property>
      <con:property>
        <con:name>FutEffYear</con:name>
        <con:value>2019</con:value>
      </con:property>
      <con:property>
        <con:name>futureShippingSource</con:name>
        <con:value>REGISTRANT</con:value>
      </con:property>
      <con:property>
        <con:name>goGreen</con:name>
        <con:value>true</con:value>
      </con:property>
      <con:property>
        <con:name>GoGreenToUpdate</con:name>
        <con:value>false</con:value>
      </con:property>
      <con:property>
        <con:name>isFutureAdd</con:name>
        <con:value>false</con:value>
      </con:property>
      <con:property>
        <con:name>Line1CoReg</con:name>
        <con:value>Line1coreg</con:value>
      </con:property>
      <con:property>
        <con:name>Line1CoRegShippingUpdate</con:name>
        <con:value>Line1coregshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line1CoRegUpdate</con:name>
        <con:value>Line1coregpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line1FShippingUpdate</con:name>
        <con:value>Line1fshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line1Future</con:name>
        <con:value>Line1futuree</con:value>
      </con:property>
      <con:property>
        <con:name>Line1Reg</con:name>
        <con:value>Line1rege</con:value>
      </con:property>
      <con:property>
        <con:name>Line1RegShippingUpdate</con:name>
        <con:value>Line1regshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line1RegUpdate</con:name>
        <con:value>Line1regpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line1Shipping</con:name>
        <con:value>Line1shippinge</con:value>
      </con:property>
      <con:property>
        <con:name>Line1ShippingUpdate</con:name>
        <con:value>Line1shippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line2CoReg</con:name>
        <con:value>Line2corege</con:value>
      </con:property>
      <con:property>
        <con:name>Line2CoRegShippingUpdate</con:name>
        <con:value>Line2coregshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line2CoRegUpdate</con:name>
        <con:value>Line2coregpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line2FShippingUpdate</con:name>
        <con:value>Line2fshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line2Future</con:name>
        <con:value>Line2future</con:value>
      </con:property>
      <con:property>
        <con:name>Line2Reg</con:name>
        <con:value>Line2rege</con:value>
      </con:property>
      <con:property>
        <con:name>Line2RegShippingUpdate</con:name>
        <con:value>Line2regshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line2RegUpdate</con:name>
        <con:value>Line2regpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line2Shipping</con:name>
        <con:value>Line2shipping</con:value>
      </con:property>
      <con:property>
        <con:name>Line2ShippingUpdate</con:name>
        <con:value>Line2shippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line3CoReg</con:name>
        <con:value>Line3corege</con:value>
      </con:property>
      <con:property>
        <con:name>Line3CoRegShippingUpdate</con:name>
        <con:value>Line3coregshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line3CoRegUpdate</con:name>
        <con:value>Line3coregpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line3FShippingUpdate</con:name>
        <con:value>Line3fshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line3Future</con:name>
        <con:value>Line3futuree</con:value>
      </con:property>
      <con:property>
        <con:name>Line3Reg</con:name>
        <con:value>Line3reg</con:value>
      </con:property>
      <con:property>
        <con:name>Line3RegShippingUpdate</con:name>
        <con:value>Line3regshippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line3RegUpdate</con:name>
        <con:value>Line3regpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>Line3Shipping</con:name>
        <con:value>Line3shipping</con:value>
      </con:property>
      <con:property>
        <con:name>Line3ShippingUpdate</con:name>
        <con:value>Line3shippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>NoOfGuests</con:name>
        <con:value>50</con:value>
      </con:property>
      <con:property>
        <con:name>NoOfGuestsToUpdate</con:name>
        <con:value>33</con:value>
      </con:property>
      <con:property>
        <con:name>OnlineUPC</con:name>
        <con:value>11644599126</con:value>
      </con:property>
      <con:property>
        <con:name>OnTheInternet</con:name>
        <con:value>true</con:value>
      </con:property>
      <con:property>
        <con:name>preferredStoreId</con:name>
        <con:value>4</con:value>
      </con:property>
      <con:property>
        <con:name>preferredStoreIdUpdate</con:name>
        <con:value>71</con:value>
      </con:property>
      <con:property>
        <con:name>productids</con:name>
        <con:value>2585,2591,2638,2639,2640,2641,2644,2646,2647,2665,2666,2667,2668,2669,2672,2676,2679,2680,2681,2682,2683,2686,2687,2688,2689</con:value>
      </con:property>
      <con:property>
        <con:name>publicRegistry</con:name>
        <con:value>true</con:value>
      </con:property>
      <con:property>
        <con:name>regCity</con:name>
        <con:value>Regcity</con:value>
      </con:property>
      <con:property>
        <con:name>regCityShippingUpdate</con:name>
        <con:value>Regctysippingupdate</con:value>
      </con:property>
      <con:property>
        <con:name>regCountryShippingUpdate</con:name>
        <con:value>USA</con:value>
      </con:property>
      <con:property>
        <con:name>regEmail</con:name>
        <con:value>user24053619@reg.com</con:value>
      </con:property>
      <con:property>
        <con:name>regEmailToUpdate</con:name>
        <con:value>regemailpersonupdate@macys.com</con:value>
      </con:property>
      <con:property>
        <con:name>regFirstname</con:name>
        <con:value>BpmYWnZ</con:value>
      </con:property>
      <con:property>
        <con:name>regFirstnameToUpdate</con:name>
        <con:value>Regfirstpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>registryBarcode</con:name>
        <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2800008724735</con:value>
      </con:property>
      <con:property>
        <con:name>registryType</con:name>
        <con:value>WEDDING</con:value>
      </con:property>
      <con:property>
        <con:name>registryTypeupdate</con:name>
        <con:value>COMMITMENT</con:value>
      </con:property>
      <con:property>
        <con:name>regLastname</con:name>
        <con:value>PxaOQxJK</con:value>
      </con:property>
      <con:property>
        <con:name>regLastnameToUpdate</con:name>
        <con:value>Reglastpersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>regMiddlename</con:name>
        <con:value>Regmiddlenamee</con:value>
      </con:property>
      <con:property>
        <con:name>regMiddlenameToUpdate</con:name>
        <con:value>Regmiddlepersonupdate</con:value>
      </con:property>
      <con:property>
        <con:name>regPhone</con:name>
        <con:value>1230456785</con:value>
      </con:property>
      <con:property>
        <con:name>regPhoneToUpdate</con:name>
        <con:value>2222222280</con:value>
      </con:property>
      <con:property>
        <con:name>regState</con:name>
        <con:value>MA</con:value>
      </con:property>
      <con:property>
        <con:name>regStateShippingUpdate</con:name>
        <con:value>MA</con:value>
      </con:property>
      <con:property>
        <con:name>regZipShippingUpdate</con:name>
        <con:value>12345</con:value>
      </con:property>
      <con:property>
        <con:name>RFName</con:name>
        <con:value>aUBWjhIYkhAoiTvVx</con:value>
      </con:property>
      <con:property>
        <con:name>RLName</con:name>
        <con:value>AwulpXimCCtGhfuFSk</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingCity</con:name>
        <con:value>Shippingcity</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingCityUpdate</con:name>
        <con:value>Shippingcityupdate</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingCountryUpdate</con:name>
        <con:value>USA</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingFName</con:name>
        <con:value>Shippingfname</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingLName</con:name>
        <con:value>Shippinglname</con:value>
      </con:property>
      <con:property>
        <con:name>shippingSource</con:name>
        <con:value>REGISTRANT</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingState</con:name>
        <con:value>NY</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingStateUpdate</con:name>
        <con:value>CA</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingZip</con:name>
        <con:value>10022</con:value>
      </con:property>
      <con:property>
        <con:name>ShippingZipUpdate</con:name>
        <con:value>94538</con:value>
      </con:property>
      <con:property>
        <con:name>StatecodeToUpdate</con:name>
        <con:value>LA</con:value>
      </con:property>
      <con:property>
        <con:name>StateCoReg</con:name>
        <con:value>LA</con:value>
      </con:property>
      <con:property>
        <con:name>StateCoRegUpdate</con:name>
        <con:value>MA</con:value>
      </con:property>
      <con:property>
        <con:name>StateRegUpdate</con:name>
        <con:value>CA</con:value>
      </con:property>
      <con:property>
        <con:name>subscribeWeddingEmail</con:name>
        <con:value>true</con:value>
      </con:property>
      <con:property>
        <con:name>subscribeWeddingEmailUpdate</con:name>
        <con:value>false</con:value>
      </con:property>
      <con:property>
        <con:name>ZipcodeCoReg</con:name>
        <con:value>10022</con:value>
      </con:property>
      <con:property>
        <con:name>ZipcodeCoRegUpdate</con:name>
        <con:value>10022</con:value>
      </con:property>
      <con:property>
        <con:name>ZipcodeReg</con:name>
        <con:value>90412</con:value>
      </con:property>
      <con:property>
        <con:name>ZipcodeRegUpdate</con:name>
        <con:value>94103</con:value>
      </con:property>
      <con:property>
        <con:name>FutEffMonthShippingUpdate</con:name>
        <con:value>10</con:value>
      </con:property>
      <con:property>
        <con:name>FutEffDayShippingUpdate</con:name>
        <con:value>25</con:value>
      </con:property>
      <con:property>
        <con:name>FutEffYearShippingUpdate</con:name>
        <con:value>2020</con:value>
      </con:property>
      <con:property>
        <con:name>futureShippingAttentionUpdate</con:name>
        <con:value>Future Shipping Attention Update</con:value>
      </con:property>
      <con:property>
        <con:name>futureShippingAddressSourceUpdate</con:name>
        <con:value>REGISTRANT</con:value>
      </con:property>
      <con:property>
        <con:name>shippingAddressSourceUpdate</con:name>
        <con:value>COREGISTRANT</con:value>
      </con:property>
    <con:property><con:name>guid</con:name><con:value>3c4a8250-50d5-422a-9c93-bcc4cf08f179</con:value></con:property><con:property><con:name>bazaarVoiceId</con:name><con:value>1db05aedbd453479286801da43c495cf32313538313234353135</con:value></con:property><con:property><con:name>access_token</con:name><con:value>mqjeum9ex98399evhmrhhbn6</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>2usvuwfxwc3qv77s8sckxz9y</con:value></con:property><con:property><con:name>genctxToken</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3nTc75GHR7xurx1p8VK2Q0vbefm6yuk5SraULrWGLm7H/sVQEksv0VAHduYIJOAdGzm6B2etM7IYURn34qngsPuk07ZYezbrRY9590jCrtj0VNBaUYV7lDdFF81N/YxyJ5NwmuwXTPoCjcv2hGM/nPu+AmUbdGzyoQ/OVbtxcyIgucFL1w5AcfYQi/8GQso0</con:value></con:property></con:properties>
    <con:reportParameters/>
  </con:testSuite>
<con:testSuite name="oauth-GREEN" id="1ffece79-b61a-410d-a76f-a194395be07e">
  <con:settings/>
  <con:runType>SEQUENTIAL</con:runType>
  <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="true" maxResults="0" name="oAuth Token Flow" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="35c9c54d-a7b5-4354-8ad8-87915383aec5">
    <con:settings>
      <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
      <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      <con:setting id="IncludeOverview">true</con:setting>
      <con:setting id="IncludeResults">true</con:setting>
      <con:setting id="FlowLayout">true</con:setting>
      <con:setting id="ErrorDetails">true</con:setting>
      <con:setting id="IncludeCoverage">true</con:setting>
      <con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting>
      <con:setting id="GeneratableJUnitReport@Folder">C:\Users\tijo.thomas\Desktop</con:setting>
    </con:settings>
    <con:testStep type="datagen" name="RandomEmailGenerator" id="f508bf45-e40b-46ca-b4a4-827aa6324cdb">
      <con:settings/>
      <con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:property type="Script">
          <con:configuration><script>def sdf = new java.text.SimpleDateFormat("ddhhmmss")
					def useremail =  "user"+sdf.format( new Date())+"@user.com"
					def usernewemail =  "new"+sdf.format( new Date())+"@user.com"
					def regEmail =  "user"+sdf.format( new Date())+"@reg.com"
					def coregEmail =  "user"+sdf.format( new Date())+"@coreg.com"					

					def coregFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(5)
					def coregLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
					def regFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(7)
					def regLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(8)
					
					testRunner.testCase.testSuite.setPropertyValue( "emailId", useremail )
					testRunner.testCase.testSuite.setPropertyValue( "usernewemail", usernewemail )
					testRunner.testCase.testSuite.setPropertyValue( "regEmail", regEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregEmail", coregEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregFirstname", coregFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "coregLastname", coregLastname )
					testRunner.testCase.testSuite.setPropertyValue( "regFirstname", regFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "regLastname", regLastname )
					return email 
			</script></con:configuration>
          <con:name>emailAddress</con:name>
          <con:mode>STEP</con:mode>
          <con:shared>true</con:shared>
        </con:property>
      </con:config>
    </con:testStep>
    
      
      
      <con:testStep type="httprequest" name="POST v2/user" id="f39260ab-56a0-471f-9fe5-1cd46f436d19">
      <con:settings/>
      <con:config method="POST" xsi:type="con:HttpRequest" name="POST v2/user" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="4db1e885-4dc2-4fcb-b1e1-54597390839a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-tokenHeader" value="value"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
      </con:settings>
        <con:endpoint>${#Project#endPoint}/v2/user</con:endpoint>
        <con:request><![CDATA[firstname=${#Project#userfirstname}&lastname=${#Project#userlastname}&address1=${#Project#useraddress1}&address2=${#Project#useraddress2}&gender=${#Project#usergender}&city=${#Project#usercity}&state=${#Project#userstate}&zipcode=${#Project#userzip}&countrycode=${#Project#usercountry}&emailaddress=${#TestSuite#emailId}&verifyemailaddress=${#TestSuite#emailId}&password=${#Project#password}&verifypassword=${#Project#password}&birthdateday=14&birthdatemonth=05&birthdateyear=1976&subscription=N&textoption=Y&bestphone=5105105100&mobilephone=4154154150&hintquestion=1&hintanswer=${#Project#hintAnswer}&userPreferredStoreId=${#Project#preferredStoreId}]]></con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="faf54858-fedb-4612-9f64-c677f9a503eb">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script- Set [userId]" id="d95079f9-1ca4-4c8f-9b12-947d62c1f95a">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def userId=holder.getNodeValue("//response/userId");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "userId", userId.toString() )

assert userId != null
</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [success]" id="8e7587c2-7465-497d-bd28-c07d246638a2"><con:configuration><path>//response[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      
      <con:testStep type="httprequest" name="Create user JSON" id="b718d9d3-f914-4c39-ad82-6863e37f7b4e" disabled="true">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="Create user JSON" postQueryString="false" mediaType="application/json" id="9f0b2445-5350-4ec5-93f5-176aaac8b40b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user</con:endpoint>
          <con:request>{
    "firstname": "Wssg",
    "lastname": "Tester",
    "address1": "685MarketSt",
    "address22": "Suite800",
    "gender": "M",
    "city": "SanFrancisco",
    "state": "CA",
    "zipcode": "94105",
    "countrycode": "USA",
    "emailaddress": "${#TestSuite#emailId}",
    "verifyemailaddress": "${#TestSuite#emailId}",
    "password": "${#Project#password}",
    "verifypassword": "${#Project#password}",
    "birthdateday": "31",
    "birthdatemonth": "05",
    "birthdateyear": "1976",
    "subscription": "N",
    "textoption": "false",
    "bestphone": "8005551212",
    "mobilephone": "8005551212",
    "passwordHintQuestion": "1",
    "passwordHintAnswer": "123",
    "shippingAddress": {
        "shippingAddressFirstName": "J",
        "shippingAddressLastName": "L",
        "shippingAddress1": "456MarketSt",
        "shippingAddressZipCode": "94106",
        "shippingAddressBestPhone": "8002896223",
        "shippingAddressCity": "York",
        "shippingAddressState": "AZ"
    },
    "userPreferredStoreId": "${#Project#preferredStoreId}"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3f7f4ae2-00d2-4fc0-bd7e-a0db64cba89e">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a1eb047c-19ee-4e40-ab73-880ab81bd72b">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def userId=holder.getNodeValue("//response/userId");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "userId", userId.toString() )


//log.info userId.toString()</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      
      
      <con:testStep type="httprequest" name="GET v1/user/sdptoken" id="78b0fb2f-7d29-4443-9c97-3bf7716e68b8">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v1/user/sdptoken" postQueryString="false" mediaType="application/xml" id="cb5388f2-7cb7-42ba-92c7-b265370c2c07" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v1/user/sdptoken</con:endpoint>
          <con:request><![CDATA[<request>
       <email>${#TestSuite#emailId}</email>
       <password>${#Project#password}</password>
   </request>]]></con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d8a99d05-2a8d-4e51-b96c-405348c0a1e5">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [userId]" id="7b05c31e-6c2f-4a1f-9ab5-147a758ab6dd">
            <con:configuration>
              <path>exists( //sdpinfo/userId)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [token]" id="2beeb690-7953-47d8-bf31-cb106a14f52f">
            <con:configuration>
              <path>exists( //sdpinfo/token)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Assert node [token]" id="87b1d3c0-1f95-4d92-80d9-256d50f353f7">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def token = holder.getNodeValue( "//sdpinfo/token" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "genctxToken", token )


assert token != null
</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET v2/user?show=" id="7ca45077-c2e5-4f84-9504-b94d0e6f113d">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET v2/user?show=" postQueryString="false" mediaType="application/xml" id="de0ed9c4-82f1-4344-a88c-1d631cabed89" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user?show=summary,shipping,store,billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c8721b9f-7888-448f-9636-ecd6301f619e">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET v2/oauth2/token/userDetails" id="a2f35876-4d99-49fd-a801-728eef70a98e">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v2/oauth2/token/userDetails" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d6130e4a-803b-4834-958c-a7b217358e10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/userDetails?application=Mobile</con:endpoint>
          <con:request>grant_type=password&amp;username=${#TestSuite#emailId}&amp;password=${#Project#password}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="986f5588-983f-438c-9271-ed82fe789c8f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="4a818b8a-e33e-42f6-8bf9-de3b596cd2e2">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def access_token=holder.getNodeValue("//response/access_token");
def refresh_token=holder.getNodeValue("//response/refresh_token");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "refresh_token", refresh_token.toString() )</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="Copy of GET v2/oauth2/token/userDetails" id="e6e3270f-fe55-49d7-836f-7be94e7beb87" disabled="true">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="Copy of GET v2/oauth2/token/userDetails" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d6130e4a-803b-4834-958c-a7b217358e10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>http://auth.macys.com/v2/oauth2/token/userDetails?application=Mobile</con:endpoint>
          <con:request>grant_type=password&amp;username=${#TestSuite#emailId}&amp;password=${#Project#password}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="986f5588-983f-438c-9271-ed82fe789c8f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="4a818b8a-e33e-42f6-8bf9-de3b596cd2e2">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def access_token=holder.getNodeValue("//response/access_token");
def refresh_token=holder.getNodeValue("//response/refresh_token");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "refresh_token", refresh_token.toString() )</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api oauth v2/user?show=" id="884c38f7-3c04-483d-a345-165d92fb6377">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api oauth v2/user?show=" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=summary,shipping,billing,store</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration><codes>200</codes></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api oauth /token" id="d44b565f-f0a7-41aa-96f4-4b46f0701127">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET api oauth /token" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="73b68b6e-a2b8-4cd5-ba8a-62eca4f297c3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/token</con:endpoint>
          <con:request>grant_type=refresh_token&amp;refresh_token=${#TestSuite#refresh_token}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c821e580-81af-4883-9ad8-3862936c23f2">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          
          <con:assertion type="GroovyScriptAssertion" name="Assert node [access_token]" id="21a7806b-695b-4e46-bbff-1ffdfd88eed4"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
//holder.namespaces["ns1"] = "http://api.qa17codemacys.fds.com/token"
def access_token = holder.getNodeValue( "//*:Response/*:access_token" )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
//log.info access_token.toString()
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [access_token]"><con:configuration><path>exists( //*:Response/*:access_token)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [expires_in]"><con:configuration><path>exists( //*:Response/*:expires_in)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [refresh_token]"><con:configuration><path>exists( //*:Response/*:refresh_token)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [token_type]"><con:configuration><path>exists( //*:Response/*:token_type)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api oauth v2/user?show= with New token" id="498ab78e-3fe5-4889-9807-ac729aa2ed10">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api oauth v2/user?show= with New token" postQueryString="false" mediaType="application/xml" id="4b32581f-6860-4029-860a-07b8ef2508b0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=summary,shipping,store</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="19347198-aba1-4e96-aa27-a0c40d1bebcd">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="Copy of GET api oauth /token" id="e316ea7a-f979-417e-92b7-790df647e98a" disabled="true">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="Copy of GET api oauth /token" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="f3eed337-7240-4545-9c3e-96ff78b17494" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Authorization" value="Basic ${#TestSuite#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/token</con:endpoint>
          <con:request>grant_type=authorization_code&amp;code=rgkq6jeefb9m9u6qtn6ghnt4&amp;redirect_uri=http://l4308861:8080/index.php/oauth</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="e3621536-8ffc-47eb-8f2e-4ba574008293">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="05c31072-cb39-4828-a5d8-908ad3e9931a">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
//holder.namespaces["ns2"] = "http://schemas.macys.com/definitions/ps/v3"
def access_token=holder.getNodeValue("//Response/access_token");
//def access_token=holder.getNodeValue("//Response[@xmlns='*']/access_token")
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
log.info access_token.toString()</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Assert node [access_token]" id="116667e4-dcc8-490a-bca2-4938a5a31dc7"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
//holder.namespaces["ns1"] = "http://api.qa17codemacys.fds.com/token"
def access_token = holder.getNodeValue( "//*:Response/*:access_token" )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
//log.info access_token.toString()
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="Copy of GET api oauth v2/user?show= with New token" id="77163d71-e708-4d29-9278-a7a5bedeffc8" disabled="true">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="Copy of GET api oauth v2/user?show= with New token" postQueryString="false" mediaType="application/xml" id="d580d7ee-0b52-4e90-ba8b-148ed4070d66" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=summary,shipping,store</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4d70a19d-69b6-477a-a9c2-aaa6f29f4f75">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="PUT api v2/user" id="37690a3a-3fbe-4a16-bab2-9219068280a1">
        <con:settings/>
        <con:config method="PUT" xsi:type="con:HttpRequest" name="PUT api v2/user" postQueryString="false" mediaType="application/json" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user</con:endpoint>
          <con:request>{
    "userupdaterequest": {
        "firstName": "${#TestSuite#fName_Update}",
        "lastName": "${#TestSuite#lName_Update}",
        "address1": "${#TestSuite#add1_Update}",
        "address2": "${#TestSuite#add2_Update}",
        "city": "${#TestSuite#city_Update}",
        "state": "${#TestSuite#state_Update}",
        "countryCode": "USA",
        "zipCode": "${#TestSuite#zip_Update}",
        "emailAddress": "${#TestSuite#usernewemail}",
        "verifyEmailAddress": "${#TestSuite#usernewemail}",
        "gender": "${#TestSuite#gender_Update}",
        "birthDateDay": "${#TestSuite#DOB_day_Update}",
        "birthDateMonth": "${#TestSuite#DOB_mon_Update}",
        "birthDateYear": "${#TestSuite#DOB_yr_Update}",
        "bestPhone": "${#TestSuite#bestPhone_Update}",
        "mobilePhone": "${#TestSuite#mobilePhone_Update}",
        "subscription": "Y",
        "textOption": "Y",
        "menSubscription": "Y",
        "homeSubscription": "Y",
        "storeSubscription": "Y",
        "kidSubscription": "Y",
        "userPreferredStoreId": "${#Project#PreferredStoreId_Update}"
    }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//userupdate[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userID]"><con:configuration><path>//userupdate[1]/userID[1]/text()</path><content>${#TestSuite#userId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//userupdate[1]/firstName[1]/text()</path><content>${#TestSuite#fName_Update}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET v2/oauth2/token/userDetails with updated Id" id="61cb14f9-8e53-4d37-bc10-9cf2394a3b18">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v2/oauth2/token/userDetails with updated Id" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d6130e4a-803b-4834-958c-a7b217358e10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/userDetails</con:endpoint>
          <con:request>grant_type=password&amp;username=${#TestSuite#usernewemail}&amp;password=${#Project#password}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="986f5588-983f-438c-9271-ed82fe789c8f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="4a818b8a-e33e-42f6-8bf9-de3b596cd2e2">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def access_token=holder.getNodeValue("//response/access_token");
def refresh_token=holder.getNodeValue("//response/refresh_token");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "refresh_token", refresh_token.toString() )</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET v2/user?show=Confirm User Updated" id="331432ed-492f-46ff-9894-edc884ba2b5a">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET v2/user?show=Confirm User Updated" postQueryString="false" mediaType="application/xml" id="de0ed9c4-82f1-4344-a88c-1d631cabed89" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user?show=summary,shipping,store</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c8721b9f-7888-448f-9636-ecd6301f619e">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/profile[1]/userName[1]/text()</path><content>${#TestSuite#usernewemail}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstName]"><con:configuration><path>//response[1]/profile[1]/firstName[1]/text()</path><content>${#TestSuite#fName_Update}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastName]"><con:configuration><path>//response[1]/profile[1]/lastName[1]/text()</path><content>${#TestSuite#lName_Update}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [addressLine1]"><con:configuration><path>//response[1]/profile[1]/address[1]/addressLine1[1]/text()</path><content>${#TestSuite#add1_Update}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [addressLine2]"><con:configuration><path>//response[1]/profile[1]/address[1]/addressLine2[1]/text()</path><content>${#TestSuite#add2_Update}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [city]"><con:configuration><path>//response[1]/profile[1]/address[1]/city[1]/text()</path><content>${#TestSuite#city_Update}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [stateCode]"><con:configuration><path>//response[1]/profile[1]/address[1]/stateCode[1]/text()</path><content>${#TestSuite#state_Update}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [postalCode]"><con:configuration><path>//response[1]/profile[1]/address[1]/postalCode[1]/text()</path><content>${#TestSuite#zip_Update}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [phoneNumber]"><con:configuration><path>//response[1]/profile[1]/address[1]/phoneNumber[1]/text()</path><content>${#TestSuite#bestPhone_Update}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [gender]"><con:configuration><path>//response[1]/profile[1]/gender[1]/text()</path><content>${#TestSuite#gender_Update}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api oauth v2/user?show= with New token2" id="22afbb4f-a05f-4421-81fc-b54d58b9140e">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api oauth v2/user?show= with New token2" postQueryString="false" mediaType="application/xml" id="4b32581f-6860-4029-860a-07b8ef2508b0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=summary,shipping,store</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="19347198-aba1-4e96-aa27-a0c40d1bebcd">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="Assert 'macys_online_guid'" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Assert 'macys_online_guid'" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v2/user?show=shipping,summary</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST api v2/user/shipping">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="POST api v2/user/shipping" postQueryString="false" mediaType="application/json" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user/shipping</con:endpoint>
          <con:request>{
    "usernewshipping": {
        "firstname": "Shipping First Namekpok",
        "lastname": "Shipping Last Name",
        "address1": "Shipping Address1",
        "address2": "Shipping Address2",
        "city": "Shipping City",
        "state": "CA",
        "zipcode": "92274",
        "bestphone": {
            "areacode": "800",
            "exchange": "289",
            "numberext": "6229"
        }
    }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Set [contactId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def contactId = holder.getNodeValue( "//response/shippingContactMapper/shippingContact[primaryFlag='false']/contactId" )

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "contactId", contactId )</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api v2/user?show=shipping" id="f82b8131-1ad5-40b0-bfeb-f7cd8a1beef8">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api v2/user?show=shipping" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=shipping</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [contactId]"><con:configuration><path>//response[1]/shippingContactMapper[2]/shippingContact[1]/contactId[1]/text()</path><content>${#TestSuite#contactId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="PUT api v2/user/shipping" id="5d404c5f-312a-45a4-84f1-8995135bdcfa">
        <con:settings/>
        <con:config method="PUT" xsi:type="con:HttpRequest" name="PUT api v2/user/shipping" postQueryString="false" mediaType="application/json" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user/shipping</con:endpoint>
          <con:request>{
    "userupdateshipping": {
        "contactid": "${#TestSuite#contactId}",
        "firstname": "Sar",
        "lastname": "Akram",
        "address1": "4301 Clayton road",
        "city": "Concord",
        "state": "CA",
        "zipcode": "94105",
        "isprimary": "true",
        "bestphone": {
            "areacode": "800",
            "exchange": "289",
            "numberext": "6229"
        }
    }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="POST api v2/user/shipping delete">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="POST api v2/user/shipping delete" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user/shipping/delete?contactid=${#TestSuite#contactId}&amp;userID=${#TestSuite#userId}</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert [contactId deleted]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def contactId = context.expand('${#TestSuite#contactId}')
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def contactIds = holder.getNodeValues( "//response/shippingContactMapper/shippingContact/contactId" )

assert !Arrays.asList(contactIds).contains(contactId);

//assert node != null
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="POST api v2/user/billing">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="POST api v2/user/billing" postQueryString="false" mediaType="application/json" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user/billing</con:endpoint>
          <con:request>{
  "usernewbilling": {
    "creditcard": {
      "cardtype": "M",
      "isprimary": "false",
      "verificationnumber": "5555",
      "cardnumber": "5555555555554444",
      "expirationmonth": "11",
      "expirationyear": "2015"
    },
    "billingaddress": {
      "firstname": "Firstname",
      "middlename": "Middlename",
      "lastname": "Lastname",
      "areacode": "123",
      "exchange": "456",
      "numberext": "7890",
      "emailaddress": "tester@aspire.com",
      "verifyemailaddress": "tester@aspire.com",
      "attention": "bllingattention465#testinnumbe",
      "address": "#123address",
      "address1": "685MarketSt",
      "city": "San Francisco",
      "state": "CA",
      "zipcode": "94105"
    }
  }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [cardid]"><con:configuration><path>exists( //response/billingMapper/creditcarddetails/cardid)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [cardid]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def cardid = holder.getNodeValue( "//response/billingMapper/creditcarddetails/cardid" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "cardid", cardid )

assert cardid != null
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [billingAddress]"><con:configuration><path>exists( //response/billingMapper/billingAddress)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api v2/user?show=billing" id="732820ff-9dd8-4582-9ae1-6a9e1479ea17">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api v2/user?show=billing" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [cardid]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/cardid[1]/text()</path><content>${#TestSuite#cardid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="PUT api v2/user/billing" id="fe671435-0067-4e17-a96b-5f275b15d322"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" name="PUT api v2/user/billing" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#apiendPoint}/v2/user/billing</con:endpoint><con:request>{
    "userbilling": {
        "creditcard": {
            "cardid": "${#TestSuite#cardid}",
            "cardtype": "${#TestSuite#cardtype_B}",
            "isprimary": "${#TestSuite#u_isprimary}",
            "cardnumber": "${#TestSuite#b_cardnumber1}",
            "expirationmonth": "${#TestSuite#u_expmonth}",
            "expirationyear": "${#TestSuite#u_expyear}"
        },
        "billingaddress": {
            "firstname": "${#TestSuite#u_fname}",
            "middlename": "${#TestSuite#u_mname}",
            "lastname": "${#TestSuite#u_lname}",
            "areacode": "${#TestSuite#u_areacode}",
            "exchange": "${#TestSuite#u_exchange}",
            "numberext": "${#TestSuite#u_numberext}",
            "emailaddress": "${#TestSuite#u_emailaddress}",
            "verifyemailaddress": "${#TestSuite#u_emailaddress}",
            "attention": "${#TestSuite#u_attention}",
            "address": "${#TestSuite#u_address}",
            "address1": "${#TestSuite#u_address1}",
            "city": "${#TestSuite#u_city}",
            "state": "${#TestSuite#u_state}",
            "zipcode": "${#TestSuite#u_zipcode}"
        }
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [cardid]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/cardid[1]/text()</path><content>${#TestSuite#cardid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [cardtype]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/cardtype[1]/text()</path><content>${#TestSuite#cardtype_B}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [isprimary]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/isprimary[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [cardnumber]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/billingMapper[1]/creditcarddetails[1]/cardnumber[1]" )
def cardnum=context.expand('${#TestSuite#b_cardnumber1}')
assert node.endsWith(cardnum.substring(cardnum.length()-4))
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [expirationmonth]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/billingMapper[1]/creditcarddetails[1]/expirationmonth[1]" )

assert node.equals(Integer.parseInt(context.expand('${#TestSuite#u_expmonth}')).toString())
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expirationyear]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/expirationyear[1]/text()</path><content>${#TestSuite#u_expyear}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstname]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/firstname[1]/text()</path><content>${#TestSuite#u_fname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [middlename]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/middlename[1]/text()</path><content>${#TestSuite#u_mname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastname]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/lastname[1]/text()</path><content>${#TestSuite#u_lname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [phone]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/phone[1]/text()</path><content>${#TestSuite#u_areacode}-${#TestSuite#u_exchange}-${#TestSuite#u_numberext}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="oti/cards/3287-->Match content of [emailaddress]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/emailaddress[1]/text()</path><content>${#TestSuite#u_emailaddress}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [attention]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/attention[1]/text()</path><content>${#TestSuite#u_attention}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [address]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/address[1]/text()</path><content>${#TestSuite#u_address}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [address1]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/address1[1]/text()</path><content>${#TestSuite#u_address1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [attention]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/attention[1]/text()</path><content>${#TestSuite#u_attention}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [city]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/city[1]/text()</path><content>${#TestSuite#u_city}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [state]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/state[1]/text()</path><content>${#TestSuite#u_state}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [zipcode]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/zipcode[1]/text()</path><content>${#TestSuite#u_zipcode}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="GET api v2/user?show=billing Updated"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET api v2/user?show=billing Updated" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#apiendPoint}/v2/user?show=billing</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionInfo]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscribed]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo/subscribed)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionId]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo/subscriptionId)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionName]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo/subscriptionName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [active]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo/active)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [billingMapper]"><con:configuration><path>exists( //response/billingMapper)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [creditcarddetails]"><con:configuration><path>exists( //response/billingMapper/creditcarddetails)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [billingAddress]"><con:configuration><path>exists( //response/billingMapper/billingAddress)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [cardid]"><con:configuration><path>exists( //response/billingMapper/creditcarddetails/cardid)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [cardtype]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/cardtype[1]/text()</path><content>${#TestSuite#cardtype_B}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [isprimary]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/isprimary[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expirationmonth]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/expirationmonth[1]/text()</path><content>${#TestSuite#u_expmonth}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expirationyear]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/expirationyear[1]/text()</path><content>${#TestSuite#u_expyear}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstname]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/firstname[1]/text()</path><content>${#TestSuite#u_fname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [middlename]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/middlename[1]/text()</path><content>${#TestSuite#u_mname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastname]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/lastname[1]/text()</path><content>${#TestSuite#u_lname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert Content [phone]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/billingMapper[1]/billingAddress[1]/phone[1]" )
actualPhoneNumber = node.toString()

areacode = context.expand('${#TestSuite#u_areacode}')
exchange = context.expand('${#TestSuite#u_exchange}')
numberext = context.expand('${#TestSuite#u_numberext}')

expectedPhoneNumber = areacode + '-' + exchange + '-' + numberext

assert actualPhoneNumber == expectedPhoneNumber
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [emailaddress]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/emailaddress[1]/text()</path><content>${#TestSuite#u_emailaddress}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [address]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/address[1]/text()</path><content>${#TestSuite#u_address}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [address1]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/address1[1]/text()</path><content>${#TestSuite#u_address1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [attention]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/attention[1]/text()</path><content>${#TestSuite#u_attention}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [city]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/city[1]/text()</path><content>${#TestSuite#u_city}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [state]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/state[1]/text()</path><content>${#TestSuite#u_state}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [zipcode]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/zipcode[1]/text()</path><content>${#TestSuite#u_zipcode}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check count of [billingMapper]"><con:configuration><path>count( //response/billingMapper)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST api v2/user/billing/delete" id="3c6509af-bd86-41b7-9a3b-cf512ddf8d43">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="POST api v2/user/billing/delete" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user/billing/delete?cardid=${#TestSuite#cardid}&amp;userID=${#TestSuite#userId}</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/success[1]/text()</path><content>Credit Card Removed Successfully</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api v2/user?show=billing 1" id="0aa37f2c-f2a5-443c-93b1-2c71b79e47b3">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api v2/user?show=billing 1" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [billingMapper]"><con:configuration><path>exists( //response/billingMapper)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v2/oauth2/getUserContext">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="v2/oauth2/getUserContext" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d6130e4a-803b-4834-958c-a7b217358e10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept_json}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/getUserContext</con:endpoint>
          <con:request>username=${#TestSuite#usernewemail}&amp;password=${#Project#password}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="986f5588-983f-438c-9271-ed82fe789c8f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          
          <con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api oauth v2/user?show= 2">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api oauth v2/user?show= 2" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=summary,shipping,billing,store</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="wallet-Mobile">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="wallet-Mobile" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#access_token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings>
          <con:endpoint>${#Project#apiendPoint}/v1/customers/${#TestSuite#userId}/wallet?_context=MOBILE</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v2/oauth2/authorize-???" disabled="true">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="v2/oauth2/authorize-???" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d6130e4a-803b-4834-958c-a7b217358e10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/authorize</con:endpoint>
          <con:request><![CDATA[email=${#TestSuite#usernewemail}&password=${#Project#password}&client_id=${#Project#client_id}&client_secret=${#Project#client_secret}&redirect_uri=${#Project#redirect_uri}&response_type=code&state=mystate&name=test&client_app_id=mobile_wallet]]></con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="986f5588-983f-438c-9271-ed82fe789c8f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="4a818b8a-e33e-42f6-8bf9-de3b596cd2e2">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def access_token=holder.getNodeValue("//response/access_token");
def refresh_token=holder.getNodeValue("//response/refresh_token");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "refresh_token", refresh_token.toString() )</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>itemFound_flag</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>productId</con:name>
          <con:value>28882</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>0592ea83-f3a6-4715-a90d-61a7d166ee99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>9ffeff1c-93b3-4911-802f-7b3249befd99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0b3fa046-21fa-4659-88e8-b6c33f1cf804</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>4f5c7e3c-135f-4654-93c5-d190df1852a8</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f8c76a06-37f8-4430-aeb2-95dae3164a6f</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>6872eaa4-73e8-4f42-b546-bc576a1e8b72</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>c136b370-6432-414a-8fa5-58bd2e0bbe82</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>92ec6ffc-03d0-480a-b2ca-46d275a19e41</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f0059ac9-6192-4a1e-b7fc-a1e05a6f09b5</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>bbc35938-5b71-4610-ba04-3544735df16b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>93bd8caa-2b6a-45c1-a4da-99dd6ec3d88e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e04cf0d4-2f9f-40eb-b6a6-92f97540b861</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>da4ec907-3bbe-43da-a488-fa36cab4313b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b9cfe94f-350f-4aec-a0d4-c1ef63289c4b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3ac7cb55-c0a9-4fb5-a7ad-c7aeb199a019</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>03474a32-c822-4545-b562-2b96e0134fea</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>505ee185-4d82-4c4a-a7d6-a41dd9c1d6f0</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>909feb60-d9f4-48c2-b9b4-539eb072ad17</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a7d3655f-5895-4bdd-9509-ae876f731273</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>88c4bfb7-99b8-4b0a-9f17-0b98a961a714</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a9b09540-cda6-4a4b-b13e-c7f52370eda2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>42f5b219-5485-468c-8e76-2a419789cd8a</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3245cf88-02bc-420d-8cda-9842d008c2cc</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3a329d8f-0c5b-4a5d-b19d-19cfb4ab41bf</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>8f648578-cbf5-49c9-9f30-1c26faabb4af</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>00716173-f33f-4414-badf-682d962d8850</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0141cb0c-98f6-4d7e-822a-6864e5e6c251</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>963184d7-ff9e-4db6-b4b8-6dcc09a27b5d</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>276d686a-98f8-497d-a7b0-4a0eaf4029c9</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b01c8947-86f0-4e9a-85e6-f6e82be11ff1</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>987b86e6-69f4-48e3-964f-2cdf26df18b6</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e1c4a7cf-ba07-4781-b9aa-2a06a6eb7c64</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>7f3b1263-a5a7-47ea-9a29-8ec42d9478be</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0e5c94c2-733b-49d9-a665-f180c7b83997</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b718d9d3-f914-4c39-ad82-6863e37f7b4e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    <con:breakPoints><con:testStepId>f508bf45-e40b-46ca-b4a4-827aa6324cdb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a2f35876-4d99-49fd-a801-728eef70a98e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>37690a3a-3fbe-4a16-bab2-9219068280a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>331432ed-492f-46ff-9894-edc884ba2b5a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61cb14f9-8e53-4d37-bc10-9cf2394a3b18</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22afbb4f-a05f-4421-81fc-b54d58b9140e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f82b8131-1ad5-40b0-bfeb-f7cd8a1beef8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe671435-0067-4e17-a96b-5f275b15d322</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>732820ff-9dd8-4582-9ae1-6a9e1479ea17</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d404c5f-312a-45a4-84f1-8995135bdcfa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6e3270f-fe55-49d7-836f-7be94e7beb87</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3c6509af-bd86-41b7-9a3b-cf512ddf8d43</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0aa37f2c-f2a5-443c-93b1-2c71b79e47b3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:properties>
      <con:property>
        <con:name>genctxToken</con:name>
        <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1stDtsvVAYYgF4fID+Q4MR7EBEfWawNqZypdiAa7L6y4fjoqsovLU1JcqrnN6JwuISrZU5LKtCkopTEW6/XR73OOyTTpJdjMJqsLw9IUfelah+HaRl9TjyPMbel1PRyNTRUXisb+aV7c5mSSbGDO/gzGIvJ+IghBy4VlzEVRNqFRgjFfnFLOC2B7XXbR/NL2</con:value>
      </con:property>
      <con:property>
        <con:name>userId</con:name>
        <con:value>2158385700</con:value>
      </con:property>
      <con:property>
        <con:name>emailId</con:name>
        <con:value>user24053619@user.com</con:value>
      </con:property>
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      <con:property>
        <con:name>oauth_token</con:name>
        <con:value>c2RhaHZxZmNqeTdlNTNlZXlrOHg1OTN5Ok1nejlObmNFd1l1NXR3czZEdUpzNFZEQw==</con:value>
      </con:property>
      <con:property>
        <con:name>access_token</con:name>
        <con:value>rthwdqe3xnumhtjp3dctuu7p</con:value>
      </con:property>
      <con:property>
        <con:name>refresh_token</con:name>
        <con:value>n67qwuqckdh35ard66rn8rpr</con:value>
      </con:property>
    <con:property><con:name>preferredStoreId</con:name><con:value>45</con:value></con:property><con:property><con:name>regEmail</con:name><con:value>user24053619@reg.com</con:value></con:property><con:property><con:name>coregEmail</con:name><con:value>user24053619@coreg.com</con:value></con:property><con:property><con:name>coregFirstname</con:name><con:value>wCBjb</con:value></con:property><con:property><con:name>coregLastname</con:name><con:value>TvbuTx</con:value></con:property><con:property><con:name>regFirstname</con:name><con:value>abDvFlJ</con:value></con:property><con:property><con:name>regLastname</con:name><con:value>GVaRAILl</con:value></con:property><con:property><con:name>contactId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11062039</con:value></con:property><con:property><con:name>usernewemail</con:name><con:value>new24053619@user.com</con:value></con:property><con:property><con:name>cardid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">10262433</con:value></con:property><con:property><con:name>u_isprimary</con:name><con:value>true</con:value></con:property><con:property><con:name>u_expmonth</con:name><con:value>8</con:value></con:property><con:property><con:name>u_expyear</con:name><con:value>2020</con:value></con:property><con:property><con:name>u_fname</con:name><con:value>billing update fname</con:value></con:property><con:property><con:name>u_mname</con:name><con:value>billing update mname</con:value></con:property><con:property><con:name>u_lname</con:name><con:value>billing update lname</con:value></con:property><con:property><con:name>u_areacode</con:name><con:value>401</con:value></con:property><con:property><con:name>u_exchange</con:name><con:value>445</con:value></con:property><con:property><con:name>u_numberext</con:name><con:value>7895</con:value></con:property><con:property><con:name>u_emailaddress</con:name><con:value>billingupdate@macys.com</con:value></con:property><con:property><con:name>u_attention</con:name><con:value>billingupdate</con:value></con:property><con:property><con:name>u_address</con:name><con:value>billing update address</con:value></con:property><con:property><con:name>u_address1</con:name><con:value>billing update address1</con:value></con:property><con:property><con:name>u_city</con:name><con:value>billing update city</con:value></con:property><con:property><con:name>u_state</con:name><con:value>NY</con:value></con:property><con:property><con:name>u_zipcode</con:name><con:value>10022</con:value></con:property><con:property><con:name>fName_Update</con:name><con:value>Fname Update</con:value></con:property><con:property><con:name>lName_Update</con:name><con:value>Lname Update</con:value></con:property><con:property><con:name>add1_Update</con:name><con:value>#add1 Update</con:value></con:property><con:property><con:name>add2_Update</con:name><con:value>#add2 Update</con:value></con:property><con:property><con:name>city_Update</con:name><con:value>City Update</con:value></con:property><con:property><con:name>state_Update</con:name><con:value>NY</con:value></con:property><con:property><con:name>zip_Update</con:name><con:value>10022</con:value></con:property><con:property><con:name>gender_Update</con:name><con:value>F</con:value></con:property><con:property><con:name>DOB_day_Update</con:name><con:value>12</con:value></con:property><con:property><con:name>DOB_mon_Update</con:name><con:value>5</con:value></con:property><con:property><con:name>DOB_yr_Update</con:name><con:value>1968</con:value></con:property><con:property><con:name>bestPhone_Update</con:name><con:value>4978965412</con:value></con:property><con:property><con:name>mobilePhone_Update</con:name><con:value>1234568974</con:value></con:property><con:property><con:name>cardtype_B</con:name><con:value>B</con:value></con:property><con:property><con:name>b_cardnumber1</con:name><con:value>377481100161279</con:value></con:property></con:properties>
    <con:tearDownScript>for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      for ( testStepResult in testCaseResult.getResults() )
      {
         testStepResult.messages.each() { msg -> log.info msg }
      }
   }
}</con:tearDownScript><con:reportParameters/>
  </con:testSuite>
  
  <con:testSuite name="Defect-15A.MT29792-V4/Product-Products in input order"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Defect-MT29792" searchProperties="true" id="771bd2de-aa7b-41cf-86f8-faa7e940bcfe"><con:settings/><con:testStep type="httprequest" name="v3//browseproducts">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v3//browseproducts" id="26097c10-b79b-4936-82df-d29f34bda23f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  <con:entry key="X-tokenHeader" value="value"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#CatId}/browseproducts?show=product&amp;resultsperpage=24</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="18e2611d-1af2-4d28-9083-7edf2dccecf0"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Promotion Products]" id="9aed3787-52e8-4777-8c1e-a98eb8b26bc6"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def promotion_Products = holder.getNodeValues( "//*:CategoryResponse/category/product/product/@id" )
//log.info promotion_Products.toString()
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "promotion_Products", promotion_Products.toString().replaceAll(" ","").replace("[","").replace("]","") )
assert promotion_Products != null
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Promotion Child Products]" id="9aed3787-52e8-4777-8c1e-a98eb8b26bc6"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def promotion_Products = holder.getNodeValues( "//*:CategoryResponse/category/product/product[iscollection=false and badges/promotionbadge]/@id" )
//log.info promotion_Products.toString()
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "promotion_child_Products", promotion_Products.toString().replaceAll(" ","").replace("[","").replace("]","") )
assert promotion_Products != null
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/product/(productdetails(childproducts))">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/product/(productdetails(childproducts))" id="99754e1c-7b81-4a28-8b25-c32f18efe93a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#promotion_Products}(productdetails(summary,childproducts))</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="787ce34d-5793-4167-a639-d489c2d8c03f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Child Products]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def childProducts = holder.getNodeValues( "//productresponse/product/productDetails/childProducts/@id" )
//log.info childProducts.toString()
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "childProducts", childProducts.toString().replaceAll(" ","").replace("[","").replace("]","") )
assert childProducts != null
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Product Order]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def InputProducts = context.expand('${#TestSuite#promotion_Products}');

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Products = holder.getNodeValues( "//productresponse/product/@id" )

//log.info InputProducts.toString()
//log.info Products.toString().replaceAll(" ","").replace("[","").replace("]","")

assert InputProducts.toString().equals (Products.toString().replaceAll(" ","").replace("[","").replace("]",""))
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4//product/products" disabled="true">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4//product/products" id="99754e1c-7b81-4a28-8b25-c32f18efe93a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#childProducts}(productdetails(summary))</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="787ce34d-5793-4167-a639-d489c2d8c03f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [@upcnumber]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def upcnumbers = holder.getNodeValues( "//productresponse/product/upcs/@upcnumber" )
//messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC_Gift", upcnumber.toString().replaceAll(" ","").replace("[","").replace("]","") )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC_Gift", upcnumbers.toString())

assert upcnumbers != null
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Product Order]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def InputProducts = context.expand('${#TestSuite#childProducts}');

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Products = holder.getNodeValues( "//productresponse/product/@id" )

//log.info InputProducts.toString()
//log.info Products.toString().replaceAll(" ","").replace("[","").replace("]","")

assert InputProducts.toString().equals (Products.toString().replaceAll(" ","").replace("[","").replace("]",""))
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="Copy of v4/product/(productdetails(childproducts))" disabled="true">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="Copy of v4/product/(productdetails(childproducts))" id="99754e1c-7b81-4a28-8b25-c32f18efe93a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#var}(productdetails(summary))</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="787ce34d-5793-4167-a639-d489c2d8c03f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Child Products]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def childProducts = holder.getNodeValues( "//productresponse/product/productDetails/childProducts/@id" )
//log.info childProducts.toString()
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "childProducts", childProducts.toString().replaceAll(" ","").replace("[","").replace("]","") )
assert childProducts != null
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Product Order]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def InoutProducts = context.expand('${#TestSuite#var}');

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Products = holder.getNodeValues( "//productresponse/product/@id" )

//log.info InoutProducts.toString()
//log.info Products.toString().replaceAll(" ","").replace("[","").replace("]","")

assert InoutProducts.toString().equals (Products.toString().replaceAll(" ","").replace("[","").replace("]",""))
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4//product/(upcs(upcdetails))">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4//product/(upcs(upcdetails))" id="99754e1c-7b81-4a28-8b25-c32f18efe93a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#childProducts}(upcs(upcdetails))</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="787ce34d-5793-4167-a639-d489c2d8c03f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [@upcnumber]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def upcnumbers = holder.getNodeValues( "//productresponse/product/upcs/@upcnumber" )
//messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC_Gift", upcnumber.toString().replaceAll(" ","").replace("[","").replace("]","") )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC_Gift", upcnumbers.toString())

assert upcnumbers != null
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Product Order]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def InputProducts = context.expand('${#TestSuite#childProducts}');

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Products = holder.getNodeValues( "//productresponse/product/@id" )

//log.info InputProducts.toString()
//log.info Products.toString().replaceAll(" ","").replace("[","").replace("]","")

assert InputProducts.toString().equals (Products.toString().replaceAll(" ","").replace("[","").replace("]",""))
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [@upcnumber]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def UPCs = holder.getNodeValues( "//productresponse/product/upcs/@upcnumber" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPCs", UPCs.toString().replaceAll(" ","").replace("[","").replace("]",""))

assert UPCs != null
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4//product/UPCs">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4//product/UPCs" id="99754e1c-7b81-4a28-8b25-c32f18efe93a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/product/upc/${#TestSuite#UPCs}(upcs(upcdetails))</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="787ce34d-5793-4167-a639-d489c2d8c03f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [@upcnumber]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def upcnumbers = holder.getNodeValues( "//productresponse/product/upcs/@upcnumber" )
//messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC_Gift", upcnumber.toString().replaceAll(" ","").replace("[","").replace("]","") )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC_Gift", upcnumbers.toString())

assert upcnumbers != null
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Product Order]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def InputUPCs = context.expand('${#TestSuite#UPCs}');

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def UPCs = holder.getNodeValues( "//productresponse/product/upcs/@upcnumber" )

log.info InputUPCs.toString()
log.info UPCs.toString().replaceAll(" ","").replace("[","").replace("]","")

assert InputUPCs.toString().equals (UPCs.toString().replaceAll(" ","").replace("[","").replace("]",""))
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4//product/UPC store only">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4//product/UPC store only" id="99754e1c-7b81-4a28-8b25-c32f18efe93a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/product/upc/03572632140111(productdetails,upcs(storedata,upcdetails),reviews,storedetails)?includeUnavailable=true&amp;includevariations=true&amp;storenumber=31</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="787ce34d-5793-4167-a639-d489c2d8c03f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>210da0ea-8b44-4acc-854a-ef5c8f80a7b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>634d0664-027a-46ac-96c7-160b48ac810a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d06cfd7-0e4c-4d46-b90d-4209454f1390</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26365983-1195-4ec6-b331-27245ad204ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>prodId</con:name><con:value>1537042</con:value></con:property><con:property><con:name>isDuplicate</con:name><con:value>false</con:value></con:property><con:property><con:name>catId</con:name><con:value>7138</con:value></con:property><con:property><con:name>promotion_Products</con:name><con:value>1446771,1396873,1342279,1157108,1193515,1120173,705974,1446797,1366807,1366799,1055169,1447861,1294302,1285203,1447860,1294308,1447837,1446760,1447840,1285201,1285190,1216061,983696,1447828</con:value></con:property><con:property><con:name>couponId</con:name><con:value>62</con:value></con:property><con:property><con:name>promotion_child_Products</con:name><con:value/></con:property><con:property><con:name>childProducts</con:name><con:value>1280931,1447839,1206349,1156854,1447842,1411645,1324405,1280949,1003849,1324389,1199386,1411613,1447809,1280931,1127707,1447839,1244431,1447842,1411645,1324405,1280949,1156854,1084084,1447839,1280931,1366698,1280931,1447839,1366697,1447842,1411645,1324405,1280949,1156854,1324389,1411613,1447809,1199386,1447860,1447861,1281235,1210965,1447819,1426867,1447860,1291473,1447850,1281237,1447819,1426867,1210965,1447850,1281237,1281236,1426866,1210964,1210965,1447819,1426867,1242178,1447913,1411671,1242184</con:value></con:property><con:property><con:name>UPC_Gift</con:name><con:value>[829284404188, 829284404157, 829284403952, 829284403983, 829284403921, 829284404195, 829284404164, 829284403969, 829284403990, 829284403938, 829284404201, 829284404171, 829284403976, 829284404003, 829284403945, 829284404218, 829284404041, 829284404010, 829284404072, 829284404126, 829284404225, 829284404058, 829284404027, 829284404089, 829284404133, 829284404232, 829284404065, 829284404034, 829284404096, 829284404140, 829284403761, 829284404102, 829284404119, 829284403778, 829284651537, 829284651582, 829284651636, 829284651674, 829284651490, 829284651544, 829284651599, 829284651643, 829284651681, 829284651506, 829284651551, 829284651605, 829284651698, 829284670170, 829284670279, 829284670323, 829284670361, 829284670392, 829284670187, 829284670231, 829284670286, 829284670330, 829284670378, 829284670248, 829284670293, 829284670347, 829284670385, 829284651117, 829284651216, 829284651223, 829284651315, 829284313817, 829284313923, 829284313831, 829284313916, 829284313909, 829284313855, 829284313848, 829284313824, 829284313862, 829284313800, 829284313794, 829284313787, 829284675816, 829284675861, 829284675854, 829284676585, 829284676578, 829284676639, 829284676615, 829284231463, 829284231470, 829284231432, 829284231449, 829284231494, 829284231500, 829284297346, 829284297353, 829284231371, 829284231388, 829284231401, 829284231418, 829284231319, 829284231326, 829284297315, 829284297322, 829284231517, 829284231456, 829284231425, 829284231487, 829284297339, 829284415870, 829284231524, 829284415887, 829284231531, 829284415894, 829284231548, 829284231364, 829284231395, 829284231302, 829284297308, 829284415900, 829284231555, 829284415917, 829284231562, 829284415924, 829284466186, 829284466216, 829284466247, 829284466278, 829284466315, 829284466353, 829284466223, 829284466254, 829284466285, 829284466322, 829284466230, 829284466261, 829284466292, 829284466339, 829284466377, 829284466193, 829284466209, 829284569856, 829284569863, 829284569870, 829284569818, 829284569825, 829284569832, 829284466308, 829284466384, 829284569900, 829284637777, 829284637852, 829284637890, 829284652794, 829284652749, 829284652800, 829284652862, 829284652923, 829284652817, 829284653036, 829284653081, 829284653142, 829284653203, 829284653265, 829284653098, 829284653159, 829284636954, 829284637463, 829284652794, 829284652749, 829284652800, 829284652862, 829284652923, 829284652756, 829284652817, 829284652879, 829284653036, 829284653074, 829284653135, 829284653258, 829284653081, 829284653142, 829284653203, 829284653265, 829284653098, 829284653159, 829284654675, 829284654736, 829284654798, 829284654620, 829284654682, 829284654743, 829284654804, 829284654637, 829284654699, 829284654750, 829284670699, 829284670743, 829284670798, 829284670842, 829284670897, 829284670705, 829284670750, 829284670804, 829284670859, 829284670903, 829284670712, 829284670767, 829284670811, 829284670866, 829284566220, 829284566251, 829284566190, 829284566138, 829284566237, 829284566268, 829284566206, 829284566145, 829284566176, 829284566244, 829284566275, 829284566213, 829284572542, 829284572573, 829284572511, 829284572481, 829284572559, 829284572580, 829284572528, 829284572498, 829284572467, 829284572566, 829284572597, 829284572535, 829284566404, 829284566374, 829284566282, 829284566343, 829284566411, 829284566381, 829284566299, 829284566350, 829284566329, 829284566428, 829284566398, 829284566305, 829284572450, 829284572474, 829284572504, 829284566152, 829284566169, 829284566183, 829284566312, 829284566336, 829284566367, 829284674567, 829284674598, 829284674628, 829284674659, 829284674574, 829284674604, 829284674635, 829284674666, 829284674581, 829284674611, 829284674642, 829284674673, 829284617229, 829284617212, 829284231678, 829284231661, 829284231654, 829284231630, 829284231623, 829284231616, 829284601693, 829284601686, 829284601679, 829284644768, 829284644751, 829284649374, 829284649367, 829284649398, 829284654569, 829284674734, 829284674727, 829284674710, 829284670996, 829284670989, 829284670972, 829284649367, 829284645772, 829284645765, 829284662809, 829284662793, 829284616550, 829284488812, 829284488805, 829284488799, 829284488843, 829284488836, 829284488829, 829284224724, 829284224731, 829284224717, 829284224687, 829284224694, 829284224670, 829284676103, 829284676097, 829284676073, 829284676080, 829284676059, 829284676028, 829284676035, 829284676042, 842576195786, 842576195779, 842576195762, 842576195793, 842576195823, 842576195816, 842576195809, 842576195830, 842576195663, 842576195656, 842576195649, 842576195700, 842576195694, 842576195687, 842576195717, 3340442025535, 3340442025580, 3340442025634, 3340442025733, 3340442025504, 3340442025542, 3340442025641, 3340442025696, 3340442025740, 3340442025511, 3340442025559, 3340442025603, 3340442025658, 3340442025757, 3340442025818, 3340442025863, 3340442025917, 3340442025962, 3340442026013, 3340442025788, 3340442025825, 3340442025870, 3340442025924, 3340442025979, 3340442026020, 3340442025795, 3340442025832, 3340442025887, 3340442025931, 3340442025986, 3340442026037, 3340442125679, 3340442125723, 3340442125778, 3340442125822, 3340442125877, 3340442125648, 3340442125686, 3340442125730, 3340442125785, 3340442125839, 3340442125884, 3340442125655, 3340442125693, 3340442125747, 3340442125792, 3340442125846, 3340442125891, 3340442025290, 3340442025283, 3340442025276, 3340442025191, 3340442025184, 3340442025177, 3340442125556, 3340442125549, 3340442125532, 3340442025245, 3340442025238, 3340442025221, 3340442025290, 3340442025283, 3340442025276, 842576195137, 842576195120, 3340442027973, 3340442027942, 3340442027980, 3340442028024, 3340442027959, 3340442027997, 3340442028031, 3340441942826, 3340441942857, 3340441942802, 3340441942833, 3340441942864, 3340441942819, 3340441942840, 3340441942871, 3340442126478, 3340442126515, 3340442126447, 3340442126485, 3340442126522, 3340442126454, 3340442126492, 3340442126539, 3340442025337, 3340442025320, 3340442026907, 3340442026952, 3340442027003, 3340442026860, 3340442026914, 3340442026969, 3340442027010, 3340442027058, 3340442026877, 3340442026921, 3340442026976, 3340442027027, 3340442026907, 3340442026952, 3340442027003, 3340442027041, 3340442026860, 3340442026914, 3340442026969, 3340442027010, 3340442027058, 3340442026877, 3340442026921, 3340442026976, 3340442027027, 3340442026389, 3340442026433, 3340442026488, 3340442026525, 3340442026341, 3340442026396, 3340442026440, 3340442026495, 3340442026532, 3340442026358, 3340442026501, 3340442126010, 3340442126065, 3340442126102, 3340442125921, 3340442125976, 3340442126027, 3340442126072, 3340442126119, 3340442125938, 3340442126034, 3340442126089, 9314366160225, 9314366160263, 9314366160300, 9314366160270, 9314366160317, 9314366160249, 9314366160287, 9314366160324, 9314366189554, 9314366189561, 9314366189578, 9314366223616, 9314366223654, 9314366223692, 9314366223739, 9314366223548, 9314366223623, 9314366223661, 9314366223708, 9314366223555, 9314366223593, 9314366223630, 9314366223678, 9314366223715, 9314366223562, 9314366223647, 9314366196484, 9314366196491, 9314366196514, 9314366194633, 9314366160027, 9314366160010, 9314366160003, 9314366162908, 9314366218049, 9314366218056, 9314366218063, 9314366218032, 9314366160072, 9314366160065, 9314366160058]</con:value></con:property><con:property><con:name>UserID</con:name><con:value>null</con:value></con:property><con:property><con:name>upcnumber</con:name><con:value>27131268864</con:value></con:property><con:property><con:name>req</con:name><con:value>{"additemsrequest": {"userid": "${#TestSuite#userID}","quantity": 1,"upcnumber": "${#TestSuite#upcnumber}"}}</con:value></con:property><con:property><con:name>var</con:name><con:value>1748831,1748556</con:value></con:property><con:property><con:name>UPCs</con:name><con:valuecon:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Promotion Issue-GREEN" id="6b7a978c-b5f6-4622-b73d-c42f4a4e2aab"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Promotion Issue" searchProperties="true" id="c1284760-a0b6-4e60-b27a-0526c62fbabc"><con:settings/><con:testStep type="groovy" name="Set-Promotion Category" id="634d0664-027a-46ac-96c7-160b48ac810a"><con:settings/><con:config><script>def brand = context.expand('${#Project#brand}')

if(brand.equals('MCOM')){
	testRunner.testCase.testSuite.setPropertyValue( "catId", "58476")	
}
else{
	testRunner.testCase.testSuite.setPropertyValue( "catId", "14846") //or 7138
}</script></con:config></con:testStep><con:testStep type="httprequest" name="v3/category/browseproducts" id="e93ff133-84c7-4569-824a-c9990da34f55">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v3/category/browseproducts" id="26097c10-b79b-4936-82df-d29f34bda23f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  <con:entry key="X-tokenHeader" value="value"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#TestSuite#CatId}/browseproducts?show=product&amp;resultsperpage=24</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="18e2611d-1af2-4d28-9083-7edf2dccecf0"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Promotion Products]" id="9aed3787-52e8-4777-8c1e-a98eb8b26bc6"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def promotion_Products = holder.getNodeValues( "//*:CategoryResponse/category/product/product[badges/promotionbadge]/@id" )
//log.info promotion_Products.toString()
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "promotion_Products", promotion_Products.toString().replaceAll(" ","").replace("[","").replace("]","") )
assert promotion_Products != null
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [promotionbadge]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/badges/promotionbadge)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/product/(productdetails(badges),promotions)" id="e8e3aeee-b2a3-4a3f-8084-8276fb3eb36f">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/product/(productdetails(badges),promotions)" id="99754e1c-7b81-4a28-8b25-c32f18efe93a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#promotion_Products}(productdetails(badges),promotions)</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="787ce34d-5793-4167-a639-d489c2d8c03f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [giftProductDetails]" id="8ade942f-432f-4536-86a0-48aae18531a0"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def brand = context.expand('${#Project#Brand}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def promotions = holder.getNodeValues( "//productresponse/product/promotions/promotionID" )

for (promotion in promotions){
	def displayGift = holder.getNodeValue( "//productresponse/product/promotions[promotionID="+promotion+"]/giftOffer/displayGift" )
	if (brand.equals('MCOM')){
		def nameBadgeText = holder.getNodeValue( "//productresponse/product/promotions[promotionID="+promotion+"]/attributes/name" )
		if (displayGift.equals('true') &amp;&amp; nameBadgeText.equals('BADGE_TEXT')){	
//			log.info promotion.toString()
			def giftproductDetails = holder.getNodeValues( "//productresponse/product/promotions[promotionID="+promotion+"]/giftOffer/giftProduct/productDetails" )
//			log.info giftproductDetails.toString()
		assert giftproductDetails != null	
	}}
	else{
		if (displayGift.equals('true')){	
//			log.info promotion.toString()
			def giftproductDetails = holder.getNodeValues( "//productresponse/product/promotions[promotionID="+promotion+"]/giftOffer/giftProduct/productDetails" )
//			log.info giftproductDetails.toString()
		assert giftproductDetails != null	
	}	
}
}



</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>210da0ea-8b44-4acc-854a-ef5c8f80a7b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>634d0664-027a-46ac-96c7-160b48ac810a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Apply Promotion" searchProperties="true" id="af51c234-58be-4933-881b-2a6576d3bc69"><con:settings/><con:testStep type="httprequest" name="GET v3/promotions/sorted?channel=mobile">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET v3/promotions/sorted?channel=mobile" id="26097c10-b79b-4936-82df-d29f34bda23f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  <con:entry key="X-tokenHeader" value="value"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/promotions/sorted?channel=mobile</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="18e2611d-1af2-4d28-9083-7edf2dccecf0"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [couponIdORpromoID]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]

if (header["#status#"].toString().contains("200 OK")){
	def couponId = holder.getNodeValue( "//response[1]/sortedPromotions[1]/promotions[1]/coupon[1]/couponId[1]" )
	def promoId = holder.getNodeValue( "//response[1]/sortedPromotions[1]/promotions[1]/promoId[1]" )
	def promotionCode = holder.getNodeValue( "//response[1]/sortedPromotions[1]/promotions[1]/promotionCode[1]" )
	
	if (couponId != null){
		messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "couponId", couponId )		
		messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "promoId", "" )
		messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "promotionCode", "" )
	}
	else if(promoId != null){
		messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "promoId", promoId )
		if (promotionCode != null){
			messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "promotionCode", promotionCode )		
		}
		else{
			messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "promotionCode", "" )
		}
		messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "couponId", "" )		
	}
}
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Promotion Property Change" id="b1973ee0-a609-44b7-ae38-8a638a326109"><con:settings/><con:config><script>def couponId = context.expand('${#TestSuite#couponId}')
def promoId = context.expand('${#TestSuite#promoId}')
def promotionCode = context.expand('${#TestSuite#promotionCode}')

//log.info couponId.size()
//log.info promoId.toString()

if (couponId.size() != 0){
	testRunner.testCase.testSuite.setPropertyValue( "req", '{"couponId":"${#TestSuite#couponId}","channel": "MOBILE","message": "Thanks for the gift!", "recipientEmailAddress": "recipient@macys.com", "senderEmailAddress": "sender@macys.com", "senderName": "Sender" }' )	
}
else if (promoId.size() != 0){
	if (promotionCode.size()!= 0){
		testRunner.testCase.testSuite.setPropertyValue( "req", '{"promoId":"${#TestSuite#promoId}", "channel": "MOBILE", "promoCode": "${#TestSuite#promotionCode}", "message": "Thanks for the gift!", "recipientEmailAddress": "recipient@macys.com", "senderEmailAddress": "sender@macys.com", "senderName": "Sender" } ')		
	}
	else{
//	testRunner.testCase.testSuite.setPropertyValue( "req", '{"promoId":"${#TestSuite#promoId}", "channel": "MOBILE", "promoCode": "no promo code", "message": "Thanks for the gift!", "recipientEmailAddress": "recipient@macys.com", "senderEmailAddress": "sender@macys.com", "senderName": "Sender" } ')
	testRunner.testCase.testSuite.setPropertyValue( "req", '{"promoId":"${#TestSuite#promoId}", "channel": "MOBILE", "message": "Thanks for the gift!", "recipientEmailAddress": "recipient@macys.com", "senderEmailAddress": "sender@macys.com", "senderName": "Sender" } ')
	}
}</script></con:config></con:testStep><con:testStep type="httprequest" name="POST v3/promotions/share">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="POST v3/promotions/share" id="26097c10-b79b-4936-82df-d29f34bda23f" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/promotions/share</con:endpoint>
          <con:request>${#TestSuite#req}</con:request>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="18e2611d-1af2-4d28-9083-7edf2dccecf0"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/promoShareOfferResponse[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>210da0ea-8b44-4acc-854a-ef5c8f80a7b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>634d0664-027a-46ac-96c7-160b48ac810a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b1973ee0-a609-44b7-ae38-8a638a326109</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>prodId</con:name><con:value>1537042</con:value></con:property><con:property><con:name>isDuplicate</con:name><con:value>false</con:value></con:property><con:property><con:name>catId</con:name><con:value>58476</con:value></con:property><con:property><con:name>promotion_Products</con:name><con:value>2102563,2206610,983892,2100430,2392562,2374242,2373996,2361404,2354352,2352039,2351945,2351927,2351905,2351824,2346530,2334170,2327033,2326880,2326878,2324736,2317429,2308722,2308710,2304284</con:value></con:property><con:property><con:name>couponId</con:name><con:value>62</con:value></con:property><con:property><con:name>promoId</con:name><con:value/></con:property><con:property><con:name>req</con:name><con:value>{"couponId":"${#TestSuite#couponId}","channel": "MOBILE","message": "Thanks for the gift!", "recipientEmailAddress": "recipient@macys.com", "senderEmailAddress": "sender@macys.com", "senderName": "Sender" }</con:value></con:property><con:property><con:name>promotionCode</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="14K_MT25325.27546-Browse Category Suggestor-GREEN"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties><con:property><con:name>Facet</con:name><con:value>SPECIAL_OFFERS</con:value></con:property><con:property><con:name>Facet_Value</con:name><con:value>Sales+%26+Discounts</con:value></con:property></con:properties><con:reportParameters/><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Find Category with facet and products" searchProperties="true" id="951de86b-a883-4887-aad8-adaf2679d82b" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:settings/><con:testStep type="httprequest" name="Category Index"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Category Index" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/index</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Fetching Categories"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
def holder = new XmlHolder( messageExchange.responseContentAsXml )
if (header["#status#"].toString().contains("200 OK")){
//	def categories = holder.getNodeValues( "//*:CategoryResponse/category[(categorytype='Browse')or (categorytype='Flexible Template')]//@id" )
	def categories = holder.getNodeValues( "//*:CategoryResponse//category[(categorytype='Browse')or (categorytype='Flexible Template')]/@id" )
//	log.info categories.toString()
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "categories", categories.toString() )
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "flag",'false' )
//	assert categories != null
}
else{
	return "TestCase Failed  - " +header["#status#"].toString()
}
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script"><con:settings/><con:config><script>def categories=context.expand('${#TestCase#categories}')
def flag=context.expand('${#TestCase#flag}')

if(categories.size()>0){	
	def catIds = categories.replaceAll(" ","").replace("[","").replace("]","")
	String[] category = catIds.split(",")	
	for (int i=0; i&lt;category.length; i++){
		if (flag=='false'){
			testRunner.testCase.setPropertyValue( "catId", category[i] )	
			testRunner.runTestStepByName( "browseproducts")
		}		
	}
	testRunner.gotoStepByName( "browseproducts2")
}	
</script></con:config></con:testStep><con:testStep type="httprequest" name="browseproducts"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="browseproducts" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#TestCase#catId}/browseproducts?show=product,facet,productpool,categorytree&amp;resultsperpage=1</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" disabled="true"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set Category with [product,facet,productpool]"><con:configuration><scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder
def catId = context.expand('${#TestCase#catId}')
def flag=context.expand('${#TestCase#flag}')
def holder = new XmlHolder( messageExchange.responseContentAsXml )

//def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
//log.info header.toString()
//if (header["#status#"].toString().contains("200 OK") && flag=='false')
if (flag.equals('false'))
{	
	def product = holder.getNodeValue( "//*:CategoryResponse/category/product" )
	def facet = holder.getNodeValue( "//*:CategoryResponse/category/facet" )
//	def productpool = holder.getNodeValue( "//*:CategoryResponse/category/productpool" )
//	def category = holder.getNodeValue( "//*:CategoryResponse/category/category" )	
//	if (product != null && facet != null && productpool != null && category != null)

	if (product != null && facet != null)
	{
		messageExchange.modelItem.testStep.testCase.testSuite.project.setPropertyValue( "catId", catId )
		messageExchange.modelItem.testStep.testCase.setPropertyValue( "flag", 'true' )
		log.info "success"
	}
}
//}
//def flag=context.expand('${#TestCase#flag}')
//log.info flag.toString()
]]></scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="browseproducts2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="browseproducts2" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product,facet,productpool,categorytree</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties><con:property><con:name>categories</con:name><con:value>[22865, 1000376, 1001501, 1002360, 1002984, 20873, 20875, 20874, 20878, 20879, 22866, 22867, 1000377, 1000387, 1000386, 1000390, 1000392, 1000393, 1000396, 1000397, 1000388, 1000402, 1000403, 1000404, 1000405, 1000406, 1000407, 1000409, 1000410, 1000526, 1000389, 1000400, 1000401, 1000629, 1000630, 1000631, 1000632, 4358, 1000378, 22926, 22931, 23029, 1000380, 2910, 1003651, 1003355, 1003557, 1003697, 1001035, 1001037, 1003305, 1001940, 3016, 11817, 1001521, 1000658, 1001520, 1001979, 1003366, 5545, 1003547, 1003420, 21683, 1001980, 15299, 5566, 5567, 16919, 22935, 5577, 19556, 5576, 17558, 1000089, 1000321, 1000622, 1003447, 17566, 19950, 19951, 21429, 1003494, 1003495, 1003493, 1003492, 12374, 1003699, 5609, 22314, 5619, 1002083, 10527, 1003650, 17378, 9326, 1001581, 1002520, 1002509, 10192, 1003321, 10205, 1002443, 23671, 1001620, 1002444, 1000299, 1003628, 1003648, 21846, 4360, 8702, 15968, 15970, 15971, 19445, 19647, 20549, 21719, 21919, 22109, 1002093, 1002627, 1002632, 1002643, 1000381, 2916, 22299, 22300, 23527, 1001857, 1001858, 1001859, 1003246, 21652, 23614, 22885, 21658, 21659, 21660, 21653, 21669, 21670, 1000625, 21672, 21673, 21671, 1003455, 1001266, 21656, 22703, 1001914, 1003669, 20138, 1000382, 1000383, 2911, 1003652, 1001036, 1001038, 1001941, 2920, 8613, 1001523, 1001522, 8573, 1003548, 8608, 1001981, 15300, 17613, 17614, 22936, 22315, 17616, 17615, 1000090, 1001041, 1001042, 5451, 19952, 19953, 21434, 12629, 1002233, 8722, 22316, 10026, 1002084, 2941, 21648, 1001622, 1002511, 5363, 22114, 12938, 1001195, 21913, 1003307, 1000304, 23667, 1001621, 1002445, 13574, 1003633, 1003649, 21855, 15969, 19446, 19558, 20139, 21720, 22880, 23073, 1002094, 1000384, 1001876, 1001877, 1001880, 1001878, 1001879, 1001881, 1001882, 1000213, 4359, 5386, 19447, 20224, 20551, 21721, 21918, 1002092, 1002760, 1002761, 1002762, 1002763, 1002764, 1002765, 1003124, 1000214, 4361, 20552, 21722, 21920, 1000488, 1003695, 22256, 16307, 21717, 21917, 22701, 1000215, 1000651, 21718, 1000950, 22886, 1000628, 2921, 3358, 1002078, 16541, 1001724, 1001726, 1001855, 1001727, 1001745, 14685, 14812, 14720, 14721, 14797, 14806, 14811, 18437, 1000624, 14716, 14846, 14861, 20409, 14873, 14896, 3375, 14715, 17063, 17068, 1003272, 1003273, 1003274, 17089, 1000169, 17094, 1000926, 1001019, 1001020, 1001070, 1001075, 1001279, 1001076, 1001071, 1001072, 1001073, 1001077, 1001288, 1001074, 1001078, 1001280, 1001021, 1001152, 1001281, 1001151, 1001282, 1001154, 1001155, 1001153, 1001022, 1001102, 1001103, 1001104, 1001064, 1001105, 1001734, 1001023, 1001108, 1002095, 1002098, 1001109, 1001110, 1001284, 1001107, 1001285, 1001286, 6830, 21527, 7327, 7328, 7330, 7331, 19181, 1003043, 6831, 1002464, 19160, 7510, 7511, 7512, 7514, 7516, 7518, 1002612, 1002613, 6834, 7600, 7605, 7611, 7620, 7621, 7619, 7625, 6841, 14550, 7639, 1003055, 7645, 7649, 7651, 7654, 7657, 7675, 1001689, 23542, 1000528, 1000529, 1000530, 1000531, 1003568, 1003109, 17973, 17975, 17976, 17985, 17974, 1003477, 21050, 21051, 21052, 21053, 21054, 21055, 17944, 17951, 1003077, 1003078, 1003079, 1003080, 1003081, 17953, 17954, 1003082, 19382, 19385, 19392, 1001392, 19402, 19406, 6864, 7158, 7159, 7177, 7192, 6865, 15187, 1002776, 1002778, 1002781, 7255, 7262, 7269, 17745, 18029, 17759, 17746, 17753, 17772, 17780, 1002873, 1003356, 17765, 1003357, 17767, 1003358, 11047, 11049, 11052, 11053, 11073, 8981, 8982, 8983, 8984, 6886, 1001292, 1001293, 1001294, 1001295, 1001296, 1001297, 1001298, 1001299, 1001300, 1001301, 1001302, 1001304, 1000216, 1000217, 1000218, 1000219, 1000220, 1000221, 1001875, 6898, 1001728, 5408, 5410, 5409, 5411, 1002492, 1001267, 1000627, 1003019, 23596, 1000440, 1003304, 1001268, 1000623, 22699, 2917, 3695, 3697, 15915, 1003374, 1002043, 1002861, 3696, 5471, 5466, 5467, 3704, 16308, 16184, 1003698, 5503, 1000444, 9026, 9029, 19204, 15305, 9027, 6085, 3376, 1001573, 1001575, 1001577, 1001569, 1001781, 19469, 1003488, 20532, 3619, 8701, 3628, 19441, 19442, 19443, 19444, 3629, 3630, 1000342, 20033, 3621, 1003486, 4520, 3620, 3631, 1000604, 21311, 21485, 3637, 20034, 6508, 1001031, 23604, 16296, 1003448, 23689, 19762, 1000247, 1000249, 9314, 1003624, 8293, 3864, 3877, 20592, 1003282, 1002077, 10166, 17648, 11548, 17647, 1003569, 10172, 10189, 1000663, 11576, 1000074, 1003462, 10258, 1003490, 11536, 10236, 10237, 1000045, 1000055, 1000046, 1001183, 1000050, 1001314, 1000051, 1000053, 1000054, 1002649, 1000058, 1000070, 1000059, 1000060, 1000067, 1000061, 1000062, 1000068, 1000833, 1000065, 1000066, 6504, 1000425, 1003345, 1001452, 8688, 1000373, 1003346, 1000419, 1001147, 3865, 1002512, 1002515, 1003498, 1003107, 1002556, 1002563, 1002567, 1002564, 1002565, 1002566, 1002569, 1002570, 1002516, 1000241, 1000242, 1000243, 1000244, 1000231, 1000233, 1000232, 1000234, 1000246, 1000245, 1000235, 1000236, 1000237, 1000238, 1000239, 1000240, 1000265, 1001539, 1001540, 1001541, 1001542, 1001543, 1001546, 1001547, 1001548, 1001544, 1001549, 1000250, 1000255, 1001009, 1000257, 1001973, 1000434, 1001971, 1001550, 15873, 19130, 1001477, 1002052, 16328, 8108, 22449, 23379, 22787, 23380, 22440, 22441, 22442, 22443, 22444, 22445, 22446, 22447, 22448, 22939, 8241, 8240, 8242, 22431, 9497, 9498, 9499, 19598, 19599, 19600, 4730, 4740, 4741, 4742, 15419, 15420, 15424, 15426, 15427, 4729, 4735, 1001782, 3866, 23707, 23708, 23712, 23713, 1001242, 1001243, 1000107, 1001244, 23715, 1003141, 1000307, 10104, 23719, 23720, 1003142, 10147, 23722, 23723, 1003143, 1001234, 1001235, 1001312, 1001681, 1001238, 1002580, 1001236, 3867, 11476, 1001579, 1001580, 8126, 3948, 3949, 3954, 3955, 3977, 3979, 3985, 19718, 4841, 5070, 5303, 1001014, 1001174, 5320, 6466, 5220, 19968, 11943, 19210, 19209, 19211, 1002695, 11945, 13668, 1001655, 1001593, 1001598, 1003087, 1003088, 1003091, 1003101, 1003092, 1003100, 1003099, 1003093, 1003102, 1003090, 1003103, 1003089, 1003095, 1003096, 1003104, 1003105, 1003106, 1003108, 1003112, 1003113, 1003136, 1003139, 1003150, 1003151, 1002686, 22179, 1003574, 1003571, 1003572, 1003573, 15514, 15361, 16958, 17449, 1000341, 22559, 23173, 1003556, 1000986, 22173, 23556, 23559, 1000340, 1003618, 23564, 16959, 1000369, 17309, 17310, 17311, 1002230, 17312, 17314, 19993, 17316, 1000414, 1000415, 1000416, 1000417, 1000431, 17426, 16961, 17523, 1000674, 23268, 1000588, 1000978, 19852, 16962, 19212, 1000692, 1000693, 1002295, 16963, 17396, 17397, 17398, 17399, 17400, 17402, 17411, 17355, 1000614, 1000616, 1001418, 1002544, 1000613, 1000608, 1000611, 1002543, 17412, 17367, 16975, 16976, 1001276, 1001277, 17802, 20548, 17804, 17805, 17806, 1000374, 22108, 1001010, 1000931, 17787, 21324, 20543, 1003343, 20695, 1000292, 1000293, 1000294, 1000297, 1000298, 1000295, 1000172, 1000296, 1000949, 1001485, 20842, 1000948, 20824, 20825, 20826, 20827, 20828, 17793, 1002269, 23693, 21304, 21849, 23692, 1001013, 23694, 17796, 21107, 20949, 1001508, 1003023, 1003022, 1001509, 1000143, 1000145, 1001506, 17799, 22089, 18398, 18399, 18401, 18403, 18400, 23662, 17536, 20566, 22110, 22678, 22679, 22680, 22681, 22682, 22683, 22684, 22685, 22686, 22687, 22689, 22690, 22691, 22692, 22693, 22700, 22702, 23649, 1000142, 1000326, 1000330, 1000331, 1000332, 1000333, 1000334, 1000335, 1000336, 1000357, 1000468, 1000521, 1000523, 1000522, 1000525, 1000524, 1000605, 1000637, 1000639, 1000640, 1000641, 1000643, 1000644, 1000966, 1000967, 1003371, 1000968, 1000969, 1002869, 1000995, 1000996, 1000997, 1000998, 1000999, 1001000, 1001003, 1001047, 1001059, 1001063, 1001062, 1001061, 1001069, 1001111, 1001160, 1001168, 1001250, 1001396, 1001836, 1001944, 1001945, 1001946, 1001947, 1001948, 1001949, 1002023, 1002074, 1002088, 1002096, 1002097, 1002099, 1002100, 1002101, 1002102, 1002103, 1002104, 1002160, 1003551, 1002162, 1003042, 1003030, 1002656, 1002163, 1002164, 1002165, 1002105, 1002106, 1002107, 1002108, 1002109, 1002111, 1002179, 1002438, 1002442, 1002441, 1002440, 1002439, 1002605, 1002606, 1002607, 1002608, 1002609, 1002610, 1002611, 1002644, 1002663, 1002727, 1002728, 1002729, 1002730, 1002731, 1002732, 1002791, 1002793, 1003638, 1002794, 1002795, 1002796, 1002797, 1002798, 1002800, 1002845, 1002846, 1002848, 1002847, 1002851, 1002852, 1002853, 1002854, 1002874, 1002875, 1002876, 1002877, 1002878, 1002879, 1002880, 1002881, 1002924, 1002925, 1002926, 1002927, 1002929, 1003313, 1002985, 1002996, 1003017, 1003024, 1003025, 1003026, 1003110, 1003111, 1003114, 1003154, 1003155, 1003156, 1003157, 1003158, 1003159, 1003160, 1003115, 1003161, 1003116, 1003149, 1003171, 1003254, 1003283, 1003308, 1003325, 1003337, 1003331, 1003328, 1003326, 1003327, 1003334, 1003332, 1003330, 1003329, 1003333, 1003340, 1003375, 1003382, 1003383, 1003384, 1003386, 1003387, 1003388, 1003392, 1003389, 1003390, 1003391, 1003429, 1003453, 1003476, 1003500, 1003501, 1003502, 1003503, 1003504, 1003505, 1003506, 1003508, 1003509, 1003510, 1003511, 1003585, 1003588, 1003593, 1003601, 1003615, 1003617, 1003620, 1003623, 1003689, 1003690, 1003701]</con:value></con:property><con:property><con:name>catId</con:name><con:value>1003701</con:value></con:property><con:property><con:name>flag</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC1_Verify for suggested category" searchProperties="true" id="aa449d51-398e-47e9-8817-0e0c26d0cb5a"><con:settings/><con:testStep type="httprequest" name="Valid request with redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid request with redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="X-tokenHeader" value="value"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>301</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/@id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [categorypageurl]"><con:configuration><path>exists( //*:CategoryResponse/category/summary/categorypageurl)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC2_Verify summary object" searchProperties="true" id="cf58f7bd-4726-406c-bd27-db35e047be90"><con:settings/><con:testStep type="httprequest" name="Valid request with redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid request with redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="X-tokenHeader" value="value"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>301</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/@id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [product]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [categorypageurl]"><con:configuration><path>exists( //*:CategoryResponse/category/summary/categorypageurl)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC3_Verify error message with redirect false" searchProperties="true" id="86dfb790-5ca8-4b13-aec7-72edbec59391"><con:settings/><con:testStep type="httprequest" name="redirect false"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="redirect false" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="X-tokenHeader" value="value"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=false</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC4_Verify default redirect" searchProperties="true" id="74825ba9-eead-44bd-bef5-d2082008d4b7"><con:settings/><con:testStep type="httprequest" name="Blank"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Blank" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="X-tokenHeader" value="value"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Non-Boolean"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Non-Boolean" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=invalid</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Numerals"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Numerals" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=12345</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Special Characters"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Special Characters" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=!@!@</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="No redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="No redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC5_Invalid Data Format Category" searchProperties="true" id="1536182f-9964-4d13-b4e7-b5ac4f09fc30"><con:settings/><con:testStep type="httprequest" name="-ve Category with redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="-ve Category with redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="X-tokenHeader" value="value"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/-123/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>103</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Incorrect arguments types or combination</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>category Id cannot be negative</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Char Category with redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Char Category with redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/abc/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>103</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Incorrect arguments types or combination</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Ambiguous values for id parameter</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="SpChar Category with redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="SpChar Category with redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/**/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>103</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Incorrect arguments types or combination</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Ambiguous values for id parameter</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb6660f7-ef8b-4fa3-8ca5-0787b75a4433</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC6_Valid category &amp; redirect=true" searchProperties="true" id="07e9914f-c77c-419e-8091-6723167bedf4"><con:settings/><con:testStep type="httprequest" name="Valid category"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="X-tokenHeader" value="value"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [facet]" disabled="true"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category with show"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category with show" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product,facet,productpool</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [productpool]" disabled="true"><con:configuration><path>exists( //*:CategoryResponse/category/productpool)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [facet]"><con:configuration><path>exists( //*:CategoryResponse/category/facet)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties><con:property><con:name>Facet</con:name><con:value>SPECIAL_OFFERS</con:value></con:property><con:property><con:name>Facet_Value</con:name><con:value>Sales+%26+Discounts</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC7_Valid category &amp; redirect=true &amp; refinement" searchProperties="true" id="ba88d92b-3a3e-47c7-bbb4-a2dcc8f7b82d"><con:settings/><con:testStep type="httprequest" name="Valid category"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="X-tokenHeader" value="value"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category]" disabled="true"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Facet]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Facet_Name = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/facet[1]/name[1]" )
def Value = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/facet['Facet']/value[1]/values[1]" )
//log.info Facet_Name.toString()

def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK") &amp;&amp; Facet_Name.toString() != 'null'){
	Facet=URLEncoder.encode(Facet_Name,"UTF-8");
	Facet_Value=URLEncoder.encode(Value,"UTF-8");
//	log.info Facet.toString()
//	log.info Facet_Value.toString()
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "Facet", Facet )		
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "Facet_Value", Facet_Value )	
	}
else{
	"No Facets for the category"
}

//assert Facet != null
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category with show"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category with show" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product,facet,productpool</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [productpool]" disabled="true"><con:configuration><path>exists( //*:CategoryResponse/category/productpool)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [facet]"><con:configuration><path>exists( //*:CategoryResponse/category/facet)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category with refinement"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category with refinement" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;${#TestCase#Facet}=${#TestCase#Facet_Value}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category]" disabled="true"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [refinementName]"><con:configuration><path>//*:CategoryResponse[1]/inputRefinements[1]/refinementName[1]/text()</path><content>${#TestCase#Facet}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties><con:property><con:name>Facet</con:name><con:value>SPECIAL_OFFERS</con:value></con:property><con:property><con:name>Facet_Value</con:name><con:value>Sales+%26+Discounts</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC8_Valid refinements suggested category" searchProperties="true" id="c08cf09e-dc04-4a80-b86c-c9331d471895"><con:settings/><con:testStep type="httprequest" name="GET Suggested Category"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Suggested Category" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="X-tokenHeader" value="value"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>301</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [totalproducts]"><con:configuration><path>exists( //*:CategoryResponse/category/totalproducts)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [product] node"><con:configuration><path>exists( //*:CategoryResponse/category/product)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [suggested Category]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def req_category = context.expand('${#Project#catId_Suggestor}')
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def response_category = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/@id" )
messageExchange.modelItem.testStep.testCase.setPropertyValue( "response_category", response_category )	

assert req_category != response_category
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="GET Suggested Category's Refinement"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Suggested Category's Refinement" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#TestCase#response_category}/browseproducts?show=facet</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Facet]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Facet_Name = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/facet[1]/name[1]" )
def Value = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/facet['Facet']/value[1]/values[1]" )
//log.info Facet_Value.toString()

def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK") &amp;&amp; Facet_Name.toString() != 'null'){
	Facet=URLEncoder.encode(Facet_Name,"UTF-8");
	Facet_Value=URLEncoder.encode(Value,"UTF-8");
//	log.info Facet.toString()
//	log.info Facet_Value.toString()
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "Facet", Facet )		
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "Facet_Value", Facet_Value )	
	}

assert Facet != null
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="InValid Category with Valid Refinement"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="InValid Category with Valid Refinement" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=true&amp;${#TestCase#Facet}=${#TestCase#Facet_Value}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>301</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [totalproducts]"><con:configuration><path>exists( //*:CategoryResponse/category/totalproducts)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [product] node"><con:configuration><path>exists( //*:CategoryResponse/category/product)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#TestCase#response_category}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties><con:property><con:name>Facet</con:name><con:value>BRAND</con:value></con:property><con:property><con:name>Facet_Value</con:name><con:value>HUGO+BOSS</con:value></con:property><con:property><con:name>response_category</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">10166</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c105a474-8d27-4f1a-a2d6-e4298a4c790d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC9_Valid category&amp;redirect=true&amp;invalid refinements" searchProperties="true" id="c989f791-937c-462c-a0ea-33cf317faa5e"><con:settings/><con:testStep type="httprequest" name="Valid category &amp; invalid refinement Value"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category &amp; invalid refinement Value" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product,facet,productpool&amp;BRAND=Invalid</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>The page requested in unavailable. Total products for this search is only 0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category &amp; invalid refinement" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category &amp; invalid refinement" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product,facet,productpool&amp;A=B</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>301</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>//*:CategoryResponse[1]/@sortby</path><content>original</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>//*:CategoryResponse[1]/@show</path><content>product,facet,productpool</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [product]"><con:configuration><path>exists( //*:CategoryResponse/category/product)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>exists( //*:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON-existance of [facet]"><con:configuration><path>exists( //*:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON-existance of [category]"><con:configuration><path>exists( //*:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="15B-D-05932-Valid category &amp; invalid refinement"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="15B-D-05932-Valid category &amp; invalid refinement" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product,facet,productpool&amp;A=B</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>//*:CategoryResponse[1]/@sortby</path><content>original</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>//*:CategoryResponse[1]/@show</path><content>product,facet,productpool</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>exists( //*:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [refinementName]"><con:configuration><path>//*:CategoryResponse[1]/inputRefinements[1]/refinementName[1]/text()</path><content>A</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [refinementValues]"><con:configuration><path>//*:CategoryResponse[1]/inputRefinements[1]/refinementValues[1]/text()</path><content>B</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product]"><con:configuration><path>exists( //*:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1c34780f-ec1f-470f-a26d-456f555a14a4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC10_Valid category&amp;redirect=false&amp;invalid refinements" searchProperties="true" id="04782cf7-daf0-4844-aec6-8af96112e6e2"><con:settings/><con:testStep type="httprequest" name="Valid category&amp;Invalid refinements&amp;redirect=false" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;Invalid refinements&amp;redirect=false" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=false&amp;show=product,facet,productpool&amp;Invalid=Invalid</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>The page requested in unavailable. Total products for this search is only 0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="15B-D-05932-Valid category&amp;Invalid refinements&amp;redirect=false"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="15B-D-05932-Valid category&amp;Invalid refinements&amp;redirect=false" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=false&amp;show=product,facet,productpool&amp;Invalid=Invalid</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [refinementName]"><con:configuration><path>//*:CategoryResponse[1]/inputRefinements[1]/refinementName[1]/text()</path><content>Invalid</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [refinementValues]"><con:configuration><path>//*:CategoryResponse[1]/inputRefinements[1]/refinementValues[1]/text()</path><content>Invalid</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>exists( //*:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product]"><con:configuration><path>exists( //*:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC11_Valid category&amp;NO_redirect&amp;invalid refinements" searchProperties="true" id="b165f28d-e898-4a7f-9566-cf1bad2fd512"><con:settings/><con:testStep type="httprequest" name="Valid category&amp;Invalid refinements&amp;No_redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;Invalid refinements&amp;No_redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product,facet,productpool&amp;BRAND=Invalid</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>The page requested in unavailable. Total products for this search is only 0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC8_Valid category and refinements" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:settings/><con:testStep type="httprequest" name="Valid category&amp;sortby=customerrating"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=customerrating" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product&amp;sortby=customerrating</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>customerrating</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [customerrating]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValues( "//*:CategoryResponse[1]/category[1]/product[1]/product/summary[1]/customerrating[1]" )
log.info node.toString()

assert node != null
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=bestseller"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=bestseller" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product&amp;sortby=bestseller</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>bestseller</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=newarrival"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=newarrival" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product&amp;sortby=newarrival</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>newarrival</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [productstartdays]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValues( "//ns2:CategoryResponse[1]/category[1]/product[1]/product/summary[1]/productstartdays[1]" )
log.info node.toString()

assert node != null
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=price"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=price" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product&amp;sortby=price</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>price</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=toppicks"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=toppicks" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product&amp;sortby=toppicks</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>original</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26110305-1cf5-4811-8a66-0fd7ece64ba5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Browseproducts sorting" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="06c144db-e5ee-429a-a637-6c24d900268f"><con:settings/><con:testStep type="httprequest" name="Valid category&amp;sortby=customerrating"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=customerrating" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;sortby=customerrating</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>customerrating</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [prods sorted in customerrating]" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def customerrating = holder.getNodeValues( "//*:CategoryResponse/category/product/product/summary/customerrating" )
log.info customerrating.toString()

assert customerrating != null
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=bestseller"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=bestseller" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;sortby=bestseller</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>bestseller</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=newarrival"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=newarrival" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;sortby=newarrival</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>newarrival</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [productstartdays]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def productstartdays = holder.getNodeValues( "//*:CategoryResponse/category/product/product/summary/productstartdays" )
//log.info productstartdays.toString()

assert productstartdays != null
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=price"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=price" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;sortby=price</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>price</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=price asc"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=price asc" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;sortby=price&amp;sortorder=asc</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>price</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=toppicks"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=toppicks" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;sortby=toppicks</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>original</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26110305-1cf5-4811-8a66-0fd7ece64ba5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b88f264c-f4ed-4ced-9c5e-60e1484397e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aa0984d3-30b7-4867-a565-bb95badba25c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase></con:testSuite><con:testSuite name="14K-MT25799.15B-MT30628-v4Category-Domain Name in URL-GREEN"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4/catalog/category" searchProperties="true" id="79dbc171-546a-4490-9c70-a996e76dd131"><con:settings/><con:testStep type="httprequest" name="v4/catalog/category">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Get [categories]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def holder = new XmlHolder( messageExchange.responseContentAsXml )
	def categories = holder.getNodeValues( "//categoryresponse[1]/categoryDetails[position()&lt;=5]/id" )
	//log.info categories.toString()
	messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "categories", categories.toString().replaceAll(" ","").replace("[","").replace("]","") )
	}


</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Get [categories with url&amp;bUrl]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def holder = new XmlHolder( messageExchange.responseContentAsXml )
	def cat = holder.getNodeValues( "//categoryresponse/categoryDetails[summary/url and attributes/bUrl]/id" )
	//log.info cat.toString()
	messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "catId_domain", cat.toString().replaceAll(" ","").replace("[","").replace("]","") )
	}


</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/id" disabled="true">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/id" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/17133,118</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#domain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#categories}</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#domain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids domain">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids domain" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#catId_domain}</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#domain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids?fields=summary">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids?fields=summary" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#categories}?fields=summary</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#domain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}


</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids?fields=summary&amp;expand=parent,child">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids?fields=summary&amp;expand=parent,child" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#categories}?fields=summary&amp;expand=parent,child</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#domain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}


</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids?fields=summary&amp;expand=parent(depth(2)),child(depth(2))">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids?fields=summary&amp;expand=parent(depth(2)),child(depth(2))" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#categories}?fields=summary&amp;expand=parent(depth(2)),child(depth(2))</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#domain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}


</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?device=PC">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?device=PC" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=PC</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?device=PHONE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?device=PHONE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=PHONE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?device=TABLET">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?device=TABLET" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=TABLET</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?device=POS">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?device=POS" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=POS</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=SITE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=SITE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=SITE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=STORE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=STORE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=STORE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=JEWELRY">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=JEWELRY" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=JEWELRY</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=WEDDING_REGISTRY">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=WEDDING_REGISTRY" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=WEDDING_REGISTRY</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=SHOES">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=SHOES" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=SHOES</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?country=US">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?country=US" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?country=US</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?application=SITE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?application=SITE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?application=SITE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?application=ASSOCIATE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?application=ASSOCIATE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?application=ASSOCIATE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?application=SEO_LINK_MODULE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?application=SEO_LINK_MODULE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?application=SEO_LINK_MODULE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>145dba3e-079a-4de9-b90d-23f3cee7f745</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4/catalog/category?application=MOBILE" searchProperties="true" id="1269a2ce-8ce4-4a2d-86fa-1fae5e9d49b8"><con:settings/><con:testStep type="httprequest" name="v4/catalog/category?application=MOBILE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?application=MOBILE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//categoryresponse[1]" )

assert node != null

assert !node.toString().contains(context.expand('${#Project#domain}'))
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?application=mobile" id="1cf7c61e-d5ae-4b0e-b09d-6cfd2b1d274f">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?application=mobile" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?application=mobile</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//categoryresponse[1]" )

assert node != null

assert !node.toString().contains(context.expand('${#Project#domain}'))
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?application=Mobile" id="0e29f548-48e0-45d2-bcfb-3b6a041a1d20">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?application=Mobile" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?application=Mobile</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//categoryresponse[1]" )

assert node != null

assert !node.toString().contains(context.expand('${#Project#domain}'))
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/id" disabled="true">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/id" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/17133?application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#domain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#categories}?application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#mdomain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids domain">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids domain" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#catId_domain}?application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#mdomain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids?fields=summary">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids?fields=summary" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#categories}?fields=summary&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#mdomain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}


</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids?fields=summary&amp;expand=parent,child">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids?fields=summary&amp;expand=parent,child" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#categories}?fields=summary&amp;expand=parent,child&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#mdomain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}


</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids?fields=summary&amp;expand=parent(depth(2)),child(depth(2))">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids?fields=summary&amp;expand=parent(depth(2)),child(depth(2))" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#categories}?fields=summary&amp;expand=parent(depth(2)),child(depth(2))&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#mdomain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}


</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?device=PC">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?device=PC" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=PC&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?device=PHONE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?device=PHONE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=PHONE&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?device=TABLET">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?device=TABLET" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=TABLET&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?device=POS">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?device=POS" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=POS&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=SITE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=SITE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=SITE&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=STORE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=STORE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=STORE&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=JEWELRY">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=JEWELRY" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=JEWELRY&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=WEDDING_REGISTRY">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=WEDDING_REGISTRY" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=WEDDING_REGISTRY&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=SHOES">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=SHOES" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=SHOES&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?country=US">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?country=US" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?country=US&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?ALL">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?ALL" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=PHONE&amp;assortment=SITE&amp;country=US&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>1cf7c61e-d5ae-4b0e-b09d-6cfd2b1d274f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e29f548-48e0-45d2-bcfb-3b6a041a1d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4/catalog/category?application=MEW" searchProperties="true" id="f25b1c61-4d98-4c4e-838d-135ec6b6c47d"><con:settings/><con:testStep type="httprequest" name="v4/catalog/category?application=MEW">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?application=MEW" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  <con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  <con:entry key="force_wssgapp_traffic" value="jboss_wssgapp"/>
  <con:entry key="Accept" value="${#Project#accept}"/>
</xml-fragment>]]></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//categoryresponse[1]" )

assert node != null

assert !node.toString().contains(context.expand('${#Project#domain}'))
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?application=mew">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?application=mew" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?application=mew</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//categoryresponse[1]" )

assert node != null

assert !node.toString().contains(context.expand('${#Project#domain}'))
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?application=Mew">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?application=Mew" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?application=Mew</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//categoryresponse[1]" )

assert node != null

assert !node.toString().contains(context.expand('${#Project#domain}'))
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/id" disabled="true">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/id" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/17133?application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#domain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains Mdomain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#mdomain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#categories}?application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#mdomain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids domain">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids domain" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#catId_domain}?application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#mdomain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids?fields=summary">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids?fields=summary" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#categories}?fields=summary&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#mdomain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}


</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids?fields=summary&amp;expand=parent,child">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids?fields=summary&amp;expand=parent,child" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#categories}?fields=summary&amp;expand=parent,child&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#mdomain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}


</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category/ids?fields=summary&amp;expand=parent(depth(2)),child(depth(2))">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category/ids?fields=summary&amp;expand=parent(depth(2)),child(depth(2))" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#categories}?fields=summary&amp;expand=parent(depth(2)),child(depth(2))&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def domain=context.expand('${#Project#mdomain}')

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}


</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?device=PC">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?device=PC" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=PC&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?device=PHONE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?device=PHONE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=PHONE&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?device=TABLET">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?device=TABLET" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=TABLET&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?device=POS">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?device=POS" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=POS&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=SITE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=SITE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=SITE&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=STORE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=STORE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=STORE&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=JEWELRY">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=JEWELRY" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=JEWELRY&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=WEDDING_REGISTRY">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=WEDDING_REGISTRY" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=WEDDING_REGISTRY&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=SHOES">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=SHOES" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=SHOES&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?country=US">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?country=US" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?country=US&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?ALL">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?ALL" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?device=PHONE&amp;assortment=SITE&amp;country=US&amp;application=MEW</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [bUrl iff bId]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bIds = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bId" )

for (bId in bIds){
	def bUrl = holder.getNodeValue( "//categoryresponse/categoryDetails/attributes[bId="+bId+"]/bUrl" )
//	log.info bUrl.toString()
	assert bUrl != null &amp;&amp; bUrl.toString().contains(bId)
}




</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>1cf7c61e-d5ae-4b0e-b09d-6cfd2b1d274f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e29f548-48e0-45d2-bcfb-3b6a041a1d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>domain</con:name><con:value>http://www1.macys.com</con:value></con:property><con:property><con:name>mdomain</con:name><con:value>http://m.macys.com</con:value></con:property><con:property><con:name>categories</con:name><con:value>1001351,13668,2910,16961,16958</con:value></con:property><con:property><con:name>catId_domain</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="14K-MT29101-Browse-CATEGORY_BRAND"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CATEGORY_BRAND Categories" searchProperties="true" id="6bdf7c10-78de-4e09-97fb-b9bdc58c6574"><con:settings/><con:testStep type="jdbc" name="JDBC Request-CATEGORY_BRAND" id="d7f2d1fa-4566-486c-8648-609b5eb080c9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>com.ibm.db2.jcc.DB2Driver</con:driver><con:connectionString>jdbc:db2://${#Project#DB_Server}:${#Project#DB_Port}/${#Project#DB_Name}:user=${#Project#DB_User};password=PASS_VALUE;</con:connectionString><con:password>only4read</con:password><con:query>select CAT_ID, ATTR_VALUE from UNARY_CAT_ATTR_VAL where ATTR_NAME='CATEGORY_BRAND'</con:query><con:assertion type="GroovyScriptAssertion" name="Script-Set [First CatId with CAT_BRAND]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def catId_CATEGORY_BRAND = holder.getNodeValue( "//Results/ResultSet/Row/UNARY_CAT_ATTR_VAL.CAT_ID" )
def CATEGORY_BRAND_Value = holder.getNodeValue( "//Results/ResultSet/Row/UNARY_CAT_ATTR_VAL.ATTR_VALUE" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "catId_CATEGORY_BRAND", catId_CATEGORY_BRAND)
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "CATEGORY_BRAND_Value", CATEGORY_BRAND_Value)

//log.info catId_CATEGORY_BRAND.toString()

//assert catId_CATEGORY_BRAND != null
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [All CatIds with CAT_BRAND]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def catId_CATEGORY_BRANDs = holder.getNodeValues( "//Results/ResultSet/Row/UNARY_CAT_ATTR_VAL.CAT_ID" )
def CATEGORY_BRAND_Values = holder.getNodeValues( "//Results/ResultSet/Row/UNARY_CAT_ATTR_VAL.ATTR_VALUE" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "catId_CATEGORY_BRANDs", catId_CATEGORY_BRANDs.toString())
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "CATEGORY_BRAND_Values", CATEGORY_BRAND_Values.toString())

//log.info catId_CATEGORY_BRAND.toString()

//assert catId_CATEGORY_BRAND != null
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="httprequest" name="V4/Category" id="606571ca-48a7-4f1c-a214-38a3c58b73f9"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="V4/Category" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v4/catalog/category/${#TestSuite#catId_CATEGORY_BRAND}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [id]"><con:configuration><path>//categoryresponse[1]/categoryDetails[1]/id[1]/text()</path><content>${#TestSuite#catId_CATEGORY_BRAND}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [cB]"><con:configuration><path>//categoryresponse[1]/categoryDetails[1]/attributes[1]/cB[1]/text()</path><content>${#TestSuite#CATEGORY_BRAND_Value}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="V3/Browseproducts"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="V3/Browseproducts" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#TestSuite#catId_CATEGORY_BRAND}/browseproducts</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>${#TestSuite#CATEGORY_BRAND_Value}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="V3/Category/Index"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="V3/Category/Index" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/index?category=${#TestSuite#catId_CATEGORY_BRAND}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-GET&amp;SET ALL[brand Categories]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def CATEGORY_BRANDs = holder.getNodeValues( "//*:CategoryResponse//category/brand" )
def CATEGORY_BRAND_Values = holder.getNodeValues( "//*:CategoryResponse//category[brand]/@id" )
log.info CATEGORY_BRANDs.toString()
log.info CATEGORY_BRAND_Values.toString()

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "Index_CATEGORY_BRANDs", CATEGORY_BRANDs.toString() )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "Index_CATEGORY_BRAND_Values", CATEGORY_BRAND_Values.toString() )

assert CATEGORY_BRANDs != null
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Category's brand]" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def catId_CATEGORY_BRAND = context.expand('${#TestSuite#catId_CATEGORY_BRAND}')
def CATEGORY_BRAND_Value = context.expand('${#TestSuite#CATEGORY_BRAND_Value}')
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def brand = holder.getNodeValue( "//*:CategoryResponse/category[@id="+catId_CATEGORY_BRAND+"]/brand" )

log.info catId_CATEGORY_BRAND
log.info CATEGORY_BRAND_Value
log.info brand

assert brand.equals(CATEGORY_BRAND_Value.toString())
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [brand]"><con:configuration><path>exists( //*:CategoryResponse/category//brand)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>d7f2d1fa-4566-486c-8648-609b5eb080c9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>606571ca-48a7-4f1c-a214-38a3c58b73f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Index" searchProperties="true" id="768f37da-98da-461b-89d9-6776c02ae608"><con:settings/><con:testStep type="httprequest" name="V4/Category"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="V4/Category" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v4/catalog/category</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [cB]"><con:configuration><path>exists( //categoryresponse/categoryDetails/attributes/cB)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="V3/Category/Index"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="V3/Category/Index" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/index</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-GET&amp;SET ALL[brand Categories]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def CATEGORY_BRANDs = holder.getNodeValues( "//*:CategoryResponse//category/brand" )
def CATEGORY_BRAND_Values = holder.getNodeValues( "//*:CategoryResponse//category[brand]/@id" )
log.info CATEGORY_BRANDs.toString()
log.info CATEGORY_BRAND_Values.toString()

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "Index_CATEGORY_BRANDs", CATEGORY_BRANDs.toString() )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "Index_CATEGORY_BRAND_Values", CATEGORY_BRAND_Values.toString() )

assert CATEGORY_BRANDs != null
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Category's brand]" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def catId_CATEGORY_BRAND = context.expand('${#TestSuite#catId_CATEGORY_BRAND}')
def CATEGORY_BRAND_Value = context.expand('${#TestSuite#CATEGORY_BRAND_Value}')
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def brand = holder.getNodeValue( "//*:CategoryResponse/category[@id="+catId_CATEGORY_BRAND+"]/brand" )

log.info catId_CATEGORY_BRAND
log.info CATEGORY_BRAND_Value
log.info brand

assert brand.equals(CATEGORY_BRAND_Value.toString())
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [brand]"><con:configuration><path>exists( //*:CategoryResponse/category//brand)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>d7f2d1fa-4566-486c-8648-609b5eb080c9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>606571ca-48a7-4f1c-a214-38a3c58b73f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="application=MOBILE" searchProperties="true" id="ca450bb6-f2b0-49d0-a628-5afdbc254c87"><con:settings/><con:testStep type="httprequest" name="V3/Browseproducts"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="V3/Browseproducts" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#TestSuite#catId_CATEGORY_BRAND}/browseproducts?application=MOBILE</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>${#TestSuite#CATEGORY_BRAND_Value}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="V3/Category/Index"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="V3/Category/Index" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/index?application=MOBILE</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Category's brand]" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def catId_CATEGORY_BRAND = context.expand('${#TestSuite#catId_CATEGORY_BRAND}')
def CATEGORY_BRAND_Value = context.expand('${#TestSuite#CATEGORY_BRAND_Value}')
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def brand = holder.getNodeValue( "//*:CategoryResponse/category[@id="+catId_CATEGORY_BRAND+"]/brand" )

log.info catId_CATEGORY_BRAND
log.info CATEGORY_BRAND_Value
log.info brand

assert brand.equals(CATEGORY_BRAND_Value.toString())
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [brand]"><con:configuration><path>exists( //*:CategoryResponse/category//brand)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="V4/Category" id="ba5bf1b2-5ada-434b-ae71-860a3861e710"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="V4/Category" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v4/catalog/category?application=MOBILE</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [cB]"><con:configuration><path>exists( //categoryresponse/categoryDetails/attributes/cB)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>d7f2d1fa-4566-486c-8648-609b5eb080c9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>606571ca-48a7-4f1c-a214-38a3c58b73f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ba5bf1b2-5ada-434b-ae71-860a3861e710</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>catId_CATEGORY_BRAND</con:name><con:value>1000926</con:value></con:property><con:property><con:name>CATEGORY_BRAND_Value</con:name><con:value>CHANEL</con:value></con:property><con:property><con:name>CATEGORY_BRAND_Values</con:name><con:value>[CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, Tom Ford, CHANEL, CHANEL, CHANEL]</con:value></con:property><con:property><con:name>catId_CATEGORY_BRANDs</con:name><con:value>[1000926, 1001019, 1001020, 1001021, 1001022, 1001023, 1001044, 1001064, 1001070, 1001071, 1001072, 1001073, 1001074, 1001075, 1001076, 1001077, 1001078, 1001102, 1001103, 1001104, 1001105, 1001106, 1001107, 1001108, 1001109, 1001110, 1001151, 1001152, 1001153, 1001154, 1001155, 1001279, 1001280, 1001281, 1001282, 1001283, 1001284, 1001285, 1001286, 1001288, 1001308, 1001734, 1001777, 1002095, 1002098, 1004760]</con:value></con:property><con:property><con:name>Index_CATEGORY_BRANDs</con:name><con:value>[CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL, CHANEL]</con:value></con:property><con:property><con:name>Index_CATEGORY_BRAND_Values</con:name><con:value>[1000926, 1001019, 1001020, 1001070, 1001075, 1001279, 1001076, 1001071, 1001072, 1001073, 1001077, 1001288, 1001074, 1001078, 1001280, 1001021, 1001152, 1001281, 1001151, 1001282, 1001154, 1001155, 1001153, 1001022, 1001102, 1001103, 1001104, 1001064, 1001105, 1001734, 1001023, 1004760, 1001108, 1002095, 1002098, 1001109, 1001110, 1001284, 1001107, 1001285, 1001286]</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="15190:BCOM.PromotionBadge"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC" searchProperties="true" id="08dc6024-64e5-4ca2-a407-8ca009e198f0"><con:settings/><con:testStep type="httprequest" name="v3/catalog/category/&lt;>/browseproducts">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v3/catalog/category/&lt;>/browseproducts" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v3/catalog/category/14846/browseproducts?resultsperpage=100&amp;show=product</con:endpoint>
    <con:request/>
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion>
    
    
    
    
    
    
    <con:assertion type="GroovyScriptAssertion" name="Assert node [overrideUrl]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
//holder.namespaces["ns2"] = "http://schemas.macys.com/definitions/ps/v3"
boolean flag=true;
//def overrideUrl = holder.getNodeValues( "//*:CategoryResponse/category//summary/overrideUrl" )
def overrideUrl = holder.getNodeValues( "//*:CategoryResponse/category//overrideUrl" )
//log.info overrideUrl.toString()
for(i=0;i&lt;overrideUrl.length;i++){				
	if (overrideUrl[i].startsWith(context.expand('${#Project#overrideURL}'))){
	flag=false;
	break;	
	}	
}

assert flag !=false
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set Prod with [promotionbadge]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
//holder.namespaces["ns2"] = "http://schemas.macys.com/definitions/ps/v3"
def promotionbadge = holder.getNodeValues( "//*:CategoryResponse/category/product/product/badges/promotionbadge" )
def prodALLPromo = holder.getNodeValues( "//*:CategoryResponse/category/product/product[badges/promotionbadge]/@id" )
//def allprod = holder.getNodeValues( "//*:CategoryResponse/category/product/product [not(badges/promotionbadge)]/@id" )
//def prodOffPromo = holder.getNodeValues( "//*:CategoryResponse/category/product/product[badges/promotionbadge and not(badges/promotionbadge='Bonus Offer')]/@id" )
//def prodGWPPromo = holder.getNodeValues( "//*:CategoryResponse/category/product/product[badges/promotionbadge='Bonus Offer']/@id" )
//def prodPWPPromo = holder.getNodeValues( "//*:CategoryResponse/category/product/product[badges/promotionbadge='Special Offer']/@id" )

//log.info allprod.toString()

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "prodALLPromo", prodALLPromo.toString().replaceAll(" ","").replace("[","").replace("]",""))

//log.info promotionbadge.toString()
assert promotionbadge.size()>0
</scriptText></con:configuration></con:assertion><con:credentials>
      <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
    </con:credentials>
    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
    <con:jmsPropertyConfig/>
    <con:parameters>
      <con:parameter>
        <con:name>x-macys-webservice-client-id</con:name>
        <con:value>${#Project#clientid}</con:value>
        <con:style>HEADER</con:style>
        <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
        <con:default>${#TestSuite#clientid}</con:default>
        <con:path xsi:nil="true"/>
        <con:description xsi:nil="true"/>
      </con:parameter>
      <con:parameter>
        <con:name>x-macys-customer-id</con:name>
        <con:value>${#Project#customerid}</con:value>
        <con:style>HEADER</con:style>
        <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
        <con:default>${#TestSuite#customerid}</con:default>
        <con:path xsi:nil="true"/>
        <con:description xsi:nil="true"/>
      </con:parameter>
    </con:parameters>
  </con:config>
</con:testStep><con:testStep type="groovy" name="Promotion Products"><con:settings/><con:config><script>def productWithPromotion=context.expand('${#TestSuite#prodALLPromo}')

//log.info productWithPromotion.size()
if(productWithPromotion.size()>0){	
String[] PromoProds = productWithPromotion.split(",")

for (int i=0; i&lt;PromoProds.length; i++){
	testRunner.testCase.setPropertyValue( "Promo_Prod", PromoProds[i] )
//	testRunner.testCase.setPropertyValue( "giftseqance", seqary[i] )
	testRunner.runTestStepByName( "v4/catalog/search?searchphrase=")
}
}

</script></con:config></con:testStep><con:testStep type="httprequest" name="v4/catalog/search?searchphrase=">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/search?searchphrase=" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v4/catalog/search?searchphrase=${#TestCase#Promo_Prod}</con:endpoint>
    <con:request/>
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion>
    
    
    
    
    
    
    <con:assertion type="XPath Match" name="Check for existance of [promotionbadge]"><con:configuration><path>exists( //searchresponse/searchresultgroups/products/product/badges/promotionbadge)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check count of [promotionbadge]" disabled="true"><con:configuration><path>count( //searchresponse/searchresultgroups/products/product/badges/promotionbadge)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
      <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
    </con:credentials>
    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
    <con:jmsPropertyConfig/>
    <con:parameters>
      <con:parameter>
        <con:name>x-macys-webservice-client-id</con:name>
        <con:value>${#Project#clientid}</con:value>
        <con:style>HEADER</con:style>
        <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
        <con:default>${#TestSuite#clientid}</con:default>
        <con:path xsi:nil="true"/>
        <con:description xsi:nil="true"/>
      </con:parameter>
      <con:parameter>
        <con:name>x-macys-customer-id</con:name>
        <con:value>${#Project#customerid}</con:value>
        <con:style>HEADER</con:style>
        <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
        <con:default>${#TestSuite#customerid}</con:default>
        <con:path xsi:nil="true"/>
        <con:description xsi:nil="true"/>
      </con:parameter>
    </con:parameters>
  </con:config>
</con:testStep><con:properties><con:property><con:name>Promo_Prod</con:name><con:value>90665</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>de0ca815-3502-4d30-a73a-d72138b8c6a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>prodALLPromo</con:name><con:value>1399396,1333674,1060364,611388,1427808,1419959,454109,1399401,1399399,1361695,1361688,1419958,1115683,454104,451976,443188,1399395,705453,703858,1399398,1361691,454108,1402077,1278066,440797,440792,1399400,1399397,862627,1340714,1160474,639294,1405771,1382166,850467,117959,1340514,942311,440731,1361696,1361694,1361692,1361690,1361689,1115985,697758,684503,457733,103255,806064,610276,545048,452403,844352,493625,108384,87749,876542,740014,90665</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="C2-Encoding_Issue-GREEN"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="C2_Encoding-v3/browseproducts" searchProperties="true" id="0b73774b-ab80-42e0-9cac-59530e264cbc"><con:settings/><con:testStep type="httprequest" name="v3//browseproducts-C2-Encoding_Issue-1" disabled="true">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v3//browseproducts-C2-Encoding_Issue-1" id="ea96604a-a6c7-45b6-a5ca-1df5a7a70911" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:encoding/><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_C2}/browseproducts?show=facet</con:endpoint>
    <con:request/>
    
    
    
    
    
    
    
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Check for existance of [@resultsperpage]">
      <con:configuration><path>exists( //*:CategoryResponse/@resultsperpage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Check for existance of [@currentpage]">
      <con:configuration><path>exists( //*:CategoryResponse/@currentpage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Match content of [@totalresults]">
      <con:configuration><path>//*:CategoryResponse[1]/@totalresults</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Match content of [category/@id]">
      <con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#TestSuite#catId_C2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/summary/categorypageurl]"><con:configuration><path>exists( //*:CategoryResponse/category/summary/categorypageurl)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/summary/mobilePublish]"><con:configuration><path>exists( //*:CategoryResponse/category/summary/mobilePublish)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/parentcategory]"><con:configuration><path>exists( //*:CategoryResponse/category/parentcategory)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/parentcategory/summary]"><con:configuration><path>exists( //*:CategoryResponse/category/parentcategory/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>exists( //*:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Get&amp;Set [Refinement Count]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def refinement_BRAND_Value = context.expand('${#TestSuite#refinement_BRAND_Value}')
facet_Value_Exp=URLDecoder.decode(refinement_BRAND_Value,"UTF-8");

log.info facet_Value_Exp

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def refinement_prodCount = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/facet[name='BRAND']/value[name="+facet_Value_Exp+"]/productcount" )
//"+facet_Value_Exp+" ->Lladró

log.info refinement_prodCount.toString()
//assert refinement_prodCount != null
//assert facet_Value_Act.equals(facet_Value_Exp)</scriptText></con:configuration></con:assertion><con:credentials>
      <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
    </con:credentials>
    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
    <con:jmsPropertyConfig/>
    <con:parameters>
      <con:parameter>
        <con:name>x-macys-webservice-client-id</con:name>
        <con:value>${#Project#clientid}</con:value>
        <con:style>HEADER</con:style>
        <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
        <con:default>${#Project#clientid}</con:default>
        <con:path xsi:nil="true"/>
        <con:description xsi:nil="true"/>
      </con:parameter>
      <con:parameter>
        <con:name>x-macys-customer-id</con:name>
        <con:value>${#Project#customerid}</con:value>
        <con:style>HEADER</con:style>
        <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
        <con:default>${#Project#customerid}</con:default>
        <con:path xsi:nil="true"/>
        <con:description xsi:nil="true"/>
      </con:parameter>
    </con:parameters>
  </con:config>
</con:testStep><con:testStep type="httprequest" name="v3//browseproducts-C2-Encoding_Issue">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v3//browseproducts-C2-Encoding_Issue" id="ea96604a-a6c7-45b6-a5ca-1df5a7a70911" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_C2}/browseproducts?${#Project#refinement_BRAND}=${#Project#refinement_BRAND_Value}</con:endpoint>
    <con:request/>
    
    
    
    
    
    
    
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Check for existance of [@resultsperpage]">
      <con:configuration><path>exists( //*:CategoryResponse/@resultsperpage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Check for existance of [@currentpage]">
      <con:configuration><path>exists( //*:CategoryResponse/@currentpage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Match content of [@totalresults]">
      <con:configuration><path>//*:CategoryResponse[1]/@totalresults</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Match content of [category/@id]">
      <con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId_C2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/summary/categorypageurl]"><con:configuration><path>exists( //*:CategoryResponse/category/summary/categorypageurl)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/summary/mobilePublish]"><con:configuration><path>exists( //*:CategoryResponse/category/summary/mobilePublish)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/parentcategory]"><con:configuration><path>exists( //*:CategoryResponse/category/parentcategory)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/parentcategory/summary]"><con:configuration><path>exists( //*:CategoryResponse/category/parentcategory/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>exists( //*:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/product/product/summary]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/product/product/image]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/image)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/product/product/price]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/price)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/product/product/category]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/category)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/product/product/badges]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/badges)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/product/product/@id]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/@id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Product/reviews]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def products = holder.getNodeValues( "//*:CategoryResponse/category/product/product/@id" )
for (product in products){
	def totalreviews = holder.getNodeValue( "//*:CategoryResponse/category/product/product[@id="+product+"]/summary/totalreviews" )
	def customerrating = holder.getNodeValue( "//*:CategoryResponse/category/product/product[@id="+product+"]/summary/customerrating" )
	if (totalreviews != null &amp;&amp; Integer.parseInt(totalreviews)>0){
		assert customerrating != null	
//		log.info 	customerrating.toString()
	}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Only available Products Returned]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def Products = holder.getNodeValues( "//*:CategoryResponse/category//product/product/@id" )
//log.info Products.toString()
for (product in Products){
	def Product_available = holder.getNodeValue( "//*:CategoryResponse/category//product/product[@id="+product+"]/summary/available" )
//	log.info Product_available
	assert Product_available.toString().equals('true')
}
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [refinementName]"><con:configuration><path>//*:CategoryResponse[1]/inputRefinements[1]/refinementName[1]/text()</path><content>${#Project#refinement_BRAND}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [refinementValues]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def refinement_BRAND_Value = context.expand('${#Project#refinement_BRAND_Value}')
facet_Value_Exp=URLDecoder.decode(refinement_BRAND_Value,"UTF-8");

//log.info facet_Value.toString()

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def facet_Value_Act = holder.getNodeValue( "//*:CategoryResponse[1]/inputRefinements[1]/refinementValues[1]" )

assert facet_Value_Act.equals(facet_Value_Exp)
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [totalproducts>0]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def totalproducts = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/totalproducts[1]" )
//log.info Integer.parseInt(totalproducts)
assert Integer.parseInt(totalproducts)>0
</scriptText></con:configuration></con:assertion><con:credentials>
      <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
    </con:credentials>
    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
    <con:jmsPropertyConfig/>
    <con:parameters>
      <con:parameter>
        <con:name>x-macys-webservice-client-id</con:name>
        <con:value>${#Project#clientid}</con:value>
        <con:style>HEADER</con:style>
        <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
        <con:default>${#Project#clientid}</con:default>
        <con:path xsi:nil="true"/>
        <con:description xsi:nil="true"/>
      </con:parameter>
      <con:parameter>
        <con:name>x-macys-customer-id</con:name>
        <con:value>${#Project#customerid}</con:value>
        <con:style>HEADER</con:style>
        <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
        <con:default>${#Project#customerid}</con:default>
        <con:path xsi:nil="true"/>
        <con:description xsi:nil="true"/>
      </con:parameter>
    </con:parameters>
  </con:config>
</con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="v4/catalog/visualsearch-MCOM.Only-GREEN" id="f5898f32-bc3c-400b-92bf-f4903fb626e9">
  <con:settings/>
  <con:runType>SEQUENTIAL</con:runType>
  <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4/catalog/visualsearch" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5b47cdf3-8c0d-40ea-a6fc-01a428316058">
    <con:settings/>
    <con:testStep type="httprequest" name="POST image-search" id="3ac49357-032a-47e5-898f-423f3611d462">
      <con:settings/>
      <con:config method="POST" xsi:type="con:HttpRequest" name="POST image-search" postQueryString="true" mediaType="multipart/form-data" id="2833fe2a-2b54-4750-80b8-2817a6996e6a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
      </con:settings>
        <con:endpoint>${#Project#endpoint}/v4/catalog/visualsearch</con:endpoint>
        <con:request/>
        <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4acfebe1-167c-4989-9738-b28b461c0e16">
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="Script-Set [searchId, totalProducts]" id="f8489621-98ff-41bd-8e44-80bcdf6f2dcf">
          <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def searchId = holder.getNodeValue( "//visualsearchproductresponse/searchId" )
def totalProductCount = holder.getNodeValue( "//visualsearchproductresponse/totalProductCount" )

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "searchId", searchId )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "totalProductCount", totalProductCount )
</scriptText></con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="Assert node [facetValue]" id="29934dba-ee74-4a90-b455-8e2065b05f9f"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def facetName = holder.getNodeValue( "//visualsearchproductresponse/facets/facet/facetName" )
def facetValue = holder.getNodeValue( "//visualsearchproductresponse/facets/facet['facetName']/facetValues/facetValue/facetValue" )
def facetValueproducts = holder.getNodeValue( "//visualsearchproductresponse/facets/facet['facetName']/facetValues/facetValue/productCount" )

//log.info facetName.toString()
//log.info facetValue.toString()
//log.info facetValueproducts.toString()
facetValue1=URLEncoder.encode(facetValue,"UTF-8");
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "facetName", facetName )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "facetValue", facetValue1 )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "facetValueproducts", facetValueproducts )

assert facetValue != null
</scriptText></con:configuration></con:assertion><con:credentials>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:attachment>
          <con:name>Macys.jpg</con:name>
          <con:contentType>image/jpeg</con:contentType>
          <con:size>4380</con:size>
          <con:contentId>Macys.jpg</con:contentId>
          <con:data>UEsDBBQACAgIAEZtxUQAAAAAAAAAAAAAAAAJAAAATWFjeXMuanBntVdXUBOAlg2GJj0ICAiIBKWjSC+hSCcgoEQEYhSDSJFmpIZmkKrSNKggLZTQQq9BQIogRRQIxNCV3oICoUVgfftm3r7Z3Z/92HPvnJnb78f9uSffT2YBPBYm5iYABgYGgNlfAZxMAJ4BgKdO/UP/gvGvMrEyMTEyMrGxsDCzcrBxcLCzsbNzcvHycHKBuNjZeQR4QGf4+Pn5ObjPCgrwCfLy8fMxAP/mMzKdZmI6zcfJzsn3f8bJRwCIFdALyAcySABOgRiAIIaTLkAMgAEAYPnHqv8CAyMTMwvr6VNANh4AAxB4CsjIzMTKcvo/Q4C/FhPob5j3whklA9vTEs5+T1P4rt7IreIXOAu+j3w8LKh8zQiFaxe6dNMOE52K7fj3zv8E6H94TsYBHMC/vUFAEEAPsJouIS4hcer/j6Q123NS9YHFUu3mBmH1o9bf230L0h/N1SQGNM2I21j/L1UFd1UvCmS73M9pNV/QSEhn3u6Xyjo3r2P+UUxSvARXI7d3jeIj9e5noGrTE9+QBfzn5uYFrAti/zWuHrVrdyV15rTH+HC4oEE6tqD5XIYrpYXY5qn9Z+plyZDlarxv2MMU2u0Zz0TAXpmM7Sd6u4Q27Mru7qcZzGib2RJoa+26cIn88EiPmZwiiPkt3CDYB4FomWPqEevi/5Iz/qVv58WEyyShn2xPOFev6n+jBzms5YGyXI17u9VjDj5MRNxbnI/ldbTWZ9A0aRgyqFHMlyCjxm5B43yK/fJbNfrIQRqxtbW0XSZcM2RFbYx+uU7Y09vrVr9CVmqPOaV+LjA/C4dDPNTcB1XGpLwROfPihRz+iOD0jkmfq40CTH/s4FDoghRdv/jqLHc4z8MWGaLTy4/hf26r9Tym2Y2vedPkRNb4D8tA2ppwYJ6vZFrL+y+fGevav3SztyDiRkjGMEZUJ/hSjElstdmkCFnlBYZ1k1Hx9O+73d6FP0uyTWBwr7HxiC9anXKKAnGFLpfMLYOl6la1ugYY5lGzROPc/aIPlB3FTFxhzPi+jNt9PHIeOYkYU38tEntvB9jEvCQxqu1z1r734kIRrgbS1r3/ddqi7ckSb8odkbFRp+J2va1R+NIvvQSO6YT+I9nxl3W038Y3Ydasi8UPVMLKdjZ+B8c3odJ1goFxW/aqaXsGRRsqDdp3XNTZw24yJtuNfICkquxjeP51MfhpGlOF5YSst/pzrGjJjOXgcAhxhcJhq76hSRVXQZs7FqyAp1ucatBehczvilInrEKaiImtCwwSZulgRRevwN3gzwHWEaVJvLV6UA+W32cujph6hEV4D99KeB5aA0W1kVRuvumJ7RHiQpsvBrlpaHabMe5cIEMvHWxQC2vY67IdHRR3e+zC+OsCDseszxV89hGXl5JSdFtZrGtwoEaHGfdtI1ber2a8KKjChN2WuW2WcAXSggjtJ+4rum+kLX6qJ28QR2ZeS2d640ZJFeVpU+BMKznGQe6U/EioVt3HZG79hkO8JWzqMlZpcDOvnW8QmR8RwPBrX7xATW66umR96qbO7HtmlJjtLyq7uHu5WEGRp2QZ5O3makmAKDJvl5pEzlIfYLEXy8f6rIbLbSi9UUtFRDVGPRMyGa0iBkQTNvpFNnlunZ2jx6yK9vxIq1eQMpL1GZN7pu7aDgwuTGOOvepalbfG0/MG2ZPiGKgrD52kOnSatjiN/La3IW+b2jn++EkW7wpV+xVb+/6al78ODD3iNxKyGBPsXFoNz7QG30MijK678G41M33AKwRcNesxTiGEx7OrEhfHxzfoeakpFahetdvsmdnKklSfAX4LwhRn5ShtdFR4W9/R33ABrxCDX95IxGkGP+VaAkoiNfvSYjY7UY6Lx7G54VDWDc9LEQHsMeyVykngROR8lIifZmUAG2fHSEZgPXG62b9cefgVzKyTr3Louosn0u2RuOl5ZWj8SlrMfFZpYbpy7NGZArU16EpgfXZ97cS9/He/39cNq0a9T3IOuPVqQr3f0q1vvKgWgkmCOsI3Rw2gQCFxnw1NAmPJJz2+OgXfSzm0bWm11oNO1YRZstbU7e/Z08y3ZEbRLBHDH7YNhUqi8TpDe6XClE/vkyEfRiHKu2mWw5OICY9gcElmItdycOI19qu95RUhiHqJcWKcSzTFDZ3oaJoWkoT5kiH1gU+txcquDz8yIU9W679p983wAr7E7fKTnEAVs28/1++hOPaxD1dLWvib/N65yyIb4HCIgwNNJKxUdOJHthHC06VZJdwqv2GMZHd9xlGZ3T3/IoXeKq2+iIevEGXThUNeGnjiiyp8VCVvjHWTSVxRSpj1Rn9RyibsU4dontq0zKMJH5xq2OGoW/rkigwlpIWkq8RoqFsKJ6u8Sf58YODL+DRVoMdpv2hS9B1J/Y6cL2kYXlANg+rLwo+HZQu7qbeufzNf3o1cDx/j8TcQuPKjJvDBjGhOjQdlhUmSppgmJDxTsmd6wRkdFvtGT8XgFYngNZg2I5JUVJSo+CWayhXEAnDZ2WPqF2p8tYO5s3pJpRlORyMV+8/hNU0t94QQwa1CfZ+UDm2oJOGAQvLjb7Wqo/581IJSVMl8TG7SvPziooIfF0uxqFbOJOcJYIZQ8bPm/qbwYy8/XFkVucPD7Zw/cRdmRwNp7Lpsx6iWSwrsLALfvsB+zniJI2K3DGz1PBZFUN3rVdPfTK9xh+R88cM1OrkXX0KDH8l3Pah6UQMxO5wKKU2ynMopw3k10azSHcOrILMqRN1jxPYUeTYsTkGOUO8RfC8ouW5hlkVzMjd/T2QfTbZUq3ixptg6JEDXXftm/7yA79SL1S8ycuflo6PeKHeEOaBbm6+aAfEJ354vJMPL/F++4N2nDH7T7hW1W5xZ9VA3l3yiYjJxzekcOH5E6HRKVS2kK1m3pno9CIVsZ965++Q6Zmz73ZMZ0KG3+DEu45ZNvycaEk0VPx/Oz4yPJhjeCt5wyq4bxyhu0cPxnvFi3Wm0A4JLWcXGU0GWaUIf/Q6/Yf983lPqtlLtCQDH+baI4pSpgFp5WIFLdxW7gSymcTd1AcI9agw7FcuI1y7mNrTDB1xYy6/M/2HvIMUtO3DTwFXniRfbMHSgY4e2dvSTe4GPYZ/1WMTHPaiCgdekQNCcUpejuVLxBXpW8fUfUUG3fy65szXGJqfyshyMET/5thjTLgc6J8k9mxkoZMaRrETybKcjd+Guxy7nGI6EA+/qtmYqRTyHASPOFvV2Iha6pt3dvH4BtHYbLJyTYt2xkVy5JO8eem+I3p5Q27sQ9Yw1YrMNQjRb+8XMQNQ9hT9K3g/GXD+ZTUCzlh4v0DY4v9Z14ppm2hPXnER64LRLUyufrcOsyDeYVfO+ciLTSswhDzz9bt5xuKFjNHpDT+9qSRqblpkY99DPJbpxZHY6J6FmPbrB6vr5kkbsiEqVMWl4OUFGMbWXLmH5Az/uaBfLg54zxAco27ll1uS0kG5OFSP6X9JtLClUf1+Gd4bIe/MYceB7P9JTkjo7j+NaxhkTVreO/knt6tEDbvSe9g3b6mbLFVEpmEfCabihh6ccWGlX/6CpMYkywSiMqtcOog8mJ7QMKlztO7YMS/bbx1Q85xpb5bQt8nJ83H0X0rd0o8/McSirXGMQElXSVAv3dQ+76FHfJ0xxL06X7PELFoqYtpg+AZiK9RJnZRvub5pTPkm5mzonmtDkv8rXnedlP0eNqGL+6cU1OeQl9n2FIKofXFy2YzuCOgF0BQmhTwCrwahW6QpGA46y4JKgJ+OZfqi0uaKACXMElbex1YJIV1AZMbMORk12mO9hk6Ps2K/zOK8EaXyP57pbKyyn2y+q8UewOFCXLeDUD0OYWUAD1FY4Lpt7WHpjqFMl9GOiKyRPwffrNe00z6zMYWCs7B1Y1ebXimciPNOEohbfpWbyFBMana3ATncUJnOwrarPd175taqlEaRZLsZ20yfCqHLFcyHp9jhVDWJobyOroDWMKXG4UEA9sjJWDA42GBRjsfnJpYQdqTCr4MxD7xY0PLdkONy2qKKpkWtDaE+OtoazdZ4OzIwLHg/PESDfYTfma7BzuSwfQNNs7G9sPGQhl9Gpo7aBOS1KLz3foWo/9DISINNj2UqzrfKk17DgQ52pKuDFMqau0FPV5V0kE2SiWuWSeCWg2p7lzZ474aCqE/wcWb5YCO7MWGvYfDiNeXXg93qJ7DJwrIHQGzLySJfQGhw7AZw1poCJ1NRLqkfPe6QFQ6304m5seXPKd5LrJ1yOZaUz9+tYRCO0CBvHtPNtsmC7iSkSrOcEkLpGr3tZvKRYRUmC0+o/RhyY0bxeiYf7OOjRfCMkuAw4rYyoqzGhZEo6Bjv7eEA0W9xi3Vi3rs44cbDXzfkoIxT8y6PElmoM0W5/wM/4cFcGLHgCkOVS7fTj5Yjp71+iaJ/HvHfNz6n7UF9OFHY/h0GmfA/aDyyvp5Y3edGt6t91CChVLOmk1DX2JOk3tjWqbw6LLa9CafpL/P7DWkr0+qxbEdhcZt9xZkd1j+27Rkd+94cE0E8epRFpEUUg5u4lUBxY42pb7krKbDXXCcDHO7l0Aqo7+KjLP89LAYZZCCD5D6VZFcuNG3hGip8R9OWSfJraDQDck3JUuJ5XmCA9BQVmTS8JOlp/ZVvBhDRPPeCsnrFS6JhzUJZxW571UV7ELnEgTeMlc/rhqo++zMUrfG1w10LJqxVyFyC8OY83LFgX2+k+uqVheMjH8vGVNaY2i9uEXU8rySdqfaxCVlZWPJ3IlznMtaGnOnVEf01YdXqPDE/IGvkLly/026MJzoy6j7WMRnbBLK+Ds5BHBZnJIBBDqMvr2orqX8vtBnIK5gw3ZS+mdP3okq0ltU/1mZOevRYwya8fhSMvlPfH2qCi+48VIKKOqz8a+Q9rHj0ikeXCpqbqvAqwoI7DEExYYKVG5G3qn4fir35Ej60sh3bgoR5ckM8aCrCP2Ty1OW+8vqDaOovxfvT8u2HNP9TRO4XL7hkFtyYRsw8Uuk8XvO6eNqnUQaXOrofBy9f77yP/nG0ff1DRbWKCeib83Bq3yXtqxW0htmI0qJ3Nn6j2QZ1ZKjRtrNni2nF0ZMWrWhcWvKuumapzulplc5n3gUzacnrr8QAh0zU+VnO9p9dK2bg9abWnl7nSNE92EBDf9yCda/Z3mtE6PW3QOE+c5TB3CybsJQNkPXIKN1N5jgrYdrLKvwyiPILZW+wNDfQFFX9cvCrAM72lY69N0OH2OxuJHPecix1HI13Dvdl3GPhTWXtMnlLZXNnUOq4obxu0p+syB71GR2XUkuWPt0qwUZtYn8t5nZFH1vXCGK/uKbSXqgAOP6AGlca+Sr9ict4W/BaKvsYtpy8FlMoFi7J5+mr3JbDi/vlMsIKwszUlhxKnH3aImMv9XPXFQ+1j6xhT8D6pcYVs954BWXXvZ7ZCv+HdNDsOVUNYddQEDi47RwZJR/PxcCCibESko16DjIwYjfT/ixDwqy0S3PEeWwZMYU32qaTzqmKlZNkkWW5ZsOZ1GM8VjOYqTpukhF1m/LdKY8AVXGRcHGtcZFzuMyZgkiovn6aNAV/wTSxD6fB2X96z/z7lf6fzJ5T/AFBLBwixQM4YXRAAABwRAABQSwECFAAUAAgICABGbcVEsUDOGF0QAAAcEQAACQAAAAAAAAAAAAAAAAAAAAAATWFjeXMuanBnUEsFBgAAAAABAAEANwAAAJQQAAAAAA==</con:data>
          <con:id>217793cb-cda5-40f2-b509-081501afe06d</con:id>
        </con:attachment>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:parameter>
            <con:name>categoryId</con:name>
            <con:value>5449</con:value>
            <con:style>QUERY</con:style>
          </con:parameter>
          <con:parameter>
            <con:name>device</con:name>
            <con:value>PHONE</con:value>
            <con:style>QUERY</con:style>
          </con:parameter>
          <con:parameter>
            <con:name>appVersion</con:name>
            <con:value>1.0</con:value>
            <con:style>QUERY</con:style>
          </con:parameter>
          <con:parameter>
            <con:name>imageData</con:name>
            <con:value>file:Macys.jpg</con:value>
            <con:style>QUERY</con:style>
          </con:parameter>
        </con:parameters>
      </con:config>
    </con:testStep>
    <con:testStep type="httprequest" name="GET id-search by Id" id="8cc61ce3-2c8e-480c-97ee-35e7d2e9dbc9">
      <con:settings/>
      <con:config method="GET" xsi:type="con:HttpRequest" name="GET id-search by Id" postQueryString="true" mediaType="multipart/form-data" id="b7907044-dde3-4748-8f56-4c9f6506f4eb" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
      </con:settings>
        <con:endpoint>${#Project#endpoint}/v4/catalog/visualsearch?searchId=${#TestSuite#searchId}</con:endpoint>
        <con:request/>
        <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="318aa250-0097-468a-976f-d2887ccd0876">
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [searchId]"><con:configuration><path>//visualsearchproductresponse[1]/searchId[1]/text()</path><content>${#TestSuite#searchId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [totalProductCount]"><con:configuration><path>//visualsearchproductresponse[1]/totalProductCount[1]/text()</path><content>${#TestSuite#totalProductCount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          
        </con:parameters>
      </con:config>
    </con:testStep>
    <con:testStep type="httprequest" name="GET id-search by Id with Facet" id="ce99837d-8f5b-4ac4-b9e9-e6f18e8e212c">
      <con:settings/>
      <con:config method="GET" xsi:type="con:HttpRequest" name="GET id-search by Id with Facet" postQueryString="true" mediaType="multipart/form-data" id="d35ba0fc-efef-40b0-b6f9-4eefde2f5517" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
      </con:settings>
        <con:endpoint>${#Project#endpoint}/v4/catalog/visualsearch?searchId=${#TestSuite#searchId}&amp;${#TestSuite#facetName}=${#TestSuite#facetValue}</con:endpoint>
        <con:request/>
        <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="798b979e-9483-4b7e-9cfc-f2f659653035">
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" name="Match content of [totalProductCount]"><con:configuration><path>//visualsearchproductresponse[1]/totalProductCount[1]/text()</path><content>${#TestSuite#facetValueproducts}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          
          
        </con:parameters>
      </con:config>
    </con:testStep>
    <con:properties/>
    <con:reportParameters/>
  </con:testCase>
  <con:properties>
    <con:property>
      <con:name>searchId</con:name>
      <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1306404</con:value>
    </con:property>
  <con:property><con:name>totalProductCount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4</con:value></con:property><con:property><con:name>facetName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FOB</con:value></con:property><con:property><con:name>facetValue</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Jewelry+%26+Accessories</con:value></con:property><con:property><con:name>facetValueproducts</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2</con:value></con:property></con:properties>
  <con:reportParameters/>
</con:testSuite><con:testSuite name="Review- Incomplete" id="e3f328ac-d97c-4a2f-97bf-a038125b1ffa"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v3/catalog/review" searchProperties="true" id="fac34b62-125f-4d5e-8795-47af2b410452"><con:settings/><con:testStep type="httprequest" name="Search-set product" id="210da0ea-8b44-4acc-854a-ef5c8f80a7b6">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="Search-set product" id="9307d3a7-014b-4a6a-a165-082408a0ed0f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/search?searchphrase=Lips</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="083a5bdf-1fad-4977-9bff-3b410447aaa5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [@id]" id="5b656034-ffa1-4677-951a-575775f0a005"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def prodId = holder.getNodeValue( "//searchresponse[1]/searchresultgroups[1]/products[1]/product[summary/iscollection='false']/@id" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "prodId", prodId)
assert prodId != null
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v3/catalog/reviewtemplate-incomplete" id="20af7790-4219-44b4-87d6-068dea1665e7">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v3/catalog/reviewtemplate-incomplete" id="5e1ed8cf-bee2-448a-9be2-feb9c640a277" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/reviewtemplate/${#TestSuite#prodId}</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b128b88f-0937-42dd-9545-e155099c7864"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [productId]" id="2a620c5f-56fc-4091-9e48-2c2d90b243fe"><con:configuration><path>//reviewTemplate[1]/productId[1]/text()</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [FieldsOrder]" id="3d8253e9-09d1-4da6-8f4e-c0921a1bee8f"><con:configuration><path>//reviewTemplate[1]/FieldsOrder/text()</path><content>title</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [FieldsOrder]" id="96dbea87-c3ee-4dc7-a0cb-ea1bb725ed05"><con:configuration><path>//reviewTemplate[1]/FieldsOrder/text()</path><content>reviewtext</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v3/catalog/reviewtemplate-logged in" id="7152504c-c4e7-455e-8e57-8f6fd21fb1ad">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v3/catalog/reviewtemplate-logged in" id="11edaa31-02e6-49ff-819c-33a3efd19c0d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/reviewtemplate/${#TestSuite#prodId}?userid=8d89ab77dbd3678fe28a614da80af2f138343436333536323435&amp;checkduplicate=true</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="0754d8bc-af81-49e5-b394-a4cac1957ec9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [isDuplicate]" id="c37e1e68-e7dd-4945-8f44-7259b0d48e72"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def isDuplicate = holder.getNodeValue( "//reviewTemplate/isDuplicate" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "isDuplicate", isDuplicate)
assert isDuplicate != null
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="Submit Review" id="70365777-14c7-4a8f-8cc9-e6bae4e5f348">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="Submit Review" postQueryString="false" mediaType="application/json" id="a3057511-c748-46cd-9fbc-7703796d62cd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/reviews?productId=${#TestSuite#prodId}</con:endpoint>
          <con:request>{
    "reviewSubmit": {
        "reviewerId": "8d89ab77dbd3678fe28a614da80af2f138343436333536323435",
        "displayName": "WSSGTester",
        "reviewSubmitAttributes": [
            {
                "attributeName": "Title",
                "attributeValue": "Myreviewsubmittitle"
            },
            {
                "attributeName": "Rating",
                "attributeValue": "4"
            },
            {
                "attributeName": "reviewText",
                "attributeValue": "dasas2323dasasa423423232323232sdsdsdsdsewewe23223232332323232sdsdsdsdsdsdsdsd"
            },
            {
                "attributeName": "isrecommended",
                "attributeValue": "true"
            },
            {
                "attributeName": "netpromoterscore",
                "attributeValue": "10"
            },
            {
                "attributeName": "contextdatavalue_Purchase",
                "attributeValue": "InStore"
            },
            {
                "attributeName": "agreedtotermsandconditions",
                "attributeValue": "True"
            }
        ]
    }
}</con:request>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="112d7273-a17d-42f9-aabb-66c78fc91d9f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]" id="72deb1df-1c6a-4ec1-a555-bd47226dfe75"><con:configuration><path>//productReviewsPOSTResponse[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="Copy of v3/catalog/reviewtemplate-logged in" id="a7acb032-69ab-4ccf-9ee1-4c7e07b44dc4">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="Copy of v3/catalog/reviewtemplate-logged in" id="cca772b2-aca5-4837-bf57-8b65f9a43398" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/reviewtemplate/${#TestSuite#prodId}?userid=8d89ab77dbd3678fe28a614da80af2f138343436333536323435&amp;checkduplicate=true</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="32425dc3-f912-4778-a4ee-312aa9e132cb"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [isDuplicate]" id="771569d5-7337-42e3-9ec4-7e07228ab8a4" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def isDuplicate = holder.getNodeValue( "//reviewTemplate/isDuplicate" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "isDuplicate", isDuplicate)
assert isDuplicate != null
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Copy of Encoding userid" id="6c95ad33-f5b1-48a5-a244-dff3102658d2" disabled="true"><con:settings/><con:config><script>import java.security.*;
import java.math.*;
import org.apache.commons.codec.binary.Hex;

def user = context.expand( '${#TestSuite#authorid}' )
def secret_key = context.expand( '${#Project#secret_key}' )

String contentRecievedInRequest = user
String yourSecretKey = secret_key
String claimedContent = user+secret_key
String certificate = '3df5786adfe37430d8a8d72cb9e7fe56c'
MessageDigest md5 = MessageDigest.getInstance("MD5");
md5.update(claimedContent.getBytes());
BigInteger hash = new BigInteger(1, md5.digest());

String hashFromContent = hash.toString(16);
//log.info hashFromContent

def bytes = user.getBytes()

StringBuffer result = new StringBuffer();
for(byte byt : bytes)
{
    result.append(Integer.toString((byt &amp; 0xff) + 0x100, 16).substring(1));
}
//log.info result.toString();

//log.info hashFromContent+result.toString();

testRunner.testCase.setPropertyValue( "enc_user", hashFromContent+result.toString() )
</script></con:config></con:testStep><con:testStep type="httprequest" name="Copy of Submit Review" disabled="true">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="Copy of Submit Review" postQueryString="false" mediaType="application/json" id="a3057511-c748-46cd-9fbc-7703796d62cd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/reviews?productId=1914670</con:endpoint>
          <con:request>{
    "reviewSubmit": {
        "reviewerId": "ccf8f6ec4a486cd80f2004d10d2b5f5332313537383132383434",
        "displayName": "mynicknamewssg",
        "reviewSubmitAttributes": [
            {
                "attributeName": "rating",
                "attributeValue": "3"
            },
            {
                "attributeName": "title",
                "attributeValue": "Partner Connect Quality Assurance"
            },
            {
                "attributeName": "reviewtext",
                "attributeValue": "my review for testiung\r\n\r\nT%22%3A%5B10%2C71%2C221%2C22%2C112%2C13%2C156%2C153%5D%7D; mt.v=2.880196397.1406739969674; first_visit=1; _msuuid_qljqreuvj0=16B19F87-3B11-4A74-898F-9C77FC8F2623; shippingCountry=US; mt.urlQuery=(cm_sp:us_hdr-_-juniors-_-35786_jackets-%2526-vests"
            },
            {
                "attributeName": "isrecommended",
                "attributeValue": "true"
            },
            {
                "attributeName": "netpromoterscore",
                "attributeValue": "5"
            }
        ]
    }
}</con:request>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="112d7273-a17d-42f9-aabb-66c78fc91d9f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]" id="72deb1df-1c6a-4ec1-a555-bd47226dfe75"><con:configuration><path>//productReviewsPOSTResponse[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>210da0ea-8b44-4acc-854a-ef5c8f80a7b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>prodId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1392209</con:value></con:property><con:property><con:name>isDuplicate</con:name><con:value>false</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Search - Incomplete" id="f929579a-e8da-4c89-abb1-ade9bcc55b81"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4/catalog/search" searchProperties="true" id="b0346c50-8bb7-4ac1-ae28-8804e2c8a48b"><con:settings/><con:testStep type="httprequest" name="v4/catalog/search" id="6dbfe7e0-5799-416b-ac22-f1b48f656d41">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/search" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/search?searchphrase=Lips</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/search&amp;expand=stores">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/search&amp;expand=stores" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/search?searchphrase=lips&amp;city=Deptford&amp;state=NJ&amp;expand=stores</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [stores expanded]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def bops_stores = holder.getNodeValues( "//searchresponse/facets[facetname='UPC_BOPS_PURCHASABLE']/facetvalues/value" )
def locationNumber = holder.getNodeValues( "//searchresponse/stores/locationNumber" )
//log.info bops_stores.toString()
//log.info locationNumber.toString()

for (stores in bops_stores){
	assert locationNumber.contains(stores)
}
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v3//browseproducts&amp;expand=stores">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v3//browseproducts&amp;expand=stores" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?city=Deptford&amp;state=NJ&amp;expand=stores&amp;show=facet</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [stores expanded]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def bops_stores = holder.getNodeValues( "//*:CategoryResponse/category/facet[name='UPC_BOPS_PURCHASABLE']/value/values" )
def locationNumber = holder.getNodeValues( "//*:CategoryResponse/stores/locationNumber" )
//log.info bops_stores.toString()
//log.info locationNumber.toString()

for (stores in bops_stores){
	assert locationNumber.contains(stores)
}
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>210da0ea-8b44-4acc-854a-ef5c8f80a7b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>prodId</con:name><con:value>1537042</con:value></con:property><con:property><con:name>isDuplicate</con:name><con:value>false</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="14K_27588_numberColors-CHECK"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4/catalog/search" searchProperties="true" id="989b4fe9-0afa-44ef-8e6b-729d949c97e1"><con:settings/><con:testStep type="httprequest" name="v3/browseproducts" id="236ac6d7-3693-41b3-9c78-19ecad14e01d"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="v3/browseproducts" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;resultsperpage=50</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [numberColors=noOfColors]" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def products = holder.getNodeValues( "//*:CategoryResponse/category/product/product" )

for (int i=1; i&lt;=products.size(); i++){
	def id = holder.getNodeValue( "//*:CategoryResponse/category/product/product["+i+"]/@id" )
	def color = holder.getNodeValues( "//*:CategoryResponse/category/product/product["+i+"]/image/color" )
	def numberColors = holder.getNodeValue( "//*:CategoryResponse/category/product/product["+i+"]/image/numberColors" )
	def hasMoreColors = holder.getNodeValue( "//*:CategoryResponse/category/product/product["+i+"]/image/hasMoreColors" )
	def colorized = holder.getNodeValue( "//*:CategoryResponse/category/product/product["+i+"]/image/colorized" )			
	if(color.size()>0){
//		log.info id.toString()
//		log.info color.size()
		assert color.size() == Integer.parseInt(numberColors)
		assert colorized.equals('true')
		if(color.size()>1){
//			log.info id.toString()
			if (hasMoreColors.equals('true')){
//				log.info "Pass"	
	}
			else
				log.info "Failed for product - '"+id.toString()+"'"
		}
	}
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [numberColors=noOfColors]_29097"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def products = holder.getNodeValues( "//*:CategoryResponse/category/product/product/@id" )

for (product in products){
	def iscollection = holder.getNodeValues( "//*:CategoryResponse/category/product[@id="+product+"]/product/summary/iscollection" )
	def color = holder.getNodeValues( "//*:CategoryResponse/category/product/product[@id="+product+"]/image/color" )
	def numberColors = holder.getNodeValue( "//*:CategoryResponse/category/product/product[@id="+product+"]/image/numberColors" )
	def hasMoreColors = holder.getNodeValue( "//*:CategoryResponse/category/product/product[@id="+product+"]/image/hasMoreColors" )
	def colorized = holder.getNodeValue( "//*:CategoryResponse/category/product/product[@id="+product+"]/image/colorized" )			
	
	log.info product.toString()
	if(color.size()>0){		
		log.info color.size()
		assert color.size() == Integer.parseInt(numberColors)
		assert colorized.equals('true')
		if(color.size()>1){
//			log.info id.toString()
			if (hasMoreColors.equals('true')){
//				log.info "Pass"	
	}
			else
				log.info "Failed for product - '"+id.toString()+"'"
		}
	}
}

</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="v4/catalog/search">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/search" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/search?searchphrase=lips&amp;perpage=24</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [numberColors=noOfColors]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def products = holder.getNodeValues( "//searchresponse/searchresultgroups/products" )

for (int i=1; i&lt;=products.size(); i++){
//	def id = holder.getNodeValue( "//*:CategoryResponse/category/product/product["+i+"]/@id" )
	def color = holder.getNodeValues( "//searchresponse/searchresultgroups/products/product["+i+"]/image/color" )
	def numberColors = holder.getNodeValue( "//searchresponse/searchresultgroups/products/product["+i+"]/image/numberColors" )
	def hasMoreColors = holder.getNodeValue( "//searchresponse/searchresultgroups/products/product["+i+"]/image/hasMoreColors" )
	if(color.size()>0){
//		log.info color.toString()
		assert color.size() == Integer.parseInt(numberColors)
		if(color.size()>1){	
			assert hasMoreColors.equals('true')
		}
	}
}
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>236ac6d7-3693-41b3-9c78-19ecad14e01d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>catId</con:name><con:value>118</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Akamai"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="First Step" searchProperties="true" id="6c9490cd-9c3a-4237-854f-908a911b8773"><con:settings/><con:testStep type="groovy" name="Env Property Change"><con:settings/><con:config><script>def endPoint = context.expand('${#Project#endPoint}')

testRunner.testCase.testSuite.project.setPropertyValue( "apiendPoint", endPoint.toString().replace("services","api"))

if(endPoint.contains('macys')== true || endPoint.contains('mcom')== true){
	if(endPoint.equals('http://services2.macys.com')){
		testRunner.testCase.testSuite.project.setPropertyValue( "apiendPoint", endPoint.toString().replace("services2","api"))
		testRunner.testCase.testSuite.setPropertyValue( "clientId", "j4cbus9xsvgg5rf3fgy8mgqq")		
	}
	else{
		testRunner.testCase.testSuite.setPropertyValue( "clientId", "r7gdvrpwnjzfmd7w79x9kqve")	
	}
	testRunner.testCase.testSuite.setPropertyValue( "catId", "118")
}
else{	
	if(endPoint.equals('http://services.bloomingdales.com')){
		testRunner.testCase.testSuite.setPropertyValue( "clientId", "xj97hqnq98yvcy2v67mckbcz")	
	}
	else{
		testRunner.testCase.testSuite.setPropertyValue( "clientId", "gpdwh86n3qhaq5uqqwsv6vy8")	
	}
	testRunner.testCase.testSuite.setPropertyValue( "catId", "2910")
}</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>82a5d5af-f98b-442c-b879-14fa148da1e2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v3/browseproducts" searchProperties="true" id="6a56ce21-76ec-48b0-be3b-2a2828af18fc"><con:settings/><con:testStep type="httprequest" name="v3/browseproducts_1" id="9228555a-13f9-4fb7-83b6-22d11d93239b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="v3/browseproducts_1" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#TestSuite#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
  &lt;con:entry key="Pragma" value="${#Project#akamai_Header}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#apiendpoint}/v3/catalog/category/${#TestSuite#CatId}/browseproducts?currentpage=1&amp;resultsperpage=24&amp;show=product,facet,productpool</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert X-Check-Cacheable=YES"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]

//log.info header["X-Check-Cacheable"].toString()
	assert header["X-Check-Cacheable"].toString().equals('[YES]')
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set Headers"><con:configuration><scriptText>def Server_Hit=context.expand('${#TestCase#Akamai_Server}')
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
messageExchange.modelItem.testStep.testCase.setPropertyValue( "Headers", header.toString() )

def Cache=header["X-Cache"].toString()
//log.info header["X-Cache"].toString()

//if (Cache.contains('MISS')){
//		def start = Cache.indexOf("from a")
//		def end= Cache.indexOf(".deploy")
//		def Akamai_Server = Cache[start+6..end-1]
////		log.info Akamai_Server.toString()
//		messageExchange.modelItem.testStep.testCase.setPropertyValue( "Akamai_Server", Akamai_Server.toString() )		
//	}
//	else if (Cache.contains('HIT')){		
////		log.info Cache.toString()
////		log.info Server_Hit.toString()
//		assert Cache.contains(Server_Hit)
//	}

	def start = Cache.indexOf("from a")
	def end= Cache.indexOf(".deploy")
	def Akamai_Server = Cache[start+6..end-1]
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "Akamai_Server", Akamai_Server.toString())</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="v3/browseproducts_2" id="82a5d5af-f98b-442c-b879-14fa148da1e2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="v3/browseproducts_2" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#TestSuite#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
  &lt;con:entry key="Pragma" value="${#Project#akamai_Header}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#apiendpoint}/v3/catalog/category/${#TestSuite#CatId}/browseproducts?currentpage=1&amp;resultsperpage=24&amp;show=product,facet,productpool</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set Headers"><con:configuration><scriptText>def Server_Hit=context.expand('${#TestCase#Akamai_Server}')
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
messageExchange.modelItem.testStep.testCase.setPropertyValue( "Headers", header.toString() )

def Cache=header["X-Cache"].toString()
//log.info header["X-Cache"].toString()

if (Cache.contains('MISS')){
		def start = Cache.indexOf("from a")
		def end= Cache.indexOf(".deploy")
		def Akamai_Server = Cache[start+6..end-1]
//		log.info Akamai_Server.toString()
		messageExchange.modelItem.testStep.testCase.setPropertyValue( "Akamai_Server", Akamai_Server.toString() )		
	}
	else if (Cache.contains('HIT')){		
//		log.info Cache.toString()
//		log.info Server_Hit.toString()
		assert Cache.contains(Server_Hit)
	}
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties><con:property><con:name>Headers</con:name><con:value><![CDATA[Content-Language : en-US
access-control-allow-origin : m.bloomingdales.com
X-Mashery-Message-ID : 951deb53-d303-41d0-9572-7b0f9506f408
#status# : HTTP/1.1 200 OK
X-Check-Cacheable : YES
Content-Length : 7053
X-Serial : 7545
X-Akamai-Session-Info : name=AKA_PM_BASEDIR; value=
X-Akamai-Session-Info : name=AKA_PM_CACHEABLE_OBJECT; value=true
X-Akamai-Session-Info : name=AKA_PM_FWD_URL; value=/v3/catalog/category/2910/browseproducts?currentpage=1&resultsperpage=24&show=product,facet,productpool
X-Akamai-Session-Info : name=AKA_PM_NETSTORAGE_ROOT; value=
X-Akamai-Session-Info : name=AKA_PM_PREFETCH_ON; value=true
X-Akamai-Session-Info : name=AKA_PM_SR_ENABLED; value=true
X-Akamai-Session-Info : name=AKA_PM_SR_NODE_ID; value=0
X-Akamai-Session-Info : name=AKA_PM_TD_ENABLED; value=true
X-Akamai-Session-Info : name=AKA_PM_TD_MAP_PREFIX; value=ch
X-Akamai-Session-Info : name=OVERRIDE_HTTPS_IE_CACHE_BUST; value=all
X-Akamai-Session-Info : name=TCP_OPT_APPLIED; value=low
Connection : Keep-Alive
Server : Mashery Proxy
X-Cache : TCP_HIT from a184-28-17-17.deploy.akamaitechnologies.com (AkamaiGHost/7.2.2-15351100) (-)
X-Cache-Key : /L/7545/239506/1h30m/origin-api.bloomingdales.com/v3/catalog/category/2910/browseproducts cid=currentpage=1&resultsperpage=24&show=product,facet,productpool__Accept=application/xml
X-Akamai-Pragma-Client-IP : 206.169.185.30, 206.169.185.30
X-Macys-RequestId : 951deb53-d303-41d0-9572-7b0f9506f408
Vary : Accept-Encoding
Date : Tue, 09 Jun 2015 19:27:07 GMT
Content-Encoding : gzip
X-Mashery-Responder : prod-j-worker-atl-02.mashery.com
Content-Type : application/xml;charset=utf-8
X-True-Cache-Key : /L/origin-api.bloomingdales.com/v3/catalog/category/2910/browseproducts cid=currentpage=1&resultsperpage=24&show=product,facet,productpool__Accept=application/xml
]]></con:value></con:property><con:property><con:name>Akamai_Server</con:name><con:value>184-28-17-17</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>236ac6d7-3693-41b3-9c78-19ecad14e01d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9228555a-13f9-4fb7-83b6-22d11d93239b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>664949ab-a302-4c48-9ba0-836abf64f22b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4/search" searchProperties="true" id="6530459a-3103-4033-9b5b-cf55653291da"><con:settings/><con:testStep type="httprequest" name="v4/search_1"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="v4/search_1" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#TestSuite#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
  &lt;con:entry key="Pragma" value="${#Project#akamai_Header}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#apiendpoint}/v4/catalog/search?searchphrase=Lips</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert X-Check-Cacheable=YES"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]

//log.info header["X-Check-Cacheable"].toString()
	assert header["X-Check-Cacheable"].toString().equals('[YES]')
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set Headers"><con:configuration><scriptText>def Server_Hit=context.expand('${#TestCase#Akamai_Server}')
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
messageExchange.modelItem.testStep.testCase.setPropertyValue( "Headers", header.toString() )

def Cache=header["X-Cache"].toString()
//log.info header["X-Cache"].toString()

//if (Cache.contains('MISS')){
//		def start = Cache.indexOf("from a")
//		def end= Cache.indexOf(".deploy")
//		def Akamai_Server = Cache[start+6..end-1]
////		log.info Akamai_Server.toString()
//		messageExchange.modelItem.testStep.testCase.setPropertyValue( "Akamai_Server", Akamai_Server.toString() )		
//	}
//	else if (Cache.contains('HIT')){		
////		log.info Cache.toString()
////		log.info Server_Hit.toString()
//		assert Cache.contains(Server_Hit)
//	}

	def start = Cache.indexOf("from a")
	def end= Cache.indexOf(".deploy")
	def Akamai_Server = Cache[start+6..end-1]
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "Akamai_Server", Akamai_Server.toString())</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="v4/search_2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="v4/search_2" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#TestSuite#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
  &lt;con:entry key="Pragma" value="${#Project#akamai_Header}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#apiendpoint}/v4/catalog/search?searchphrase=Lips</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set Headers"><con:configuration><scriptText>def Server_Hit=context.expand('${#TestCase#Akamai_Server}')
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
messageExchange.modelItem.testStep.testCase.setPropertyValue( "Headers", header.toString() )

def Cache=header["X-Cache"].toString()
//log.info header["X-Cache"].toString()

if (Cache.contains('MISS')){
		def start = Cache.indexOf("from a")
		def end= Cache.indexOf(".deploy")
		def Akamai_Server = Cache[start+6..end-1]
//		log.info Akamai_Server.toString()
		messageExchange.modelItem.testStep.testCase.setPropertyValue( "Akamai_Server", Akamai_Server.toString() )		
	}
	else if (Cache.contains('HIT')){		
//		log.info Cache.toString()
//		log.info Server_Hit.toString()
		assert Cache.contains(Server_Hit)
	}
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties><con:property><con:name>Headers</con:name><con:value>Content-Language : en-US
access-control-allow-origin : m.bloomingdales.com
X-Mashery-Message-ID : bbd09e5c-d60f-4e4f-b51e-03f43cb8526a
#status# : HTTP/1.1 200 OK
X-Check-Cacheable : YES
Content-Length : 14778
X-Serial : 7545
X-Akamai-Session-Info : name=AKA_PM_BASEDIR; value=
X-Akamai-Session-Info : name=AKA_PM_CACHEABLE_OBJECT; value=true
X-Akamai-Session-Info : name=AKA_PM_FWD_URL; value=/v4/catalog/search?searchphrase=Lips
X-Akamai-Session-Info : name=AKA_PM_NETSTORAGE_ROOT; value=
X-Akamai-Session-Info : name=AKA_PM_PREFETCH_ON; value=true
X-Akamai-Session-Info : name=AKA_PM_SR_ENABLED; value=true
X-Akamai-Session-Info : name=AKA_PM_SR_NODE_ID; value=0
X-Akamai-Session-Info : name=AKA_PM_TD_ENABLED; value=true
X-Akamai-Session-Info : name=AKA_PM_TD_MAP_PREFIX; value=ch
X-Akamai-Session-Info : name=OVERRIDE_HTTPS_IE_CACHE_BUST; value=all
X-Akamai-Session-Info : name=TCP_OPT_APPLIED; value=low
Connection : Keep-Alive
Server : Mashery Proxy
X-Cache : TCP_HIT from a184-28-17-17.deploy.akamaitechnologies.com (AkamaiGHost/7.2.2-15351100) (-)
X-Cache-Key : /L/7545/239506/2h/origin-api.bloomingdales.com/v4/catalog/search cid=searchphrase=Lips__Accept=application/xml
X-Akamai-Pragma-Client-IP : 206.169.185.30, 206.169.185.30
X-Macys-RequestId : bbd09e5c-d60f-4e4f-b51e-03f43cb8526a
Vary : Accept-Encoding
Date : Tue, 09 Jun 2015 19:27:08 GMT
Content-Encoding : gzip
X-Mashery-Responder : prod-j-worker-atl-01.mashery.com
Content-Type : application/xml;charset=utf-8
X-True-Cache-Key : /L/origin-api.bloomingdales.com/v4/catalog/search cid=searchphrase=Lips__Accept=application/xml
</con:value></con:property><con:property><con:name>Akamai_Server</con:name><con:value>184-28-17-17</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>236ac6d7-3693-41b3-9c78-19ecad14e01d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9228555a-13f9-4fb7-83b6-22d11d93239b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>664949ab-a302-4c48-9ba0-836abf64f22b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>catId</con:name><con:value>2910</con:value></con:property><con:property><con:name>clientId</con:name><con:value>xj97hqnq98yvcy2v67mckbcz</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="ShoppingBag-Duplicate UPC Gift Issue"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Duplicate UPC Check" searchProperties="true" id="f1b0d5af-af19-4803-9aa3-d4b656ab085a"><con:settings/><con:testStep type="groovy" name="Set-Promotion Category"><con:settings/><con:config><script>def brand = context.expand('${#Project#brand}')

if(brand.equals('MCOM')){
	testRunner.testCase.testSuite.setPropertyValue( "catId", "58476")	
}
else{
	testRunner.testCase.testSuite.setPropertyValue( "catId", "7138")	
}</script></con:config></con:testStep><con:testStep type="httprequest" name="v3//browseproducts">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v3//browseproducts" id="26097c10-b79b-4936-82df-d29f34bda23f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#TestSuite#CatId}/browseproducts?show=product&amp;resultsperpage=24</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="18e2611d-1af2-4d28-9083-7edf2dccecf0"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Promotion Products]" id="9aed3787-52e8-4777-8c1e-a98eb8b26bc6"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def promotion_Products = holder.getNodeValues( "//*:CategoryResponse/category/product/product[badges/promotionbadge]/@id" )
//log.info promotion_Products.toString()
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "promotion_Products", promotion_Products.toString().replaceAll(" ","").replace("[","").replace("]","") )
assert promotion_Products != null
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Promotion Child Products]" id="9aed3787-52e8-4777-8c1e-a98eb8b26bc6"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def promotion_Products = holder.getNodeValues( "//*:CategoryResponse/category/product/product[iscollection=false and badges/promotionbadge]/@id" )
//log.info promotion_Products.toString()
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "promotion_child_Products", promotion_Products.toString().replaceAll(" ","").replace("[","").replace("]","") )
assert promotion_Products != null
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/product/(productdetails(childproducts))" id="26365983-1195-4ec6-b331-27245ad204ec">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/product/(productdetails(childproducts))" id="99754e1c-7b81-4a28-8b25-c32f18efe93a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#promotion_Products}(productdetails(childproducts))</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="787ce34d-5793-4167-a639-d489c2d8c03f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Child Products]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def childProducts = holder.getNodeValues( "//productresponse/product/productDetails/childProducts/@id" )
//log.info childProducts.toString()
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "childProducts", childProducts.toString().replaceAll(" ","").replace("[","").replace("]","") )
assert childProducts != null
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4//product/(upcs(upcdetails))">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4//product/(upcs(upcdetails))" id="99754e1c-7b81-4a28-8b25-c32f18efe93a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#childProducts}(promotions,upcs(upcdetails))</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="787ce34d-5793-4167-a639-d489c2d8c03f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [@upcnumber]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def upcnumbers = holder.getNodeValues( "//productresponse/product/upcs/@upcnumber" )
//messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC_Gift", upcnumber.toString().replaceAll(" ","").replace("[","").replace("]","") )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC_Gift", upcnumbers.toString())

assert upcnumbers != null
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Groovy Script"><con:settings/><con:config><script>def upcNumbers = context.expand('${#TestSuite#UPC_Gift}')

if(upcNumbers!="[]"){	
def upc = upcNumbers.replaceAll(" ","").replace("[","").replace("]","")
String[] upcary = upc.split(",")
	testRunner.testCase.testSuite.setPropertyValue( "UserID", "" )
	for (upcnumber in upcary){
//		log.info upcnumber
		testRunner.testCase.testSuite.setPropertyValue( "upcnumber", upcnumber.toString() )
		def UserID = context.expand('${#TestSuite#UserID}')
		if (UserID.equals("")){
			testRunner.testCase.testSuite.setPropertyValue( "req", '{"additemsrequest":{"upcnumber": "${#TestSuite#upcnumber}","quantity": 1}}' )
		}
		else {
			testRunner.testCase.testSuite.setPropertyValue( "req", '{"additemsrequest": {"userid": "${#TestSuite#userID}","quantity": 1,"upcnumber": "${#TestSuite#upcnumber}"}}' )
		}	
		testRunner.runTestStepByName( "ADD UPC to Bag")
	}
	}
else{
	log.info "no products"
	}</script></con:config></con:testStep><con:testStep type="httprequest" name="v4//product/(productdetails(badges),promotions)" disabled="true" id="5d06cfd7-0e4c-4d46-b90d-4209454f1390">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4//product/(productdetails(badges),promotions)" id="99754e1c-7b81-4a28-8b25-c32f18efe93a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#promotion_Products}(productdetails(badges),promotions)</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="787ce34d-5793-4167-a639-d489c2d8c03f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="ADD UPC to Bag"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="ADD UPC to Bag" postQueryString="false" mediaType="application/json" id="6b187eef-014a-4828-a9d1-a0315a5de856" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag/item</con:endpoint><con:request>${#TestSuite#req}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4fed2eee-e4d1-40a7-adcc-dbd34d22ec30"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [userid]" id="f96d3510-f683-4910-92dd-395223ef52e6"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/userid[1]" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UserID", node.toString() )

assert node != null
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${TestSuite#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GET Bag"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Bag" id="91e095ae-3525-4851-9e0e-61cd5699a63c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag?userid=${#TestSuite#userID}</con:endpoint><con:request><![CDATA[<response>
   <userid>771317251</userid>
   <success>true</success>
   <registered>false</registered>
</response>]]></con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b3f95f81-4c62-4f47-a027-af8209b3331d"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userid]" id="4b18398e-a6ad-475d-a40e-7311b2d04c2d"><con:configuration><path>//response[1]/userid[1]/text()</path><content>${#TestSuite#userid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bagid]" id="a59c8a52-a012-471f-812a-cf8aef8ef3f5"><con:configuration><path>exists( //response/bagid)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [totalquantity]" id="bff2d917-9a92-4851-8c13-608feafba866"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def total = holder.getNodeValue( "//response[1]/totalquantity[1]" )
def quantity = holder.getNodeValues( "//response[1]/bagitems/quantity" )
def sum=0;
for(val in quantity)
{
	sum+=Integer.parseInt(val);
//	log.info val;
}
assert Integer.parseInt(total)==sum;</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [upc]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def upcs = holder.getNodeValues( "//response/bagitems/upc" )

for (int i=0; i&lt;upcs.size(); i++){
//	assert 
}
assert upcs != null
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>210da0ea-8b44-4acc-854a-ef5c8f80a7b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>634d0664-027a-46ac-96c7-160b48ac810a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d06cfd7-0e4c-4d46-b90d-4209454f1390</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26365983-1195-4ec6-b331-27245ad204ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>prodId</con:name><con:value>1537042</con:value></con:property><con:property><con:name>isDuplicate</con:name><con:value>false</con:value></con:property><con:property><con:name>catId</con:name><con:value>7138</con:value></con:property><con:property><con:name>promotion_Products</con:name><con:value>1405523,1395254,1398277,1401758,1373216,1255290,1401744,852186,1063873,1401788,1401730,1358406,1121510,1069395,726948,1401760,1401748,1280268,1217847,1123393,1011506,757211,1398279,1391332</con:value></con:property><con:property><con:name>couponId</con:name><con:value>62</con:value></con:property><con:property><con:name>promotion_child_Products</con:name><con:value/></con:property><con:property><con:name>childProducts</con:name><con:value>1082198,519228,1292868,983624,973181,991886,1298989,1160479,1340662,1278323,1340634,1361698,991873,149955,991874,1072517,1292868,1237803,761346,114859,1340711,1340723,1340718,1340707,1355742,90338,660940,1057664,616826,106389,1340711,1340710,1340721,1340723,1340707,585660,865874,104413,513672,585656,699403,700359,1082198,983624,88186,1237803,88169,644803,1046586,1125012,761154,501778,567686,91479,470647,1312794,1052327,1072517,450500,999457,761346,973184,593131,991877,103201,942089,1215921,1112930,87266,1286755,1098604,87189,1120473,470647,114904,549465,91482,1083271,1239624,1298313,89135,787867,454087,454077,1138084,501038,1120093,511258,815893,608877,454079,454084,472106,454084,454097,799160,454088,1236251,821113,639497,575189,969987,1196579,602610,189141,647771,685462,1338038,62935,78649,453331,719362,865874,1367349,1382164,1195276,697567</con:value></con:property><con:property><con:name>UPC_Gift</con:name><con:value>[]</con:value></con:property><con:property><con:name>UserID</con:name><con:value>2224154815</con:value></con:property><con:property><con:name>upcnumber</con:name><con:value>5060033779187</con:value></con:property><con:property><con:name>req</con:name><con:value>{"additemsrequest": {"userid": "${#TestSuite#userID}","quantity": 1,"upcnumber": "${#TestSuite#upcnumber}"}}</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Copy of 14I-CM7041-V2-Retrieve Hint Question"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties><con:property><con:name>catId_CATEGORY_BRAND</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CATEGORY_BRAND_Value</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>catId_CATEGORY_BRANDs</con:name><con:value>[]</con:value></con:property><con:property><con:name>CATEGORY_BRAND_Values</con:name><con:value>[]</con:value></con:property><con:property><con:name>user_tagged</con:name><con:value>testuser_88@aspire.in</con:value></con:property><con:property><con:name>user_non_tagged</con:name><con:value>testuser_102@aspire.in</con:value></con:property></con:properties><con:reportParameters/><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PSP_101:Retrieve Tagged User Hint Question" searchProperties="true" id="bc8de472-9955-4f59-ba71-4247745c06f8"><con:settings/><con:testStep type="jdbc" name="JDBC Request-GET Tagged User"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>com.ibm.db2.jcc.DB2Driver</con:driver><con:connectionString>jdbc:db2://${#Project#DB_Server}:${#Project#DB_Port}/${#Project#DB_Name}:user=${#Project#DB_User};password=PASS_VALUE;</con:connectionString><con:password>${#Project#DB_Password}</con:password><con:query>SELECT USER_NM FROM USER_SECURITY_EVENT WHERE USER_TAG_FLG='Y' and USER_NM LIKE '%aspire%' FETCH FIRST 20 ROWS ONLY</con:query><con:assertion type="GroovyScriptAssertion" name="Script-Get [Tagged user]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
//def username1 = holder.getNodeValue( "//Results[1]/ResultSet[1]/Row[1]/USER_SECURITY_EVENT.USER_NM[1]" )

def username1 = holder.getNodeValue( "//Results/ResultSet/Row/USER_SECURITY_EVENT.USER_NM" )

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "user_tagged", username1)

assert username1 != null
//log.info username1.toString()
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="httprequest" name="Retrieve Hint Question"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="eebf5207-d4d7-4637-919a-8140633d09b1" name="Retrieve Hint Question" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Content-Type" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v2/user/hintquestion?emailaddress=${#TestSuite#user_tagged}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes-500???"><con:configuration><codes>500</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5417a763-adf4-4a32-906e-c36525348dc5" name="Script-Assert [errorDetail-M/BCOM]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def BRAND = context.expand('${#Project#BRAND}')
def email = context.expand('${#TestSuite#user_tagged}')
def errorDetail = holder.getNodeValue( "//error/errorDetail" )

if(BRAND.equals('MCOM')){
	assert errorDetail.equals("Your Macy's account was locked and you'll need to create a new password for security reasons. An email was just sent to "+email+" with a link and instructions on how to change your password.")
}
else{
	assert errorDetail.equals("Your bloomingdales.com account has been locked and you must reset your password in order to access it. A time-sensitive email was just sent to "+email+" with a link and instructions on how to reset your password.")
}
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>406</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Authentication failed</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>emailaddress</con:name><con:value>${#Project#emailaddress}</con:value><con:style>QUERY</con:style></con:parameter></con:parameters></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>c2dd17f0-ea8e-44da-89dc-fa36cdcc8aca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb254039-b71f-4680-82a0-58a393229494</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PSP_102:Retreive Non Tagged User Hint Question" searchProperties="true" id="ad5ef8ba-3c8b-438c-a377-8b8bc708f3e8"><con:settings/><con:testStep type="jdbc" name="JDBC Request-GET NON-Tagged User"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>com.ibm.db2.jcc.DB2Driver</con:driver><con:connectionString>jdbc:db2://${#Project#DB_Server}:${#Project#DB_Port}/${#Project#DB_Name}:user=${#Project#DB_User};password=PASS_VALUE;</con:connectionString><con:password>${#Project#DB_Password}</con:password><con:query>SELECT USER_NM FROM USER_SECURITY_EVENT WHERE USER_TAG_FLG='N' and USER_NM LIKE '%aspire%' FETCH FIRST 20 ROWS ONLY</con:query><con:assertion type="GroovyScriptAssertion" name="Script-Get [NON-Tagged user]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
//def username1 = holder.getNodeValue( "//Results[1]/ResultSet[1]/Row[1]/USER_SECURITY_EVENT.USER_NM[1]" )

def username1 = holder.getNodeValue( "//Results/ResultSet/Row/USER_SECURITY_EVENT.USER_NM" )

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "user_non_tagged", username1)

assert username1 != null
//log.info username1.toString()
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="httprequest" name="Retrieve Hint Question"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="eebf5207-d4d7-4637-919a-8140633d09b1" name="Retrieve Hint Question" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Content-Type" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v2/user/hintquestion?emailaddress=${#TestSuite#user_non_tagged}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [hintQuestion]"><con:configuration><path>exists( //response/hintQuestion)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [hintId]"><con:configuration><path>exists( //response/hintId)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userName]"><con:configuration><path>//response[1]/userName[1]/text()</path><content>${#TestSuite#user_non_tagged}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userId]"><con:configuration><path>exists( //response/userId)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties><con:property><con:name>endPoint</con:name><con:value>http://services.preprod4macys.fds.com</con:value></con:property><con:property><con:name>api_endPoint</con:name><con:value>http://api.preprod4macys.fds.com</con:value></con:property><con:property><con:name>username</con:name><con:value>mcyapp</con:value></con:property><con:property><con:name>password</con:name><con:value>dbacces5s</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>72ced62f-456f-4bfe-8680-6b424772bf47</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase></con:testSuite><con:testSuite name="SDP User"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="d6d21888-34c8-4170-90fb-f2715a3564f4"><con:settings/><con:testStep type="datagen" name="RandomEmailGenerator" id="7eef88f2-d12d-40a6-afe7-073d51b51e29">
      <con:settings/>
      <con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:property type="Script">
          <con:configuration><script>def sdf = new java.text.SimpleDateFormat("ddhhmmss")
					def useremail =  "user"+sdf.format( new Date())+"@user.com"
					def regEmail =  "user"+sdf.format( new Date())+"@reg.com"
					def coregEmail =  "user"+sdf.format( new Date())+"@coreg.com"					

					def coregFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(5)
					def coregLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
					def regFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(7)
					def regLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(8)
					
					testRunner.testCase.testSuite.setPropertyValue( "emailId", useremail )
					testRunner.testCase.testSuite.setPropertyValue( "regEmail", regEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregEmail", coregEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregFirstname", coregFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "coregLastname", coregLastname )
					testRunner.testCase.testSuite.setPropertyValue( "regFirstname", regFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "regLastname", regLastname )
					return email 
			</script></con:configuration>
          <con:name>emailAddress</con:name>
          <con:mode>STEP</con:mode>
          <con:shared>true</con:shared>
        </con:property>
      </con:config>
    </con:testStep><con:testStep type="httprequest" name="Create User"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Create User" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="testclient_1.0_kweu3w323a"/>
  &lt;con:entry key="Authorization" value="Basic dGRiYWxraTEwQGdtYWlsLmNvbTpQaG90bw=="/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://11.168.104.183:85/api/customer/v1/users?_body=true</con:endpoint><con:request><![CDATA[<user>
	<dateOfBirth>1989-11-09</dateOfBirth>
	<gender>M</gender>
	<subscribedToNewsLetter>true</subscribedToNewsLetter>
	<userPasswordHint>
		<id>1</id>
		<answer>My Name</answer>
	</userPasswordHint>
	<profileAddress>
		<id>1234</id>
		<attention>testattention</attention>
		<sequenceNumber>11</sequenceNumber>
		<firstName>first#$$</firstName>
		<lastName>last$%</lastName>
		<middleName>middle</middleName>
		<addressLine1>postbox</addressLine1>
		<addressLine2>AP</addressLine2>
		<addressLine3/>
		<city>Hyderabad</city>
		<state>AL</state>
		<zipCode>32701</zipCode>
		<countryCode>USA</countryCode>
		<email>${#TestSuite#emailId}</email>
		<bestPhone>123-444-5577</bestPhone>
		<primaryFlag>true</primaryFlag>
	</profileAddress>
	<loginCredentials>
		<password>password123</password>
	</loginCredentials>
</user>	]]></con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [id]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def userId = holder.getNodeValue( "//user/id" )
def guid = holder.getNodeValue( "//user/guid" )
def token = holder.getNodeValue( "//user/tokenCredentials/token" )
def profileId = holder.getNodeValue( "//user/profileAddress/id" )

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "userId", userId )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "guid", guid )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "token", token )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "profileId", profileId )


assert userId != null
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Update User"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" name="Update User" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="X-Macys-RequestId" value="123456"/>
  <con:entry key="X-Macys-ClientId" value="WSSG"/>
  <con:entry key="X-Macys-SecurityToken" value="${#TestSuite#token}"/>
  <con:entry key="Accept" value="application/xml"/>
</xml-fragment>]]></con:setting></con:settings><con:endpoint>http://11.168.104.183:85/api/customer/v1/users?_body=true</con:endpoint><con:request>{
  "user": {
    "id": "${#TestSuite#userId}",
    "dateOfBirth": "1991-07-22",
    "gender": "F",
    "subscribedToNewsLetter": "true",
    "userPasswordHint": {
      "id": "1",
      "answer": "My Name"
    },
    "profileAddress": {
      "id": "${#TestSuite#profileId}",
      "attention": "testattention11",
      "sequenceNumber": "11",
      "firstName": "neela11",
      "lastName": "veni11",
      "middleName": "Epuri11",
      "addressLine1": "Hyd",
      "city": "Hyderabad",
      "state": "AP",
      "zipCode": "32701",
      "countryCode": "USA",
      "email": "${#TestSuite#regEmail}",
      "bestPhone": "444-487-4812",
      "primaryFlag": "true"
    },
    "loginCredentials": { "password": "password123" },
    "tokenCredentials": {
      "userID": "${#TestSuite#userId}",
      "userGUID": "${#TestSuite#guid}"
    }
   "subscriptions": [
      {
        "id": "2",
        "name": "Thisit Email Newsletter ",
        "value": "Y",
        "active" : "true",
        "acquisitionSource": "Macys"
      },
      {
        "id": "1",
        "name": "6329437837",
        "value": "Y",
        "active" : "true"
      }
    ]
   }
}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>7eef88f2-d12d-40a6-afe7-073d51b51e29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>emailId</con:name><con:value>user24053619@user.com</con:value></con:property><con:property><con:name>regEmail</con:name><con:value>user24053619@reg.com</con:value></con:property><con:property><con:name>coregEmail</con:name><con:value>user24053619@coreg.com</con:value></con:property><con:property><con:name>coregFirstname</con:name><con:value>XFvbL</con:value></con:property><con:property><con:name>coregLastname</con:name><con:value>vufiXJ</con:value></con:property><con:property><con:name>regFirstname</con:name><con:value>oEfKQcO</con:value></con:property><con:property><con:name>regLastname</con:name><con:value>vwSvJlit</con:value></con:property><con:property><con:name>userId</con:name><con:value>2159009155</con:value></con:property><con:property><con:name>guid</con:name><con:value>7aab1201-b8ce-494e-845f-2b624642933b</con:value></con:property><con:property><con:name>token</con:name><con:value>12_xXrg4+t+/FonmQOJhEM8ZvAdSs5kUsWqK61uPUM6oCtaO5BZMD5Eus/0iRBkV0xuyNdaIkSKTyEGvtkRQ6/VZg==</con:value></con:property><con:property><con:name>profileId</con:name><con:value>11617572</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="ShoppingBag-Add Same Item"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ShoppingBag-Add Same Product Item" searchProperties="true" id="ad0789dc-d203-4251-a98f-dfd21e095f4d"><con:settings/><con:testStep type="groovy" name="Set-Product" id="97a23cca-e016-48ac-a4b8-4c9a09b28b3b"><con:settings/><con:config><script>def brand = context.expand('${#Project#brand}')

if(brand.equals('MCOM')){
	testRunner.testCase.testSuite.setPropertyValue( "ProdId1", "656431")
	testRunner.testCase.testSuite.setPropertyValue( "ProdId2", "705469")
}
else{
	testRunner.testCase.testSuite.setPropertyValue( "ProdId1", "1174607")
	testRunner.testCase.testSuite.setPropertyValue( "ProdId2", "1158434")
}</script></con:config></con:testStep><con:testStep type="httprequest" name="v4//product/(upcs(upcdetails))" id="44ce3d72-36ca-4932-ad35-0b911db7b8ff">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4//product/(upcs(upcdetails))" id="99754e1c-7b81-4a28-8b25-c32f18efe93a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#ProdId1},${#TestSuite#ProdId2}(upcs(upcdetails))</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="787ce34d-5793-4167-a639-d489c2d8c03f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [UPC]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def UPC1 = holder.getNodeValue( "//productresponse/product/upcs[1]/upcDetails/skuid" )
def UPC2 = holder.getNodeValue( "//productresponse/product/upcs[2]/upcDetails/skuid" )
//messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC_Gift", upcnumber.toString().replaceAll(" ","").replace("[","").replace("]","") )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC1", UPC1.toString())
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC2", UPC2.toString())

assert UPC2 != null
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="ADD UPC1 of Prod1 to Bag"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="ADD UPC1 of Prod1 to Bag" postQueryString="false" mediaType="application/json" id="6b187eef-014a-4828-a9d1-a0315a5de856" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag/item</con:endpoint><con:request>{"additemsrequest": {"quantity": 1,"upcid": "${#TestSuite#UPC1}","showBag": "true"}}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4fed2eee-e4d1-40a7-adcc-dbd34d22ec30"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [userid]" id="f96d3510-f683-4910-92dd-395223ef52e6"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/userid[1]" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UserID", node.toString() )

assert node != null
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [quantity]"><con:configuration><path>//response[1]/shoppingbag[1]/bagitems[upcid='${#TestSuite#UPC1}']/quantity[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${TestSuite#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="ADD UPC2 of Prod1 to Bag" id="548ef182-1396-4cfd-8e00-b10ef4611bc0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="ADD UPC2 of Prod1 to Bag" postQueryString="false" mediaType="application/json" id="6b187eef-014a-4828-a9d1-a0315a5de856" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag/item</con:endpoint><con:request>{"additemsrequest": {"userid": "${#TestSuite#UserID}","quantity": 1,"upcid": "${#TestSuite#UPC2}","showBag": "true"}}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4fed2eee-e4d1-40a7-adcc-dbd34d22ec30"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [quantity]"><con:configuration><path>//response[1]/shoppingbag[1]/bagitems[upcid='${#TestSuite#UPC2}']/quantity[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${TestSuite#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GET Bag"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Bag" id="91e095ae-3525-4851-9e0e-61cd5699a63c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag?userid=${#TestSuite#userID}</con:endpoint><con:request><![CDATA[<response>
   <userid>771317251</userid>
   <success>true</success>
   <registered>false</registered>
</response>]]></con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b3f95f81-4c62-4f47-a027-af8209b3331d"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userid]" id="4b18398e-a6ad-475d-a40e-7311b2d04c2d"><con:configuration><path>//response[1]/userid[1]/text()</path><content>${#TestSuite#userid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bagid]" id="a59c8a52-a012-471f-812a-cf8aef8ef3f5"><con:configuration><path>exists( //response/bagid)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [totalquantity]" id="bff2d917-9a92-4851-8c13-608feafba866"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def total = holder.getNodeValue( "//response[1]/totalquantity[1]" )
def quantity = holder.getNodeValues( "//response[1]/bagitems/quantity" )
def sum=0;
for(val in quantity)
{
	sum+=Integer.parseInt(val);
//	log.info val;
}
assert Integer.parseInt(total)==sum;</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Update UPC2 to UPC1"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" name="Update UPC2 to UPC1" postQueryString="false" mediaType="application/json" id="6b187eef-014a-4828-a9d1-a0315a5de856" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag/item</con:endpoint><con:request>{ "userid": "${#TestSuite#UserID}", "updateitemsrequest": { "itemseq": 2, "upcid": "${#TestSuite#UPC1}", "quantity": 1 },"showBag": true}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4fed2eee-e4d1-40a7-adcc-dbd34d22ec30"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${TestSuite#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="ADD UPC1 of Prod1 to Bag Again"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="ADD UPC1 of Prod1 to Bag Again" postQueryString="false" mediaType="application/json" id="6b187eef-014a-4828-a9d1-a0315a5de856" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag/item</con:endpoint><con:request>{"additemsrequest": {"userid": "${#TestSuite#UserID}","quantity": 1,"upcid": "${#TestSuite#UPC1}","showBag": "true"}}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4fed2eee-e4d1-40a7-adcc-dbd34d22ec30"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${TestSuite#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GET Bag 2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Bag 2" id="91e095ae-3525-4851-9e0e-61cd5699a63c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag?userid=${#TestSuite#userID}</con:endpoint><con:request><![CDATA[<response>
   <userid>771317251</userid>
   <success>true</success>
   <registered>false</registered>
</response>]]></con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b3f95f81-4c62-4f47-a027-af8209b3331d"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userid]" id="4b18398e-a6ad-475d-a40e-7311b2d04c2d"><con:configuration><path>//response[1]/userid[1]/text()</path><content>${#TestSuite#userid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bagid]" id="a59c8a52-a012-471f-812a-cf8aef8ef3f5"><con:configuration><path>exists( //response/bagid)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [totalquantity]" id="bff2d917-9a92-4851-8c13-608feafba866"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def total = holder.getNodeValue( "//response[1]/totalquantity[1]" )
def quantity = holder.getNodeValues( "//response[1]/bagitems/quantity" )
def sum=0;
for(val in quantity)
{
	sum+=Integer.parseInt(val);
//	log.info val;
}
assert Integer.parseInt(total)==sum;</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>210da0ea-8b44-4acc-854a-ef5c8f80a7b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>634d0664-027a-46ac-96c7-160b48ac810a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d06cfd7-0e4c-4d46-b90d-4209454f1390</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26365983-1195-4ec6-b331-27245ad204ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>97a23cca-e016-48ac-a4b8-4c9a09b28b3b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>44ce3d72-36ca-4932-ad35-0b911db7b8ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>548ef182-1396-4cfd-8e00-b10ef4611bc0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ShoppingBag-Add Diff Product Item" searchProperties="true" id="01025a6e-c933-4a88-b94d-a2306f02ed19"><con:settings/><con:testStep type="groovy" name="Set-Product"><con:settings/><con:config><script>def brand = context.expand('${#Project#brand}')

if(brand.equals('MCOM')){
	testRunner.testCase.testSuite.setPropertyValue( "ProdId1", "656431")
	testRunner.testCase.testSuite.setPropertyValue( "ProdId2", "705469")
}
else{
	testRunner.testCase.testSuite.setPropertyValue( "ProdId1", "1174607")
	testRunner.testCase.testSuite.setPropertyValue( "ProdId2", "1158434")
}</script></con:config></con:testStep><con:testStep type="httprequest" name="v4//product/(upcs(upcdetails))">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4//product/(upcs(upcdetails))" id="99754e1c-7b81-4a28-8b25-c32f18efe93a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#ProdId1},${#TestSuite#ProdId2}(upcs(upcdetails))</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="787ce34d-5793-4167-a639-d489c2d8c03f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [UPC]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def UPC1 = holder.getNodeValue( "//productresponse/product[1]/upcs[1]/upcDetails/skuid" )
def UPC2 = holder.getNodeValue( "//productresponse/product[2]/upcs[2]/upcDetails/skuid" )
//messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC_Gift", upcnumber.toString().replaceAll(" ","").replace("[","").replace("]","") )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC1", UPC1.toString())
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UPC2", UPC2.toString())

assert UPC2 != null
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="ADD UPC1 of Prod1 to Bag"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="ADD UPC1 of Prod1 to Bag" postQueryString="false" mediaType="application/json" id="6b187eef-014a-4828-a9d1-a0315a5de856" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag/item</con:endpoint><con:request>{"additemsrequest": {"quantity": 1,"upcid": "${#TestSuite#UPC1}","showBag": "true"}}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4fed2eee-e4d1-40a7-adcc-dbd34d22ec30"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [userid]" id="f96d3510-f683-4910-92dd-395223ef52e6"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/userid[1]" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "UserID", node.toString() )

assert node != null
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/success[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [quantity]"><con:configuration><path>//response[1]/shoppingbag[1]/bagitems[upcid='${#TestSuite#UPC1}']/quantity[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${TestSuite#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="ADD UPC2 of Prod1 to Bag"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="ADD UPC2 of Prod1 to Bag" postQueryString="false" mediaType="application/json" id="6b187eef-014a-4828-a9d1-a0315a5de856" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag/item</con:endpoint><con:request>{"additemsrequest": {"userid": "${#TestSuite#UserID}","quantity": 1,"upcid": "${#TestSuite#UPC2}","showBag": "true"}}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4fed2eee-e4d1-40a7-adcc-dbd34d22ec30"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [quantity]"><con:configuration><path>//response[1]/shoppingbag[1]/bagitems[upcid='${#TestSuite#UPC2}']/quantity[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${TestSuite#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GET Bag"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Bag" id="91e095ae-3525-4851-9e0e-61cd5699a63c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag?userid=${#TestSuite#userID}</con:endpoint><con:request><![CDATA[<response>
   <userid>771317251</userid>
   <success>true</success>
   <registered>false</registered>
</response>]]></con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b3f95f81-4c62-4f47-a027-af8209b3331d"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userid]" id="4b18398e-a6ad-475d-a40e-7311b2d04c2d"><con:configuration><path>//response[1]/userid[1]/text()</path><content>${#TestSuite#userid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bagid]" id="a59c8a52-a012-471f-812a-cf8aef8ef3f5"><con:configuration><path>exists( //response/bagid)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [totalquantity]" id="bff2d917-9a92-4851-8c13-608feafba866"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def total = holder.getNodeValue( "//response[1]/totalquantity[1]" )
def quantity = holder.getNodeValues( "//response[1]/bagitems/quantity" )
def sum=0;
for(val in quantity)
{
	sum+=Integer.parseInt(val);
//	log.info val;
}
assert Integer.parseInt(total)==sum;</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="Update UPC2 to UPC1"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" name="Update UPC2 to UPC1" postQueryString="false" mediaType="application/json" id="6b187eef-014a-4828-a9d1-a0315a5de856" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag/item</con:endpoint><con:request>{ "userid": "${#TestSuite#UserID}", "updateitemsrequest": { "itemseq": 2, "upcid": "${#TestSuite#UPC1}", "quantity": 1 },"showBag": true}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4fed2eee-e4d1-40a7-adcc-dbd34d22ec30"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${TestSuite#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="ADD UPC1 of Prod1 to Bag Again"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="ADD UPC1 of Prod1 to Bag Again" postQueryString="false" mediaType="application/json" id="6b187eef-014a-4828-a9d1-a0315a5de856" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag/item</con:endpoint><con:request>{"additemsrequest": {"userid": "${#TestSuite#UserID}","quantity": 1,"upcid": "${#TestSuite#UPC1}","showBag": "true"}}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4fed2eee-e4d1-40a7-adcc-dbd34d22ec30"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${TestSuite#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GET Bag 2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Bag 2" id="91e095ae-3525-4851-9e0e-61cd5699a63c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v2/shoppingbag?userid=${#TestSuite#userID}</con:endpoint><con:request><![CDATA[<response>
   <userid>771317251</userid>
   <success>true</success>
   <registered>false</registered>
</response>]]></con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b3f95f81-4c62-4f47-a027-af8209b3331d"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [userid]" id="4b18398e-a6ad-475d-a40e-7311b2d04c2d"><con:configuration><path>//response[1]/userid[1]/text()</path><content>${#TestSuite#userid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bagid]" id="a59c8a52-a012-471f-812a-cf8aef8ef3f5"><con:configuration><path>exists( //response/bagid)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [totalquantity]" id="bff2d917-9a92-4851-8c13-608feafba866"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def total = holder.getNodeValue( "//response[1]/totalquantity[1]" )
def quantity = holder.getNodeValues( "//response[1]/bagitems/quantity" )
def sum=0;
for(val in quantity)
{
	sum+=Integer.parseInt(val);
//	log.info val;
}
assert Integer.parseInt(total)==sum;</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>x-macys-webservice-client-id</con:name><con:value>${#Project#clientid}</con:value><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#clientid}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>210da0ea-8b44-4acc-854a-ef5c8f80a7b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>634d0664-027a-46ac-96c7-160b48ac810a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d06cfd7-0e4c-4d46-b90d-4209454f1390</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26365983-1195-4ec6-b331-27245ad204ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>97a23cca-e016-48ac-a4b8-4c9a09b28b3b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>44ce3d72-36ca-4932-ad35-0b911db7b8ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>548ef182-1396-4cfd-8e00-b10ef4611bc0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>prodId</con:name><con:value>656431</con:value></con:property><con:property><con:name>isDuplicate</con:name><con:value>false</con:value></con:property><con:property><con:name>catId</con:name><con:value>58476</con:value></con:property><con:property><con:name>promotion_Products</con:name><con:value>1856434,1814172,980868,772112,1605000,1587419,1770544,1722347,1834244,1985096,1939434,1931628,1916505,1904254,1903851,1902941,1894438,1885727,1877552,1870222,1864725</con:value></con:property><con:property><con:name>couponId</con:name><con:value>62</con:value></con:property><con:property><con:name>promotion_child_Products</con:name><con:value/></con:property><con:property><con:name>childProducts</con:name><con:value>1636631,1636632,1733235,1498895,166324,92775,1636630,1498896,174838,92774,673692,92778,92777,1531644,92779,1498894,92782,1006556,796268,1494763,3603,1495376,1716491,1716505,1716494,1505652,976694,1716496,1408132,1627599,1716491,1716498,1716494,1716506,1760162,1505652,1716495,377840,1764501,584016,1744728,1714725,584019,1714323</con:value></con:property><con:property><con:name>UPC_Gift</con:name><con:value>[805498002471, 805498002488, 805498002495, 805498002501, 805498002518, 805498002525, 805498002532, 805498192653, 805498192660, 805498192677, 805498192684, 805498192691, 805498192707, 805498192714, 805498192721, 805498002709, 805498002624, 805498002631, 805498002648, 805498002655, 805498002662, 805498002679, 805498002686, 805498192493, 805498192509, 805498192516, 805498192523, 805498192530, 805498192547, 805498192554, 805498192561, 805498341181, 805498341198, 805498341204, 805498341211, 805498341228, 805498341235, 805498341242, 805498341259, 805498449856, 805498449863, 805498449870, 805498449887, 805498449894, 805498449900, 805498449917, 805498449924, 805498552617, 805498552624, 805498552631, 805498552648, 805498552655, 805498552662, 805498552679, 805498552686, 805498603111, 805498603128, 805498603135, 805498603142, 805498603159, 805498603166, 805498603265, 805498603272, 805498603289, 805498603296, 805498737571, 805498737588, 805498737595, 805498737601, 805498737618, 805498737625, 805498737632, 805498737649, 805498737748, 805498737762, 805498737892, 805498737908, 805498737915, 805498737922, 805498737939, 805498798282, 805498798299, 805498798305, 805498798312, 805498798329, 805498798336, 805498798343, 805498798350, 805498002464, 805498917287, 805498917300, 805498917317, 805498917324, 805498917331, 805498997401, 805498997418, 805498997425, 805498997432, 805498997449, 805498997456, 805498997463, 805498997470, 805498997531, 805498997548, 805498997555, 805498997562, 805498997579, 805498997586, 805498997593, 805498998088, 805498998095, 805498998101, 805498998118, 805498998125]</con:value></con:property><con:property><con:name>UserID</con:name><con:value>2158124609</con:value></con:property><con:property><con:name>upcnumber</con:name><con:value>22548313008</con:value></con:property><con:property><con:name>req</con:name><con:value>{"additemsrequest": {"userid": "${#TestSuite#userID}","quantity": 1,"upcnumber": "${#TestSuite#upcnumber}"}}</con:value></con:property><con:property><con:name>UPC1</con:name><con:value>2218078</con:value></con:property><con:property><con:name>UPC2</con:name><con:value>2174904</con:value></con:property><con:property><con:name>ProdId1</con:name><con:value>1174607</con:value></con:property><con:property><con:name>ProdId2</con:name><con:value>1158434</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="15A-Defect-ContextParam"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="V3/catalog//browseproducts" searchProperties="true" id="711be4e2-9362-4810-b8cd-86b55d5f6925"><con:settings/><con:testStep type="jdbc" name="JDBC Request" id="8177df27-6f95-4dcd-8f0b-8e5db951f6db"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>com.ibm.db2.jcc.DB2Driver</con:driver><con:connectionString>jdbc:db2://${#Project#DB_Server}:${#Project#DB_Port}/${#Project#DB_Name}:user=${#Project#DB_User};password=PASS_VALUE;</con:connectionString><con:password>${#Project#DB_Password}</con:password><con:query>select cat_id from Unary_Cat_Attr_Val where ATTR_NAME='MOBILE_DISPLAY_NAME' fetch first 1 rows only</con:query><con:assertion type="GroovyScriptAssertion" name="Assert node [UNARY_CAT_ATTR_VAL.CAT_ID]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def CatId_Mobile = holder.getNodeValue( "//Results[1]/ResultSet[1]/Row[1]/UNARY_CAT_ATTR_VAL.CAT_ID[1]" )

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "CatId_Mobile", CatId_Mobile )
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="httprequest" name="V3/catalog//browseproducts?show=categorytree" id="44f4f76b-8fae-4c57-b8df-dd6e6fe1bae7">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="V3/catalog//browseproducts?show=categorytree" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#TestSuite#CatId_Mobile}/browseproducts?show=categorytree</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//*:CategoryResponse/category//categorypageurl" )


//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Cat Name != Mobile Name]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def cat_name = holder.getNodeValue( "//*:CategoryResponse/category/summary/name" )
def mobileName = holder.getNodeValue( "//*:CategoryResponse/category/summary/mobileName" )

assert !cat_name.toString().equals(mobileName.toString())
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [mobileName]" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def mobileNames = holder.getNodeValues( "//*:CategoryResponse/category//mobileName" )

log.info mobileNames.toString()

assert mobileNames != null
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="V3/catalog//browseproducts?show=categorytree-MOBILE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="V3/catalog//browseproducts?show=categorytree-MOBILE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#TestSuite#CatId_Mobile}/browseproducts?show=categorytree&amp;application=Mobile</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//*:CategoryResponse/category//categorypageurl" )


//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Cat Name != Mobile Name]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def cat_name = holder.getNodeValue( "//*:CategoryResponse/category/summary/name" )
def mobileName = holder.getNodeValue( "//*:CategoryResponse/category/summary/mobileName" )

assert !cat_name.toString().equals(mobileName.toString())
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>44f4f76b-8fae-4c57-b8df-dd6e6fe1bae7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8177df27-6f95-4dcd-8f0b-8e5db951f6db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>CatId_Mobile</con:name><con:value>3358</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="15A_MT29576.MT29577-V4 Category Suggestor-FIX IT"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties><con:property><con:name>Facet</con:name><con:value>SPECIAL_OFFERS</con:value></con:property><con:property><con:name>Facet_Value</con:name><con:value>Sales+%26+Discounts</con:value></con:property></con:properties><con:reportParameters/><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Find Category" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c3f4d25e-5ea3-42a8-8f12-7b5913b17e1a"><con:settings/><con:testStep type="httprequest" name="Category Index"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Category Index" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/index</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Fetching Categories"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
def holder = new XmlHolder( messageExchange.responseContentAsXml )
if (header["#status#"].toString().contains("200 OK")){
	def categories = holder.getNodeValues( "//*:CategoryResponse/category[not(categorytype='GoTo')]//@id" )
	//log.info categories.toString()
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "categories", categories.toString() )
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "flag",'false' )
//	assert categories != null
}
else{
	return "TestCase Failed  - " +header["#status#"].toString()
}
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script"><con:settings/><con:config><script>def categories=context.expand('${#TestCase#categories}')
def flag=context.expand('${#TestCase#flag}')

if(categories.size()>0){	
	def catIds = categories.replaceAll(" ","").replace("[","").replace("]","")
	String[] category = catIds.split(",")	
	for (int i=0; i&lt;category.length; i++){
		if (flag=='false'){
			testRunner.testCase.setPropertyValue( "catId", category[i] )	
			testRunner.runTestStepByName( "browseproducts")
		}		
	}
	testRunner.gotoStepByName( "browseproducts2")
}	
</script></con:config></con:testStep><con:testStep type="httprequest" name="browseproducts"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="browseproducts" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#TestCase#catId}/browseproducts?show=product,facet,productpool,categorytree</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set Category with [product,facet,productpool]"><con:configuration><scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder
def catId = context.expand('${#TestCase#catId}')
def flag=context.expand('${#TestCase#flag}')
def holder = new XmlHolder( messageExchange.responseContentAsXml )

//def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
//log.info header.toString()

//if (header["#status#"].toString().contains("200 OK") && flag=='false'){	
	def product = holder.getNodeValue( "//*:CategoryResponse/category/product" )
	def facet = holder.getNodeValue( "//*:CategoryResponse/category/facet" )
	def productpool = holder.getNodeValue( "//*:CategoryResponse/category/productpool" )
	def category = holder.getNodeValue( "//*:CategoryResponse/category/category" )	

	if (product != null && facet != null && productpool != null && category != null){
		messageExchange.modelItem.testStep.testCase.testSuite.project.setPropertyValue( "catId", catId )
		messageExchange.modelItem.testStep.testCase.setPropertyValue( "flag", 'true' )
		log.info "success"
	}
//}
//def flag=context.expand('${#TestCase#flag}')
//log.info flag.toString()
]]></scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="browseproducts2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="browseproducts2" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product,facet,productpool,categorytree</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties><con:property><con:name>categories</con:name><con:value>[22865, 23375, 23589, 1000376, 1000606, 1001501, 1001736, 1001743, 1001737, 1001738, 1001740, 1001739, 1001741, 1001742, 1002360, 1002984, 1003040, 1003430, 1003602, 1003788, 1003789, 1003872, 1003873, 1003874, 1003875, 1003790, 1003876, 1003877, 1003878, 1003879, 1003791, 1003880, 1003882, 1003881, 1003883, 1003792, 1003884, 1003885, 1003887, 1003886, 1003793, 1003888, 1003889, 1003890, 1003891, 1003921, 1003922, 1003928, 1003929, 1003930, 1003931, 1003932, 1003923, 1003933, 1003934, 1003935, 1003936, 1003937, 1003924, 1003938, 1003939, 1003940, 1003941, 1003942, 1003925, 1003943, 1003944, 1003945, 1003946, 1003947, 1003926, 1003948, 1003949, 1003950, 1003951, 1003952, 1003927, 1003953, 1003954, 1003955, 1003956, 1003957, 20873, 20874, 20878, 20879, 22866, 1004402, 22867, 1000377, 1000387, 1000386, 1000390, 1000392, 1000397, 1000388, 1000403, 1000404, 1000405, 1000406, 1000409, 1000410, 1000526, 1000389, 1000400, 1000401, 1000629, 1000631, 1000632, 23176, 1004411, 4358, 1000378, 1004055, 22926, 22931, 23029, 1000380, 2910, 1003651, 1003058, 1003697, 1003738, 1003740, 1001035, 1004434, 1001037, 1003305, 1001940, 1004655, 3016, 11817, 1001521, 1001721, 1000658, 1001962, 1001834, 1001520, 1001979, 1001720, 5545, 1004780, 1002524, 1003420, 21683, 1001980, 1002521, 1004670, 1003152, 15299, 5566, 5567, 20910, 16919, 22935, 5577, 19556, 5576, 17558, 1000089, 1000321, 1000622, 1003447, 17566, 19950, 19951, 21429, 12374, 1003699, 5609, 1004623, 1002622, 22314, 5619, 1002083, 1001831, 1001832, 10527, 1004807, 1003650, 17378, 1003656, 9326, 17872, 1001581, 1002520, 1002509, 10192, 1003361, 1003034, 1004220, 1004226, 23671, 1002319, 1003284, 1001825, 1002444, 1004394, 1004234, 1001369, 1003628, 1004427, 1004744, 1004743, 1003632, 1003648, 1004669, 1004625, 1004588, 1001627, 1004468, 21846, 4360, 8702, 15968, 15970, 15971, 19445, 19647, 20222, 20549, 21719, 21919, 22109, 1002093, 1002627, 1002641, 1002632, 1002643, 1000381, 2916, 22299, 22300, 1004620, 23527, 1001857, 1001858, 1001859, 1003246, 21652, 23614, 22885, 21658, 21659, 21660, 21653, 21669, 21670, 1000625, 21672, 21673, 21671, 1003455, 1001266, 21656, 22703, 1001914, 1003546, 1003669, 1003670, 1003686, 1003671, 1004818, 3206, 20138, 1000382, 1003705, 1000383, 2911, 1003652, 1002986, 1001036, 1004435, 1001038, 1003306, 1001941, 1004656, 2920, 8613, 1001523, 1001723, 1001522, 1001722, 8573, 1004781, 1002528, 1003549, 8608, 1001981, 1003591, 1004672, 1003153, 15300, 17613, 17614, 22936, 22315, 17616, 17615, 1000090, 1001041, 1001042, 1004552, 5451, 19952, 19953, 21434, 12629, 1002233, 8722, 1004624, 22316, 10026, 1002084, 2941, 1002998, 21648, 1001622, 1003653, 1002511, 5363, 1004235, 1003035, 1004228, 1004231, 1004236, 1004283, 1004230, 1002987, 1002445, 1004237, 1000304, 1001621, 1003036, 1003633, 1004525, 1004526, 1004431, 1003637, 1003649, 1004671, 1004469, 1001626, 1004626, 21855, 15969, 19446, 19558, 20139, 21720, 22880, 23073, 1002094, 1000384, 1001876, 1001877, 1001894, 1001893, 1001896, 1001897, 1001880, 1001898, 1001899, 1001901, 1001902, 1001878, 1001906, 1001907, 1001909, 1001910, 1001881, 1001917, 1001918, 1001919, 1001921, 1001882, 1001922, 1001923, 1001924, 1001926, 1000213, 4359, 5386, 19447, 20224, 20551, 21721, 21918, 1002092, 1002760, 1002761, 1002766, 1002767, 1002768, 1002769, 1003125, 1004375, 1002762, 1002770, 1002771, 1002772, 1002773, 1003126, 1004376, 1002763, 1002774, 1002775, 1002777, 1002779, 1003127, 1004377, 1002764, 1002782, 1002783, 1002784, 1002785, 1003128, 1004378, 1002765, 1002786, 1002787, 1002788, 1002789, 1003129, 1004379, 1003124, 1003131, 1003132, 1003133, 1003134, 1003135, 1004381, 1004180, 1004369, 1004370, 1004371, 1004372, 1004373, 1004374, 1000214, 4361, 20552, 21722, 21920, 1000488, 1002507, 1003567, 1004498, 1003485, 1004520, 1003695, 22256, 16307, 21717, 21917, 22701, 1000215, 1000651, 21718, 1000950, 22886, 1000628, 1003780, 2921, 3358, 1004627, 7138, 16541, 1000287, 1001724, 1001726, 1001855, 1001727, 1001745, 1003730, 1004769, 14685, 14812, 14720, 14721, 14797, 14806, 14811, 18437, 1000624, 14716, 14846, 14861, 20409, 15967, 14873, 14896, 3375, 17063, 17068, 1003272, 1003273, 1003274, 17089, 1000169, 17094, 1003275, 1000926, 1001019, 1001020, 1001070, 1001075, 1001279, 1001076, 1001071, 1001072, 1001073, 1001077, 1001288, 1001074, 1001078, 1001280, 1001021, 1001152, 1001281, 1001151, 1001282, 1001154, 1001155, 1001153, 1001022, 1001102, 1001103, 1001104, 1001064, 1001105, 1001734, 1001023, 1004760, 1001108, 1002095, 1002098, 1001109, 1001110, 1001284, 1001107, 1001285, 1001286, 6830, 21527, 7327, 7328, 7330, 7331, 19181, 1003043, 6831, 7515, 19160, 7510, 7511, 7512, 7514, 7516, 7518, 1002612, 1002613, 1003850, 6841, 14550, 7639, 1003055, 7645, 7649, 7651, 7654, 7657, 7675, 1001368, 1001689, 23542, 17973, 17975, 17976, 17985, 17974, 1003477, 21050, 21051, 21052, 21053, 21054, 21055, 17944, 17951, 1003077, 1003078, 1003079, 1003080, 1003081, 17953, 17954, 1003082, 19382, 19385, 19392, 1001392, 19402, 19406, 6864, 7158, 7159, 7177, 7192, 6865, 15187, 1002776, 1002778, 1002781, 7255, 7262, 7269, 17745, 18029, 17759, 17746, 17753, 17772, 17780, 1002873, 1003356, 17765, 1003357, 17767, 1003358, 11047, 11049, 11052, 11053, 11073, 8981, 8982, 8983, 8984, 6886, 1001292, 1001293, 1001294, 1001295, 1001296, 1001297, 1001298, 1001299, 1001300, 1001301, 1001302, 1001304, 1003869, 1001372, 1001728, 1002078, 1001730, 1002069, 5408, 5410, 5409, 5411, 1000202, 1001267, 1000627, 1003019, 23596, 1000440, 1001268, 1000623, 1001210, 22699, 1000528, 1000529, 1000530, 1000531, 1003568, 1003754, 1003109, 2917, 3695, 3697, 1004770, 1004766, 1002043, 1004511, 1002861, 3696, 5471, 5466, 5467, 3704, 16308, 16184, 1003698, 5503, 1000444, 9026, 1004223, 1004280, 1003685, 1004281, 1003285, 1004279, 6085, 3376, 1001573, 1001574, 1001576, 1003041, 1003616, 1001575, 1001577, 1004412, 1001569, 1001781, 1004661, 1004690, 19469, 19500, 20532, 3619, 3627, 8701, 3628, 19441, 19442, 19443, 19444, 3629, 3630, 1000342, 20033, 3621, 1003486, 4520, 3620, 3631, 1000604, 21311, 21485, 3637, 20034, 6508, 1002474, 1004161, 1004791, 1002979, 1002213, 1004722, 1003047, 1003051, 1003052, 1003054, 1003053, 1002928, 1003696, 1004182, 1004183, 1004184, 1003020, 1001355, 1003624, 1003625, 1003627, 1003626, 8293, 3864, 1004776, 1004777, 1004778, 1004779, 1004783, 1004784, 1004785, 1004786, 1004787, 1004788, 1004789, 3877, 20592, 1004238, 1002077, 1004621, 1004762, 1004720, 10166, 1004734, 17648, 11548, 17647, 1004732, 1004733, 1003569, 10172, 1004554, 10189, 1000663, 11576, 1000074, 1003462, 10258, 1003490, 11536, 10237, 1000045, 1000055, 1004747, 1000046, 1001183, 1000050, 1001314, 1000051, 1004224, 1000053, 1000054, 1000058, 1000070, 1000059, 1000060, 1000067, 1000061, 1000062, 1003733, 1000068, 1000833, 1003731, 1000065, 1000066, 6504, 1002954, 1004208, 1002347, 1004382, 1004209, 1004210, 1004211, 1004689, 1004688, 1004212, 1003245, 1002953, 1002988, 1004213, 1004687, 1001359, 1001147, 3865, 1002512, 1004798, 1001545, 1004654, 1003496, 1002555, 1002516, 1004306, 1000241, 1000242, 1004676, 1004678, 1004680, 1004681, 1004679, 1004677, 1000243, 1000244, 1000231, 1000233, 1000232, 1000234, 1000246, 1000245, 1000235, 1000236, 1000237, 1000238, 1000239, 1000240, 1000265, 1001539, 1001541, 1001542, 1001543, 1001009, 1001546, 1001547, 1001548, 1001971, 1004729, 1003681, 1004589, 1000250, 1002011, 1000255, 1001550, 1000257, 1001973, 1004815, 1003451, 1004816, 1004817, 1003107, 15873, 1004073, 1004403, 1004093, 1004069, 1003289, 1003298, 1003295, 1003291, 1003292, 1003293, 1003296, 1003297, 1004059, 1001360, 8108, 4114, 22432, 22433, 22434, 22435, 22438, 22439, 22449, 23379, 22787, 23380, 22440, 22441, 22442, 22443, 22444, 22445, 22446, 22447, 22448, 8237, 23488, 22939, 8241, 8240, 8242, 22431, 1000306, 1000343, 1000344, 1000345, 1000346, 1000347, 1000348, 1000349, 1000350, 1000360, 1001361, 22964, 4279, 9497, 9498, 9499, 22392, 6455, 19176, 19596, 19598, 19599, 19600, 19256, 6457, 1001592, 19264, 21641, 9621, 22341, 1001466, 16052, 1001467, 1001364, 22968, 8147, 16028, 8150, 8148, 1000230, 8149, 8151, 8152, 22965, 4282, 6462, 23489, 23490, 23491, 23492, 23501, 23502, 23504, 6602, 11613, 11617, 11614, 11615, 6603, 1001365, 22969, 1001393, 1001782, 1001469, 1003701, 1001470, 1001783, 4283, 4730, 4740, 4741, 4742, 15419, 15420, 15424, 15426, 15427, 4729, 4735, 8203, 8204, 1004712, 1004715, 1004713, 1004714, 1004691, 8205, 18846, 22967, 1001499, 1002042, 1002054, 3866, 23707, 1004349, 23708, 23712, 23713, 1003751, 1000107, 1001244, 23715, 1003141, 1000307, 1004563, 10104, 23719, 23720, 1003142, 1003116, 1004565, 1004566, 1004567, 10147, 23722, 23723, 1003143, 1004562, 1004568, 1004569, 1004570, 1001234, 1001235, 1001312, 1001681, 1004517, 1004765, 1001238, 1002580, 1004516, 1002625, 1001236, 3867, 1002989, 1002962, 1003247, 1004232, 1004233, 1001358, 8126, 3948, 1004802, 1004803, 1004804, 1004805, 1004806, 3949, 3954, 3955, 19507, 3977, 3979, 3985, 19718, 4841, 5070, 5303, 1001014, 1001174, 5320, 6466, 6468, 8434, 6467, 6470, 6476, 5220, 19968, 1003304, 1004750, 6721, 11943, 19210, 1002701, 1002702, 1002704, 1002703, 19209, 1002709, 1002710, 1002712, 1002711, 19211, 1002713, 1002714, 1002716, 1002715, 1002695, 1002721, 1002722, 1002723, 1002724, 11945, 1002717, 1002718, 1002719, 1002720, 13668, 1001655, 1001656, 1001657, 1001658, 1001659, 1001808, 1001660, 1001661, 1001593, 1004746, 1001598, 1004351, 1004613, 1004343, 1004612, 1004344, 1004352, 1004345, 1004346, 1004347, 1004360, 1004356, 1004614, 1004357, 1004615, 1004354, 1004348, 1004353, 1004361, 1004358, 1004616, 1004359, 1004355, 1003087, 1004304, 1004292, 1004518, 1004289, 1004463, 1004287, 1004513, 1004295, 1004285, 1004512, 1004291, 1004288, 1004519, 1004303, 1004299, 1004293, 1004514, 1004300, 1004290, 1004297, 1004286, 1004522, 1004296, 1004305, 1004301, 1004284, 1004551, 1004302, 1004298, 1002686, 22179, 1003612, 1003611, 1003603, 1003607, 1003605, 1003604, 1004416, 1003610, 1003585, 1004749, 1003574, 1004501, 1003413, 1004659, 1002739, 1004400, 15514, 1004666, 1004618, 1004682, 1004667, 1004683, 15361, 1003315, 1004668, 1004684, 1002581, 1002585, 1004730, 1001638, 1004560, 1004561, 1004619, 16958, 17449, 1000341, 1004808, 22559, 23173, 1004462, 1004768, 1000986, 22173, 1003761, 1004819, 1004660, 23556, 1002980, 1004823, 1002981, 1004178, 1002983, 1004179, 1003684, 1004176, 1004177, 1003031, 1003032, 1001356, 16959, 1000369, 1002209, 17309, 17310, 17311, 1002230, 17312, 17314, 19993, 17316, 1000414, 1000415, 1000416, 1000417, 1000431, 17426, 16961, 17523, 1000674, 1004809, 1004464, 1004767, 23268, 1004432, 17526, 1000978, 19852, 1003487, 1004662, 16962, 19212, 1000692, 1002295, 16963, 17396, 17397, 1000693, 17398, 17399, 17400, 17402, 17411, 17355, 1002965, 1001939, 1004214, 1004215, 1002964, 1002966, 1002725, 1004218, 1004822, 1004217, 1003756, 1002963, 1004367, 1004368, 1001354, 17412, 17602, 17603, 17367, 16975, 16976, 1002862, 1004239, 1001277, 17802, 20548, 17804, 17805, 17806, 1000374, 22108, 23420, 1001010, 1000931, 17787, 1002177, 1004718, 1003871, 1003992, 1004313, 1004307, 1004314, 1004315, 1000375, 1004308, 1004309, 1004310, 23694, 17796, 21107, 20949, 1001508, 1003023, 1003022, 1001509, 1000143, 1000145, 1001506, 17799, 22089, 18398, 18399, 18401, 18403, 18400, 23662, 17536, 20566, 22110, 22678, 22679, 22680, 22681, 22682, 22683, 22684, 22685, 22686, 22687, 22689, 22690, 22691, 22692, 22693, 22700, 22702, 23649, 1000142, 1000163, 1000164, 1000326, 1000329, 1000330, 1000331, 1000332, 1000333, 1000334, 1000335, 1000336, 1000357, 1000428, 1000429, 1000430, 1000468, 1000521, 1000523, 1000522, 1000525, 1000524, 1000605, 1000637, 1000639, 1000640, 1000641, 1000644, 1000966, 1000967, 1003371, 1002870, 1002871, 1002872, 1000968, 1002950, 1002951, 1002952, 1000969, 1002955, 1002956, 1002957, 1002869, 1002958, 1002959, 1002960, 1000995, 1000996, 1000997, 1000998, 1000999, 1001000, 1001003, 1001047, 1001059, 1001063, 1001062, 1001061, 1001069, 1001111, 1001160, 1001168, 1001250, 1001351, 1001337, 1001339, 1001340, 1001342, 1001341, 1001338, 1001343, 1001344, 1001352, 1001345, 1001346, 1001347, 1001348, 1001349, 1001350, 1001396, 1001419, 1001478, 1001836, 1002023, 1002068, 1002074, 1002088, 1002096, 1002097, 1002099, 1002100, 1002101, 1002102, 1002103, 1002104, 1002446, 1002447, 1002160, 1003551, 1002162, 1003042, 1003030, 1002656, 1002163, 1002164, 1002165, 1002105, 1002106, 1002107, 1002108, 1002109, 1002111, 1002179, 1002438, 1002442, 1002486, 1002485, 1002482, 1003279, 1002441, 1002481, 1002483, 1002484, 1003280, 1002440, 1002478, 1002479, 1002480, 1003278, 1002439, 1002475, 1002476, 1002477, 1003281, 1002605, 1002609, 1004555, 1004556, 1002611, 1002607, 1002608, 1002606, 1004557, 1004558, 1002610, 1002644, 1002663, 1002727, 1002728, 1002733, 1002741, 1002742, 1002743, 1002729, 1002744, 1002745, 1002746, 1002747, 1002730, 1002748, 1002749, 1002750, 1002751, 1002731, 1002752, 1002753, 1002754, 1002755, 1004433, 1002732, 1002756, 1002757, 1002758, 1002759, 1002791, 1002793, 1003639, 1002801, 1002802, 1002803, 1002804, 1002805, 1002806, 1003638, 1003672, 1003674, 1003675, 1003676, 1003677, 1003678, 1003679, 1002794, 1002807, 1003640, 1002808, 1002809, 1002810, 1002811, 1002820, 1002795, 1002814, 1003641, 1002815, 1002816, 1002817, 1002818, 1002819, 1002796, 1002821, 1003642, 1002822, 1002823, 1002824, 1002825, 1002826, 1003643, 1002797, 1002827, 1003644, 1002829, 1002830, 1002831, 1002832, 1002844, 1002798, 1002833, 1003645, 1002834, 1002835, 1002836, 1002837, 1002838, 1002800, 1002839, 1003646, 1002840, 1002841, 1002842, 1002843, 1003680, 1002845, 1002846, 1002848, 1002849, 1002847, 1002850, 1002851, 1002852, 1002855, 1002856, 1002853, 1002857, 1002858, 1002854, 1002859, 1002860, 1002874, 1002875, 1002882, 1002883, 1002884, 1002885, 1002886, 1002887, 1002876, 1002888, 1002889, 1002890, 1002891, 1002892, 1002893, 1002877, 1002894, 1002895, 1002896, 1002897, 1002898, 1002899, 1002878, 1002900, 1002901, 1002902, 1002903, 1002904, 1002905, 1002879, 1002906, 1002907, 1002908, 1002909, 1002910, 1002911, 1002880, 1002912, 1002913, 1002914, 1002915, 1002916, 1002917, 1002881, 1002918, 1002919, 1002920, 1002921, 1002922, 1002923, 1002924, 1002925, 1002930, 1002931, 1002932, 1002933, 1002926, 1002934, 1002935, 1002936, 1002937, 1002927, 1002938, 1002939, 1002940, 1002941, 1002929, 1002946, 1002947, 1002948, 1002949, 1003313, 1002942, 1002943, 1002944, 1002945, 1002996, 1003017, 1003024, 1003025, 1003026, 1003110, 1003111, 1003114, 1003154, 1003180, 1003172, 1003173, 1003174, 1003175, 1003176, 1003177, 1003178, 1003179, 1003155, 1003181, 1003182, 1003183, 1003184, 1003185, 1003186, 1003187, 1003188, 1003171, 1004630, 1004632, 1004633, 1004634, 1004635, 1004636, 1004637, 1004638, 1003156, 1003189, 1003190, 1003191, 1003192, 1003193, 1003194, 1003195, 1003196, 1003157, 1003197, 1003198, 1003199, 1003200, 1003201, 1003202, 1003203, 1003204, 1003158, 1003205, 1003206, 1003207, 1003208, 1003209, 1003210, 1003211, 1003212, 1003159, 1003213, 1003214, 1003215, 1003216, 1003217, 1003218, 1003219, 1003220, 1003160, 1003221, 1003222, 1003223, 1003224, 1003225, 1003226, 1003227, 1003228, 1004775, 1003115, 1003229, 1003230, 1003231, 1003232, 1003233, 1003234, 1003235, 1003236, 1003161, 1003237, 1003238, 1003239, 1003241, 1003240, 1003242, 1003243, 1003244, 1003149, 1003347, 1003254, 1003283, 1003342, 1003308, 1003310, 1003311, 1003309, 1003312, 1003325, 1003337, 1003331, 1003438, 1003328, 1003435, 1003326, 1003433, 1003327, 1003434, 1003334, 1003441, 1003332, 1003439, 1003330, 1003437, 1003329, 1003436, 1003333, 1003440, 1003340, 1003375, 1003382, 1003383, 1003384, 1003386, 1003387, 1003388, 1003392, 1003389, 1003390, 1003391, 1003429, 1003453, 1003500, 1003501, 1003502, 1003503, 1003504, 1003505, 1003506, 1003508, 1003509, 1003510, 1003511, 1003593, 1003601, 1003615, 1003617, 1003620, 1003623, 1003689, 1003690, 1003702, 1003703, 1003704, 1003712, 1003691, 1003713, 1003714, 1003715, 1003716, 1003692, 1003717, 1003718, 1003719, 1003720, 1003693, 1003721, 1003722, 1003723, 1003724, 1003758, 1003694, 1003725, 1003726, 1003727, 1003728, 1003729, 1003732, 1003763, 1003744, 1003736, 1003773, 1003774, 1003735, 1003742, 1003764, 1003737, 1004547, 1004549, 1004548, 1004550, 1003739, 1003752, 1003757, 1003782, 1003804, 1003802, 1003806, 1003760, 1003807, 1003808, 1003809, 1003759, 1003812, 1003813, 1003816, 1003781, 1003818, 1003821, 1003822, 1003783, 1003784, 1003785, 1003824, 1003786, 1003825, 1003794, 1003795, 1003826, 1003827, 1003829, 1003796, 1003832, 1003833, 1003834, 1003797, 1003835, 1003836, 1003837, 1003798, 1003838, 1003839, 1003841, 1003800, 1003810, 1004153, 1003811, 1004154, 1003801, 1003803, 1003805, 1003814, 1004155, 1004157, 1004158, 1003815, 1004159, 1004162, 1004163, 1003819, 1004168, 1004169, 1004171, 1003820, 1004172, 1004173, 1004175, 1003823, 1003828, 1003909, 1003910, 1003830, 1003911, 1003912, 1003831, 1003913, 1003914, 1003843, 1003847, 1004114, 1004117, 1004107, 1004075, 1004110, 1004115, 1004108, 1004106, 1004109, 1004111, 1003849, 1003844, 1003848, 1004113, 1004118, 1003845, 1003851, 1003852, 1003854, 1003853, 1003855, 1003856, 1003857, 1003860, 1003858, 1003859, 1003861, 1003863, 1004100, 1004103, 1003865, 1004094, 1004098, 1004104, 1004095, 1004096, 1004099, 1004101, 1004097, 1003862, 1003867, 1004102, 1004105, 1003868, 1003870, 1003892, 1003893, 1003896, 1003898, 1003895, 1003902, 1003904, 1003905, 1003907, 1003906, 1003908, 1003915, 1003916, 1003958, 1003960, 1003959, 1003961, 1003917, 1003962, 1003966, 1003964, 1003965, 1003918, 1003967, 1003968, 1003969, 1003970, 1003919, 1003971, 1003972, 1003973, 1003974, 1003920, 1003975, 1003976, 1003977, 1003979, 1003978, 1003980, 1003984, 1003981, 1003983, 1003982, 1003986, 1003987, 1003989, 1003988, 1003991, 1003990, 1003993, 1003994, 1004000, 1003995, 1004001, 1003996, 1003997, 1004456, 1004457, 1003998, 1004458, 1004459, 1003999, 1004460, 1004461, 1004745, 1004003, 1004005, 1004006, 1004007, 1004008, 1004013, 1004014, 1004723, 1004724, 1004010, 1004018, 1004020, 1004725, 1004726, 1004011, 1004021, 1004023, 1004727, 1004728, 1004716, 1004739, 1004740, 1004741, 1004742, 1004717, 1004737, 1004736, 1004738, 1004735, 1004024, 1004025, 1004026, 1004030, 1004027, 1004032, 1004034, 1004028, 1004036, 1004037, 1004029, 1004031, 1004038, 1004039, 1004033, 1004041, 1004043, 1004035, 1004044, 1004045, 1004040, 1004046, 1004049, 1004145, 1004050, 1004243, 1004244, 1004047, 1004051, 1004146, 1004052, 1004245, 1004246, 1004144, 1004148, 1004149, 1004150, 1004249, 1004250, 1004048, 1004053, 1004054, 1004147, 1004247, 1004248, 1004240, 1004251, 1004252, 1004253, 1004254, 1004255, 1004241, 1004256, 1004257, 1004258, 1004259, 1004260, 1004056, 1004057, 1004061, 1004063, 1004058, 1004064, 1004065, 1004060, 1004066, 1004067, 1004062, 1004068, 1004070, 1004142, 1004071, 1004143, 1004072, 1004074, 1004081, 1004085, 1004086, 1004083, 1004087, 1004088, 1004084, 1004089, 1004090, 1004076, 1004079, 1004091, 1004082, 1004092, 1004077, 1004078, 1004151, 1004080, 1004152, 1004112, 1004116, 1004261, 1004120, 1004262, 1004121, 1004122, 1004124, 1004811, 1004187, 1004189, 1004190, 1004125, 1004810, 1004191, 1004193, 1004194, 1004764, 1004792, 1004793, 1004794, 1004795, 1004127, 1004812, 1004199, 1004201, 1004203, 1004128, 1004813, 1004204, 1004205, 1004207, 1004123, 1004129, 1004130, 1004263, 1004264, 1004132, 1004266, 1004131, 1004265, 1004133, 1004134, 1004267, 1004268, 1004269, 1004135, 1004270, 1004271, 1004272, 1004136, 1004273, 1004274, 1004275, 1004137, 1004276, 1004277, 1004278, 1004350, 1004362, 1004363, 1004365, 1004364, 1004366, 1004390, 1004391, 1004395, 1004392, 1004396, 1004415, 1004418, 1004419, 1004436, 1004437, 1004438, 1004439, 1004420, 1004440, 1004441, 1004442, 1004443, 1004421, 1004444, 1004445, 1004446, 1004447, 1004422, 1004448, 1004449, 1004450, 1004451, 1004423, 1004452, 1004453, 1004454, 1004455, 1004470, 1004471, 1004472, 1004499, 1004530, 1004531, 1004535, 1004536, 1004537, 1004532, 1004538, 1004539, 1004540, 1004534, 1004541, 1004542, 1004543, 1004533, 1004544, 1004545, 1004546, 1004564, 1004574, 1004582, 1004575, 1004581, 1004579, 1004578, 1004580, 1004577, 1004583, 1004587, 1004576, 1004596, 1004597, 1004642, 1004643, 1004644, 1004599, 1004645, 1004646, 1004647, 1004600, 1004648, 1004649, 1004650, 1004601, 1004651, 1004652, 1004653, 1004598, 1004606, 1004607, 1004763, 1004610, 1004609, 1004641, 1004611, 1004751, 1004752, 1004753, 1004754, 1004771, 1004773, 1004828, 1004829, 1004772, 1004826, 1004827, 1004774, 1004830, 1004831, 1004782, 1004790]</con:value></con:property><con:property><con:name>catId</con:name><con:value>1004790</con:value></con:property><con:property><con:name>flag</con:name><con:value>false</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC1_Verify for suggested category" searchProperties="true" id="2e9dc029-5a76-45d3-b3a7-0553c43828de"><con:settings/><con:testStep type="httprequest" name="Valid request with redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid request with redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>301</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/@id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [categorypageurl]"><con:configuration><path>exists( //*:CategoryResponse/category/summary/categorypageurl)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC2_Verify summary object" searchProperties="true" id="9bcc5b8b-8263-43a4-85ef-806d41e47fbb"><con:settings/><con:testStep type="httprequest" name="Valid request with redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid request with redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>301</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/@id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [product]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [categorypageurl]"><con:configuration><path>exists( //*:CategoryResponse/category/summary/categorypageurl)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC3_Verify error message with redirect false" searchProperties="true" id="62fd2530-7912-40d9-a6a2-6f78506ff96b"><con:settings/><con:testStep type="httprequest" name="redirect false"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="redirect false" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=false</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC4_Verify default redirect" searchProperties="true" id="56d12d9b-5f43-441f-9b0e-d67464ce037d"><con:settings/><con:testStep type="httprequest" name="Blank"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Blank" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Non-Boolean"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Non-Boolean" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=invalid</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Numerals"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Numerals" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=12345</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Special Characters"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Special Characters" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=!@!@</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="No redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="No redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC5_Invalid Data Format Category" searchProperties="true" id="37deddef-f69b-4255-b87d-1bdc28c33f16"><con:settings/><con:testStep type="httprequest" name="-ve Category with redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="-ve Category with redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/-123/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>103</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Incorrect arguments types or combination</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>category Id cannot be negative</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Char Category with redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Char Category with redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/abc/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>103</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Incorrect arguments types or combination</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Ambiguous values for id parameter</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="SpChar Category with redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="SpChar Category with redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/**/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>103</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>Incorrect arguments types or combination</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Ambiguous values for id parameter</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eb6660f7-ef8b-4fa3-8ca5-0787b75a4433</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC6_Valid category &amp; redirect=true" searchProperties="true" id="2ac50590-9cb7-4683-88f7-a297ccf3561a"><con:settings/><con:testStep type="httprequest" name="Valid category"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [facet]" disabled="true"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category with show"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category with show" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product,facet,productpool</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [productpool]"><con:configuration><path>exists( //*:CategoryResponse/category/productpool)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [facet]"><con:configuration><path>exists( //*:CategoryResponse/category/facet)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties><con:property><con:name>Facet</con:name><con:value>SPECIAL_OFFERS</con:value></con:property><con:property><con:name>Facet_Value</con:name><con:value>Sales+%26+Discounts</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC7_Valid category &amp; redirect=true &amp; refinement" searchProperties="true" id="4be3e6a8-871b-4b8c-abf8-afd2c70063f0"><con:settings/><con:testStep type="httprequest" name="Valid category"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category]" disabled="true"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Facet]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Facet_Name = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/facet[1]/name[1]" )
def Value = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/facet['Facet']/value[1]/values[1]" )
//log.info Facet_Name.toString()

def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK") &amp;&amp; Facet_Name.toString() != 'null'){
	Facet=URLEncoder.encode(Facet_Name,"UTF-8");
	Facet_Value=URLEncoder.encode(Value,"UTF-8");
//	log.info Facet.toString()
//	log.info Facet_Value.toString()
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "Facet", Facet )		
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "Facet_Value", Facet_Value )	
	}
else{
	"No Facets for the category"
}

//assert Facet != null
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category with show"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category with show" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product,facet,productpool</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [productpool]"><con:configuration><path>exists( //*:CategoryResponse/category/productpool)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [facet]"><con:configuration><path>exists( //*:CategoryResponse/category/facet)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category with refinement"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category with refinement" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;${#TestCase#Facet}=${#TestCase#Facet_Value}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category]" disabled="true"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [refinementName]"><con:configuration><path>//*:CategoryResponse[1]/inputRefinements[1]/refinementName[1]/text()</path><content>${#TestCase#Facet}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties><con:property><con:name>Facet</con:name><con:value>SPECIAL_OFFERS</con:value></con:property><con:property><con:name>Facet_Value</con:name><con:value>Sales+%26+Discounts</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC8_Valid refinements suggested category" searchProperties="true" id="83cc856f-7e3e-4d34-9abb-dffb297ff2ff"><con:settings/><con:testStep type="httprequest" name="GET Suggested Category"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Suggested Category" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=true</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>301</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [totalproducts]"><con:configuration><path>exists( //*:CategoryResponse/category/totalproducts)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [product] node"><con:configuration><path>exists( //*:CategoryResponse/category/product)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [suggested Category]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def req_category = context.expand('${#Project#catId_Suggestor}')
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def response_category = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/@id" )
messageExchange.modelItem.testStep.testCase.setPropertyValue( "response_category", response_category )	

assert req_category != response_category
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="GET Suggested Category's Refinement"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET Suggested Category's Refinement" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#TestCase#response_category}/browseproducts?show=facet</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Facet]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Facet_Name = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/facet[1]/name[1]" )
def Value = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/facet['Facet']/value[1]/values[1]" )
//log.info Facet_Value.toString()

def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK") &amp;&amp; Facet_Name.toString() != 'null'){
	Facet=URLEncoder.encode(Facet_Name,"UTF-8");
	Facet_Value=URLEncoder.encode(Value,"UTF-8");
//	log.info Facet.toString()
//	log.info Facet_Value.toString()
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "Facet", Facet )		
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "Facet_Value", Facet_Value )	
	}

assert Facet != null
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="InValid Category with Valid Refinement"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="InValid Category with Valid Refinement" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId_Suggestor}/browseproducts?redirect=true&amp;${#TestCase#Facet}=${#TestCase#Facet_Value}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>301</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [totalproducts]"><con:configuration><path>exists( //*:CategoryResponse/category/totalproducts)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [product] node"><con:configuration><path>exists( //*:CategoryResponse/category/product)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [bopsfacetavailable]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/bopsfacetavailable)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#TestCase#response_category}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties><con:property><con:name>Facet</con:name><con:value>BRAND</con:value></con:property><con:property><con:name>Facet_Value</con:name><con:value>HUGO+BOSS</con:value></con:property><con:property><con:name>response_category</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">10166</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c105a474-8d27-4f1a-a2d6-e4298a4c790d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC9_Valid category&amp;redirect=true&amp;invalid refinements" searchProperties="true" id="089cae6d-e699-4221-a26e-7595ea206c53"><con:settings/><con:testStep type="httprequest" name="Valid category &amp; invalid refinement Value"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category &amp; invalid refinement Value" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product,facet,productpool&amp;BRAND=Invalid</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>The page requested in unavailable. Total products for this search is only 0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category &amp; invalid refinement"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category &amp; invalid refinement" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product,facet,productpool&amp;A=B</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>301</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>//*:CategoryResponse[1]/@sortby</path><content>original</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>//*:CategoryResponse[1]/@show</path><content>product,facet,productpool</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [product]"><con:configuration><path>exists( //*:CategoryResponse/category/product)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>exists( //*:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON-existance of [facet]"><con:configuration><path>exists( //*:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON-existance of [category]"><con:configuration><path>exists( //*:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1c34780f-ec1f-470f-a26d-456f555a14a4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC10_Valid category&amp;redirect=false&amp;invalid refinements" searchProperties="true" id="6f19c1b1-1338-4b0a-b472-4f44ae8a5fa6"><con:settings/><con:testStep type="httprequest" name="Valid category&amp;Invalid refinements&amp;redirect=false"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;Invalid refinements&amp;redirect=false" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=false&amp;show=product,facet,productpool&amp;Invalid=Invalid</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>The page requested in unavailable. Total products for this search is only 0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC11_Valid category&amp;NO_redirect&amp;invalid refinements" searchProperties="true" id="e7861548-8879-4efa-8df4-32e4ce43f2c4"><con:settings/><con:testStep type="httprequest" name="Valid category&amp;Invalid refinements&amp;No_redirect"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;Invalid refinements&amp;No_redirect" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product,facet,productpool&amp;BRAND=Invalid</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>The page requested in unavailable. Total products for this search is only 0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC8_Valid category and refinements" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:settings/><con:testStep type="httprequest" name="Valid category&amp;sortby=customerrating"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=customerrating" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product&amp;sortby=customerrating</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>customerrating</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [customerrating]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValues( "//*:CategoryResponse[1]/category[1]/product[1]/product/summary[1]/customerrating[1]" )
log.info node.toString()

assert node != null
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=bestseller"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=bestseller" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product&amp;sortby=bestseller</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>bestseller</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=newarrival"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=newarrival" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product&amp;sortby=newarrival</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>newarrival</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [productstartdays]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValues( "//ns2:CategoryResponse[1]/category[1]/product[1]/product/summary[1]/productstartdays[1]" )
log.info node.toString()

assert node != null
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=price"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=price" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product&amp;sortby=price</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>price</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=toppicks"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=toppicks" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?redirect=true&amp;show=product&amp;sortby=toppicks</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>original</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26110305-1cf5-4811-8a66-0fd7ece64ba5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Browseproducts sorting" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f1dcc693-5ea3-40e1-a96d-e9c807ac5a6c"><con:settings/><con:testStep type="httprequest" name="Valid category&amp;sortby=customerrating"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=customerrating" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;sortby=customerrating</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>customerrating</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [prods sorted in customerrating]" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def customerrating = holder.getNodeValues( "//*:CategoryResponse/category/product/product/summary/customerrating" )
log.info customerrating.toString()

assert customerrating != null
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=bestseller"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=bestseller" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;sortby=bestseller</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>bestseller</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=newarrival"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=newarrival" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;sortby=newarrival</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>newarrival</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [productstartdays]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def productstartdays = holder.getNodeValues( "//*:CategoryResponse/category/product/product/summary/productstartdays" )
//log.info productstartdays.toString()

assert productstartdays != null
</scriptText></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=price"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=price" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;sortby=price</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>price</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=price asc"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=price asc" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;sortby=price&amp;sortorder=asc</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>price</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Valid category&amp;sortby=toppicks"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Valid category&amp;sortby=toppicks" postQueryString="false" mediaType="application/xml" id="6e1869bd-f077-4b3f-badd-75e036733006" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?show=product&amp;sortby=toppicks</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@sortby]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@sortby</path><content>original</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@show]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/@show</path><content>product</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
//ns2:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product] node"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [products]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [summary]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [facet]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/facet)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for non-existance of [category]"><con:configuration><path>declare namespace ns2='http://schemas.macys.com/definitions/ps/v3';
exists( //ns2:CategoryResponse/category/category)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:domain>declare namespace ns1=(${type_audio#Endpoint}) exists( //ns1:Response/ns1:userId)</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dc60a3a9-74a1-4978-a3ad-80dd7c43514f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26110305-1cf5-4811-8a66-0fd7ece64ba5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b88f264c-f4ed-4ced-9c5e-60e1484397e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aa0984d3-30b7-4867-a565-bb95badba25c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase></con:testSuite><con:testSuite name="ContextParam-Wedding"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="V3/catalog//browseproducts" searchProperties="true" id="d34df513-228c-448f-9868-e80655004c09"><con:settings/><con:testStep type="jdbc" name="JDBC Request-GET NON-WEDDING_TYPE Category"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>com.ibm.db2.jcc.DB2Driver</con:driver><con:connectionString>jdbc:db2://${#Project#DB_Server}:${#Project#DB_Port}/${#Project#DB_Name}:user=${#Project#DB_User};password=PASS_VALUE;</con:connectionString><con:password>${#Project#DB_Password}</con:password><con:query>select c.cat_id from Unary_Cat_Attr_Val uc inner join Category c on c.cat_id=uc.cat_id
where uc.attr_name='WEDDING_BROWSE_TYPE' and uc.ATTR_VALUE='Hide' 
and c.DISPLAY_STAT_CODE=1
fetch first 1 rows only</con:query><con:assertion type="GroovyScriptAssertion" name="Assert node [UNARY_CAT_ATTR_VAL.CAT_ID]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def CatId_Mobile = holder.getNodeValue( "//Results[1]/ResultSet[1]/Row[1]/CATEGORY.CAT_ID[1]" )

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "CatId_Mobile", CatId_Mobile )
</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="httprequest" name="V3/catalog//browseproducts" id="0762ddfc-1e76-42b2-b1d7-1f4a22b572ca">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="V3/catalog//browseproducts" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#TestSuite#CatId_Mobile}/browseproducts</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#domain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//*:CategoryResponse/category//categorypageurl" )


//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Cat Name != Mobile Name]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def cat_name = holder.getNodeValue( "//*:CategoryResponse/category/summary/name" )
def mobileName = holder.getNodeValue( "//*:CategoryResponse/category/summary/mobileName" )

assert !cat_name.toString().equals(mobileName.toString())
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="V3/catalog//browseproducts?application=MOBILE&amp;assortment=WEDDING_REGISTRY">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="V3/catalog//browseproducts?application=MOBILE&amp;assortment=WEDDING_REGISTRY" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#TestSuite#CatId_Mobile}/browseproducts?application=MOBILE&amp;assortment=WEDDING_REGISTRY</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorCode]"><con:configuration><path>//error[1]/errorCode[1]/text()</path><content>409</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>//error[1]/message[1]/text()</path><content>No data for search criteria</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [errorDetail]"><con:configuration><path>//error[1]/errorDetail[1]/text()</path><content>Category not found.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//error[1]/success[1]/text()</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>44f4f76b-8fae-4c57-b8df-dd6e6fe1bae7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8177df27-6f95-4dcd-8f0b-8e5db951f6db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0762ddfc-1e76-42b2-b1d7-1f4a22b572ca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>CatId_Mobile</con:name><con:value>65</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="15B-MT30628-Application MEW"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:properties><con:property><con:name>mp_no</con:name><con:value>[49211, 63624, 66486, 37687, 60097, 61363, 47248, 55429, 47424, 66442, 68597, 69759, 57766, 59437, 64978, 68341, 58246, 55800, 60582, 57768, 58648, 58647, 55807, 68620, 52385, 69043, 59672, 63303, 64018, 64061, 59436, 68342, 65931, 57701, 65253, 44717, 22800, 68595, 69922, 67975, 67976, 67977, 55758, 55606, 55609, 67546, 55749, 70368, 57763, 58299, 70371, 63703, 68596, 69908, 69572, 50703, 69562, 69563, 69564, 69676, 61774, 47012, 69033, 70321, 47156, 67928, 53528, 45419, 70323, 64885, 55819, 69623, 62273, 62272, 58018, 65617, 65059, 50124, 58567, 58859, 23480, 63240, 65825, 66276, 61874, 61875, 70404, 23484, 59705, 59713, 59803, 66842, 66843, 68047, 29576, 34821, 57522, 58124, 47626, 70377, 58521, 42548, 54138, 58059, 59513, 67063, 61630, 61458, 65436, 65561, 60308, 70252, 68297, 61511, 39925, 28589, 70257, 70230, 70335, 22042, 69077, 69094, 66129, 62367, 66898, 63914, 59005, 70433, 64001, 8062, 70392, 55286, 55287, 55288, 55289, 70253, 70391, 59802, 60067, 63655, 61478, 69353, 69354, 69597, 63548, 63591, 28225, 70251, 53043, 66719, 69684, 69683, 58818, 69440, 69675, 59291, 58750, 59873, 69914, 69685, 30523, 69901, 69439, 66110, 69362, 69935, 69964, 69916, 69917, 69918, 63792, 63219, 59667, 63931, 69924, 68599, 64970, 58377, 53289, 69736, 66478, 69643, 61106, 61105, 62985, 64925, 58102, 46217, 63547, 59405, 63234, 59404, 69945, 58862, 58863, 56111, 52423, 59818, 63736, 61071, 55925, 54554, 66526, 69126, 65818, 58085, 63885, 60860, 69734, 66178, 66153, 49049, 69144, 60527, 60528, 56101, 58566, 58098, 69884, 69430, 69490, 69801, 69933, 70009, 59396, 55197, 55415, 68634, 59717, 69944, 68032, 57635, 69357, 21995, 66853, 69175, 69152, 69153, 69151, 66855, 66856, 69174, 69172, 66862, 68734, 66860, 66861, 66857, 69687, 69969, 63272, 62974, 62975, 68588, 63138, 27288, 63139, 61985, 27285, 61998, 61999, 66714, 63020, 69737, 63015, 68221, 59559, 69982, 50977, 51717, 56062, 37945, 60167, 50979, 32504, 60613, 41257, 60615, 63925, 39322, 44761, 49492, 61677, 69658, 70403, 69885, 69886, 67543, 63796, 68007, 43460, 68739, 29875, 35214, 66556, 70402, 68284, 60318, 46886, 33601, 68285, 63915, 69239, 60034, 67726, 58374, 69003, 68746, 60975, 22248, 42907, 64929, 66527, 69437, 53717, 59075, 31865, 63091, 63092, 47483, 63196, 67048, 69657, 68043, 65654, 63372, 63373, 63374, 63375, 63376, 63377, 63371, 69891, 69894, 66471, 65408, 63143, 66145, 65529, 55442, 70374, 67545, 50709, 62516, 57760, 34965, 40894, 53722, 61508, 55183, 55481, 55837, 62494, 64041, 66130, 69127, 69363, 69364, 69365, 69366, 69367, 69096, 69097, 69719, 69383, 69899, 70001]</con:value></con:property><con:property><con:name>cbt_hide</con:name><con:value>[51486, 22899, 37659, 46869, 50416, 56028, 56030, 65821, 29552, 37660, 50417, 56035, 56039, 65822, 9736, 51924, 9737, 23551, 43318, 49658, 56036, 56040, 54140, 56037, 56041, 56042, 65025, 65026, 65027, 65028, 40385, 65819, 39343, 65767, 14701, 27618, 27255, 27256, 29874, 10581, 10582, 25595, 22908, 69577, 34167, 60048, 56020, 38190, 47295, 51923, 7549, 55335, 63812, 60498, 60650, 34914, 24266, 69576, 48403, 24268, 24267, 56033, 61500, 61501, 61502, 61503, 61505, 61506, 44393, 26231, 43709, 26232, 43587, 43588, 43590, 43586, 43589, 43591, 26233, 49662, 37662, 68384, 70358, 70359, 70360, 70361, 54135, 50978, 70362, 70353, 70354, 70355, 70356, 60039, 60043, 60044, 63640, 60095, 63642, 60040, 60041, 63641, 60042, 63639, 45835, 53624, 60563, 52918, 55700, 29013, 59858, 68182, 32079, 60046, 62431, 26959, 69634, 56029, 60059, 56043, 22024, 55478, 47587, 47757, 47778, 53749, 65011, 47777, 47779, 66456, 47754, 50053, 50054, 47773, 47774, 47755, 50067, 50068, 50070, 50071, 50061, 47756, 61181, 50077, 50074, 50076, 51542, 55157, 52959, 50075, 55985, 61492, 69635, 61493, 63740, 65260, 49573, 49611, 49607, 49630, 49633, 49605, 49649, 49663, 49642, 49670, 49909, 49910, 49915, 49911, 49912, 49913, 49929, 56314, 56315, 56316, 49932, 49934, 56311, 49940, 57523, 49944, 52363, 49963, 49973, 49983, 49984, 49988, 60127, 56026, 69633, 61508, 56027, 60049, 56034, 61504, 61507, 63962, 63963, 63972, 63973, 63974, 63975, 63976, 63977, 64820, 64821, 64822, 64823, 64824, 64825, 64875, 63861, 63862, 63863, 63864, 63871, 63865, 63870, 63872, 63869, 63866, 63867, 68332]</con:value></con:property><con:property><con:name>cat_mn</con:name><con:value>[Brands, Shop Big &amp; Tall, Guy Trend Shops, Shop Big &amp; Tall, Home Categories, Jewelry]</con:value></con:property><con:property><con:name>cat_mn_id</con:name><con:value>[63538, 64873, 63968, 66469, 24480, 544]</con:value></con:property><con:property><con:name>over_cat</con:name><con:value>[46284, 26620, 33672, 269, 260, 262, 31957, 25122, 3763, 4286, 4286, 47657, 55637, 48050, 118, 13247, 1, 544, 26846, 16904, 669, 7495, 5991, 29391, 7497, 22672, 3536, 1405, 61379, 58327, 58327, 64843, 64852, 6218, 58432, 62430, 57638, 3152, 62430, 55761, 33667, 58930, 11427, 54460, 30232, 36896, 61548, 20853, 55612, 40227, 37038, 34057, 30684, 18109, 55596, 55609, 46284, 45110, 33671, 46918, 46918, 17536, 9530, 30600, 43387, 42268, 7495, 55782, 32920, 26663, 60344, 55352, 53874, 26499, 65701, 65419, 55595, 34051, 120, 21115, 57535, 34049, 68231, 68231, 68232, 68233, 18109, 55596, 37038, 55606, 269, 55600, 46203, 61546, 28754, 55603, 40438, 17053, 60764, 40546, 58431, 68223, 58381, 55783, 55785, 5449, 55596, 55767, 68223, 58666, 32921, 16108, 55961, 60764, 16904, 32921, 32147, 66718, 13156, 42705, 44498, 55213, 69004, 59737, 55809, 55810, 55814, 55811, 32921, 55812, 55607, 34053, 37000, 5449, 55609, 34057, 67592, 61548, 20853, 55612, 40227, 51655, 57597, 67542, 34050, 17043, 61549, 55613, 34048, 55610, 40424, 16904, 59563, 5449, 46905, 55770, 67546, 8699, 3481, 30760, 68223, 26846, 31957, 13247, 58128, 32147, 32918, 19306, 37725, 31437, 54498, 55797, 52381, 48738, 55352, 62420, 45460, 34832, 5449, 60511, 30232, 54460, 55352, 5449, 55352, 55745, 19302, 39720, 63685, 52273, 55772, 19295, 34086, 47010, 50531, 47011, 27939, 43770, 58063, 55760, 58078, 58128, 30150, 43770, 27939, 5449, 19307, 34093, 34093, 19307, 54536, 55352, 55768, 57446, 40660, 18253, 40003, 59991, 59477, 55352, 57453, 54641, 42982, 27935, 54501, 58128, 56246, 10645, 57422, 44498, 46810, 35848, 55743, 57371, 53642, 65220, 42041, 38661, 5449, 65621, 53113, 53610, 42041, 55332, 59406, 60961, 19296, 34085, 55088, 60433, 3304, 49902, 69930, 69929, 69907, 32144, 54641, 57573, 44498, 34380, 30348, 16901, 63787, 54637, 49902, 55213, 55213, 65701, 68262, 68260, 68259, 68261, 68270, 31957, 40546, 68270, 669, 27807, 26846, 31957, 13247, 58128, 69749, 24277, 57545, 46325, 32914, 32913, 55733, 53629, 45859, 25300, 49707, 32583, 41259, 18579, 54541, 62961, 41682, 40496, 59401, 61923, 61783, 40660, 49051, 42940, 27226, 42940, 17043, 64860, 64861, 65077, 65075, 65075, 65075, 64895, 64896, 64896, 64989, 64989, 64987, 64989, 65885, 65885, 65886, 64858, 64858, 64871, 64858, 66839, 65885, 50684, 30523, 31619, 31617, 37076, 55628, 47113, 53005, 55642, 55642, 65701, 61123, 63266, 65701, 58263, 45811, 45812, 47464, 47465, 65701, 60499, 31456, 20627, 20635, 53433, 58782, 57979, 63725, 60618, 43200, 38348, 11882, 58082, 58083, 3296, 63477, 18245, 58170, 57386, 57, 63266, 65701, 58262, 65701, 43141, 55641, 59927, 65701, 20635, 20640, 30423, 20627, 20640, 30423, 65701, 43154, 25995, 51717, 59165, 65701, 43877, 30088, 65701, 18245, 18245, 58528, 3153, 51460, 60499, 57, 58262, 57386, 30168, 62420, 57696, 59775, 57697, 58446, 51444, 57698, 51445, 51447, 51448, 57703, 51449, 45758, 30088, 61912, 45758, 51576, 69044, 57979, 11019, 26216, 60292, 61183, 61183, 61183, 61183, 61183, 59429, 58022, 59429, 58021, 58020, 58019, 58497, 31824, 57386, 58496, 58494, 58491, 58495, 63638, 31824, 58497, 57386, 59877, 59878, 59879, 59931, 59880, 59882, 59932, 59883, 62061, 30088, 3153, 63266, 58082, 58782, 58783, 58784, 58786, 58083, 29884, 58060, 58022, 58020, 58021, 58019, 60057, 59856, 58489, 55822, 59776, 38348, 43200, 59225, 57386, 70022, 62437, 58128, 61123, 68223, 45859, 55784, 30163, 57498, 65298, 41362, 23692, 29784, 25931, 5201, 59416, 41259, 26071, 44778, 44778, 42269, 42269, 65071, 65071, 65077, 65077, 54115, 54115, 64895, 64987, 64987, 45236, 45236, 65886, 65886, 65883, 65883, 64871, 64871, 42175, 42175, 64987, 55544, 58351, 17199, 51752, 7919, 60489, 60489, 5204, 16111, 62434, 9915, 7495, 7498, 29391, 7497, 16908, 25931, 58181, 56062, 13661, 57529, 36321, 36454, 16905, 31865, 36454, 40266, 57501, 51402, 28954, 47634, 47635, 47636, 47637, 61018, 61017, 60361, 43091, 29422, 65577, 32385, 8377, 60363, 60363, 30213, 30190, 8380, 8380, 8569, 28928, 63274, 65701, 68223, 9425, 9545, 29447, 9427, 45605, 17246, 41544, 47143, 24672, 58681, 26662, 54287, 42972, 50674, 41544, 47143, 25931, 34838, 55566, 65938, 28973, 44234, 44234, 58327, 58327, 62414, 62414, 65073, 65073, 65073, 57712, 57712, 65071, 54115, 7495, 47587, 7498, 49573, 7497, 16908, 31795, 8237, 28898, 7552, 31760, 7554, 7919, 29391, 54177, 63159, 47756, 31839, 25931, 7923, 54178, 47754, 49670, 50074, 29422, 58294, 45236, 58294, 58294, 46918, 65884, 65883, 65884, 65884, 58327, 42175, 65073, 55567, 23487, 30760, 55570, 59075, 31746, 15099, 31742, 669, 59737, 29891, 60378, 60378, 31917, 41259, 34380, 3481, 14728, 58063, 33667, 54535, 24771, 69907, 63583, 53642, 55344, 17994, 46810, 13156, 60183, 60186, 55787, 60186, 55787, 60183, 60190, 56294, 51951, 49902, 31074, 59981, 54561, 62062, 57954, 55352, 65, 48561, 48561, 48561, 59406, 68244, 25931, 16904, 131, 55596, 37687, 33663, 55571, 13855, 31619, 55572, 53035, 53726, 32918, 5449, 61546, 56273, 56273, 56273, 18109, 57942, 38141, 54641, 34380, 55750, 40808, 61910, 57655, 56317, 54637, 55213, 32918, 13614, 53113, 64010, 42812, 30077, 55352, 54525, 57568, 58128, 32918, 32918, 45859, 25931, 56243, 55573, 33643, 65, 60620, 43141, 25725, 35406, 39267, 66130, 66130, 57416, 63568, 26217, 55689, 55352, 69907, 65448, 68249, 28067, 28067, 25931, 17799, 16108, 52832, 57526, 57526, 18245, 48050, 55971, 66209, 25931, 13156, 14728, 63570, 46810, 57651, 34380, 53642, 59981, 51951, 30348, 16908, 28295, 46905, 53610, 58262, 68244, 58170, 31722, 56309, 31746, 30581, 61581, 30582, 62583, 58041, 65814, 30522, 56285, 53452, 30585, 62575, 58040, 65813, 48199, 56234, 33635, 33639, 37071, 65574, 46220, 63556, 54594, 54608, 54594, 54608, 55415, 61511, 47138, 59961, 37076, 48729, 39871, 65384, 30523, 30077, 669, 30077, 30088, 57386, 48692, 48693, 58376, 59563, 48561, 22911, 48561, 22911, 66718, 57924, 48561, 66718, 16342, 32298, 57924, 31460, 48561, 22911, 65147, 31460, 48561, 31460, 48561, 63054, 22911, 48561, 22911, 65147, 48561, 22911, 48561, 63053, 22911, 65701, 63270, 48561, 48561, 63270, 51717, 48561, 62112, 62112, 62112, 60045, 23484, 33222, 66208, 64780, 669, 669, 26481, 46015, 65373, 65363, 65298, 58936, 8699, 3291, 55163, 13661, 23487, 8240, 16853, 22094, 58936, 8240, 16853, 22094, 58936, 56062, 36321, 13661, 65577, 66218, 35420, 25931, 68223, 64873, 23930, 35420, 7495, 25931, 60313, 37823, 35319, 66556, 24672, 36765, 35319, 59440, 65745, 66556, 59708, 37823, 59713, 13661, 37823, 31865, 57501, 40266, 7495, 39267, 25931, 16905, 55213, 53629, 17199, 47587, 51662, 31839, 31795, 46710, 24733, 24734, 46711, 7583, 46705, 47103, 23481, 47754, 51902, 28954, 52333, 52333, 52333, 52333, 52333, 52333, 52333, 52333, 52331, 52331, 68223, 60318, 46886, 33601, 55494, 58374, 46886, 58374, 10066, 69747, 32913, 30684, 55733, 32918, 17059, 28273, 13604, 9559, 43387, 9425, 9545, 9427, 17246, 45605, 24294, 22000, 28067, 48692, 48693, 62970, 25324, 62971, 25325, 55537, 58476, 66190, 26662, 54287, 25037, 28273, 55172, 24277, 54703, 24359, 42350, 9559, 13605, 24118, 28067, 60264, 28009, 54641, 56317, 54637, 57586, 55788, 57638, 57659, 58006, 65298, 59075, 37823, 62779, 8237, 13759, 66415, 66415, 68223, 32286, 669, 66471, 66471, 66471, 66471, 66471, 66471, 66471, 66218, 8240, 65298, 69112, 68223, 66145, 23487, 35380, 35380, 32918, 32918, 46905, 55773, 32918, 67545, 32918, 32918, 32921, 55772, 52273, 68223, 27807, 26846, 31957, 40546, 13247, 58128, 32918, 32918, 60602, 31930, 18579, 65298, 68223, 65298, 17199, 68223, 13247, 53332, 18579, 18579, 18579, 18579, 18579, 18579, 18579, 18579, 41386, 669, 57850, 60202, 14728, 28754, 48050, 48050, 63688, 14728, 63270, 63266, 63268, 37038, 37038, 669, 26481, 46015, 26481, 46015, 30087, 66093, 55607, 57385, 57386, 28688, 68702, 68718, 14728, 67632, 55760, 27726, 57374, 42041, 30150, 28169, 13156, 32567, 31619, 3304, 3304, 3437, 3436, 51576, 63068, 31456, 57979, 3485, 3485, 55772, 31746, 69044, 57573, 14355, 57924, 32568, 65577, 32385, 32388, 53608, 55772, 52273, 31746, 18253, 31074, 40660, 2519, 37281, 45097, 45097, 25311, 25313, 41259, 47438, 59820, 55689, 58382, 43141, 30760, 47010, 45095, 29889, 34380, 33448, 46108, 46108, 59161, 46137, 30088, 66247, 17994, 55633, 29415, 6526, 11427, 55352, 36896, 39116, 54501, 43206, 53239, 3481, 31776, 55745, 63441, 55285, 61877, 52846, 60201, 55761, 33667, 55765, 24771, 54535, 51559, 55768, 54536, 57446, 59981, 57665, 54561, 55352, 62062, 63266, 63268, 63270, 25931, 37823, 30076, 32918]</con:value></con:property><con:property><con:name>over_have_cat</con:name><con:value>[58988, 60905, 61634, 62534, 62535, 62536, 62537, 62538, 62529, 62530, 62531, 62532, 62533, 62965, 63483, 63484, 63485, 63486, 63487, 63489, 63493, 63494, 63498, 63522, 63523, 63524, 63526, 63527, 64849, 64872, 64874, 65155, 65156, 69224, 69223, 69225, 69228, 69241, 69242, 69247, 69248, 69249, 69252, 69253, 69254, 69256, 70125, 70126, 70127, 70128, 37687, 55525, 53333, 66113, 57729, 55746, 58991, 58992, 61635, 65153, 65154, 26848, 40736, 49707, 64846, 64854, 45196, 17220, 35782, 45662, 60345, 69255, 65420, 53680, 66331, 65422, 61603, 61604, 47248, 15347, 24678, 20432, 51097, 51098, 51100, 51102, 63453, 21972, 63454, 57758, 47424, 53556, 64903, 66868, 63457, 19310, 63458, 69759, 65553, 63592, 59437, 68341, 58648, 58647, 63303, 64018, 64061, 59436, 68342, 60064, 57701, 65253, 59688, 63065, 67613, 55789, 63292, 67655, 52385, 63419, 67927, 70046, 69043, 219, 50731, 20945, 50730, 4089, 48067, 3672, 36124, 64901, 64904, 22800, 53555, 66193, 46502, 69601, 69487, 38149, 65012, 62427, 17290, 69492, 21541, 63456, 69743, 32692, 63455, 53557, 64902, 28803, 68750, 55758, 69895, 57678, 67938, 55854, 59476, 52170, 68361, 57764, 61842, 57765, 58159, 34016, 28780, 19308, 17996, 40585, 31668, 19876, 13385, 40187, 63136, 63135, 27941, 27934, 63932, 40584, 29676, 29675, 63183, 63933, 60072, 39790, 19303, 8453, 63301, 25612, 25611, 19247, 8376, 55185, 46337, 46338, 63656, 63657, 14730, 19488, 59304, 63659, 50376, 27932, 27931, 63934, 67603, 67604, 29641, 29640, 50460, 51651, 51754, 51820, 61941, 61940, 65128, 47943, 39982, 66151, 66150, 60069, 10776, 27933, 65615, 65652, 65651, 65616, 65653, 53034, 61111, 65434, 65433, 65435, 58519, 68485, 50764, 65770, 63578, 67914, 67911, 67912, 67913, 67915, 67916, 67917, 46362, 62088, 55534, 63446, 69180, 60068, 70043, 70042, 69910, 67113, 67114, 67115, 67116, 67983, 67117, 67118, 67119, 67120, 67121, 67122, 67979, 65702, 69762, 69562, 69563, 69564, 68325, 68326, 68327, 68243, 64760, 69355, 41092, 61837, 41091, 22237, 34933, 24200, 65600, 26593, 41056, 41055, 50142, 22899, 24834, 28381, 62084, 34946, 42739, 53754, 54647, 58062, 59033, 59040, 60382, 61991, 61992, 61993, 62155, 62156, 62217, 62218, 68480, 65198, 65201, 65208, 65210, 65211, 65212, 65268, 65270, 65274, 65346, 65349, 65353, 65356, 65893, 65897, 65900, 66132, 66135, 66139, 66140, 66970, 68193, 60337, 69676, 65668, 51065, 57798, 60349, 60355, 53726, 65795, 59290, 59453, 59830, 50294, 66325, 6258, 64932, 65126, 65564, 65565, 47833, 45815, 63846, 63888, 63887, 63995, 63996, 64022, 65720, 64027, 64026, 64031, 64032, 64039, 65721, 63964, 63476, 64015, 64016, 64017, 64011, 64065, 60480, 64068, 66647, 47012, 51690, 18263, 66649, 63928, 63929, 59909, 63930, 31139, 31140, 66648, 60977, 64886, 67928, 45419, 66326, 53751, 59949, 66327, 65449, 65763, 62002, 58532, 61913, 60608, 63369, 58170, 53739, 51824, 63137, 64914, 64915, 64916, 64917, 64919, 64918, 64920, 64921, 64922, 64923, 64924, 66469, 59412, 63729, 62553, 27274, 69181, 58091, 60295, 60298, 60297, 61153, 61155, 61154, 61156, 61157, 59430, 59179, 59431, 59181, 59180, 59182, 63643, 58490, 58492, 58625, 58626, 58627, 58628, 63645, 58629, 58630, 58631, 59933, 59934, 59935, 59936, 59937, 59938, 59939, 59940, 64785, 60237, 47558, 64003, 34125, 59637, 59639, 59640, 59641, 54656, 59642, 57809, 58027, 58028, 58029, 58030, 61409, 61410, 61412, 57608, 61414, 57674, 61415, 61417, 59647, 66870, 65617, 58264, 65059, 50124, 23479, 28868, 61905, 37405, 37660, 39049, 46766, 48790, 59464, 53145, 54503, 55742, 61050, 62193, 62255, 65203, 65204, 65206, 65207, 65214, 65215, 65269, 65271, 65273, 65347, 65350, 65351, 65354, 65895, 65898, 65901, 65905, 66133, 66136, 66138, 66141, 68194, 53296, 59448, 9736, 53161, 54411, 62143, 62205, 53260, 53318, 38135, 9916, 24481, 24482, 32065, 24483, 23485, 47814, 63240, 60841, 60842, 65912, 66879, 32817, 23486, 51578, 51580, 51602, 51601, 51827, 47939, 48260, 48261, 48262, 48263, 46379, 46377, 51373, 47828, 51903, 32586, 32587, 32569, 42152, 42153, 42352, 42159, 32571, 32612, 32613, 39419, 43123, 62948, 51101, 24318, 24320, 31370, 24321, 43063, 24296, 39980, 40223, 39235, 39236, 25038, 25040, 36725, 42220, 37891, 36726, 59465, 35406, 53148, 54410, 60027, 62174, 62236, 64905, 64906, 64939, 64940, 65079, 65080, 65081, 65194, 65195, 65205, 65272, 38176, 37952, 33452, 27208, 27209, 27215, 27212, 28149, 36810, 27213, 27211, 27222, 24325, 37892, 32009, 32010, 27214, 32008, 27223, 27220, 56054, 27225, 27224, 28146, 34261, 65344, 65348, 65352, 65355, 65398, 65896, 65899, 65902, 65906, 66134, 66137, 68195, 53298, 46868, 67524, 53162, 61864, 65669, 53146, 53316, 8686, 61630, 61458, 69017, 69016, 69432, 63023, 65436, 59475, 63653, 65561, 63427, 63497, 63496, 70047, 60308, 65429, 63308, 67881, 65427, 60065, 63918, 63919, 63920, 63921, 63922, 63923, 61179, 63150, 65430, 59962, 66713, 65618, 65619, 65620, 65924, 66335, 57564, 57551, 57556, 57552, 42951, 68297, 59466, 39051, 60421, 63722, 63721, 48732, 53776, 53163, 48738, 54302, 53164, 48729, 70048, 58636, 65294, 46567, 46569, 46570, 63935, 61139, 70052, 61090, 55452, 53652, 53651, 62282, 59299, 61091, 61092, 70051, 70050, 70153, 70156, 70157, 69925, 59823, 30713, 20993, 17670, 30458, 24286, 19397, 23482, 59467, 38019, 53152, 61242, 63957, 64014, 69077, 41104, 48735, 61205, 66129, 69134, 61986, 62367, 61202, 50327, 69462, 70045, 65447, 59802, 56304, 62495, 59468, 32978, 55813, 62153, 62154, 62216, 63958, 64067, 66225, 66716, 59469, 60067, 63655, 61478, 65423, 63161, 65426, 65424, 69353, 65425, 68486, 33531, 58128, 63591, 63554, 58297, 50556, 63959, 48736, 56185, 52119, 69684, 58502, 69683, 59096, 66162, 58099, 69675, 30519, 69685, 69897, 58049, 66161, 59852, 58937, 30565, 61245, 61244, 65446, 68006, 60816, 22993, 61095, 61513, 60326, 61515, 61516, 61520, 60827, 61067, 31623, 53325, 55338, 66864, 66865, 68481, 68484, 68483, 68482, 63960, 64878, 64879, 48737, 64880, 56104, 60549, 56105, 60550, 67509, 59564, 62111, 66733, 64772, 64773, 64777, 63272, 62974, 62975, 68588, 63138, 27288, 63139, 27285, 62335, 62108, 62977, 62976, 68586, 27889, 58845, 27286, 62336, 62110, 66714, 69571, 63020, 69737, 65013, 60193, 63231, 40667, 63206, 40666, 65880, 59903, 60635, 65703, 58520, 40884, 40892, 65360, 59822, 59828, 59829, 37661, 61886, 67929, 67930, 67931, 68128, 67644, 65009, 64963, 64964, 64965, 65025, 65026, 65027, 65028, 60743, 56058, 59824, 48334, 62092, 61779, 59809, 56020, 65125, 63202, 37836, 29908, 42889, 66273, 67590, 53774, 53768, 52194, 42888, 55174, 54950, 66124, 65056, 37615, 68727, 43460, 66440, 67589, 60410, 36746, 36866, 37838, 29583, 54768, 54770, 54639, 54409, 54412, 38190, 47103, 61355, 67696, 63367, 21248, 7567, 63285, 63287, 63288, 60897, 42080, 7549, 64968, 47917, 60865, 60866, 60867, 60868, 60869, 60870, 60871, 60872, 69109, 69108, 24267, 48402, 63469, 22251, 60327, 61503, 43588, 43586, 60923, 70041, 60924, 60925, 60928, 70040, 60927, 60929, 60930, 60931, 60932, 60933, 60934, 60935, 60936, 60937, 60953, 60939, 60940, 60942, 60943, 60944, 60954, 60957, 60958, 66242, 60946, 60947, 54708, 54709, 54710, 54706, 54707, 54702, 55049, 54701, 54711, 54700, 54705, 54699, 66447, 60086, 69437, 61082, 61083, 61084, 25864, 17216, 17221, 45659, 29470, 68384, 61865, 67591, 62781, 44133, 28354, 55700, 55701, 62431, 11763, 14450, 63372, 63373, 63374, 63375, 63376, 63377, 63371, 67958, 57322, 37663, 60630, 56043, 66146, 61873, 63160, 67923, 70035, 70036, 69896, 32922, 70037, 34553, 70038, 70039, 55535, 61422, 61519, 55935, 69347, 57761, 61841, 69348, 57762, 58160, 34344, 34965, 40894, 36169, 41895, 37664, 63740, 34986, 49911, 56034, 51746, 53563, 53917, 53919, 53921, 53923, 53925, 53927, 53931, 53948, 56295, 57318, 58126, 60458, 60497, 66112, 62966, 62967, 63689, 63790, 64816, 64815, 64817, 64040, 64060, 65084, 65382, 65383, 65380, 65381, 66308, 66094, 66121, 69132, 69133, 68518, 68735, 68736, 69258, 69259, 69263, 69260, 69261, 69262, 69264, 69266, 69267, 69268, 69269, 69271, 69272, 69273, 69274, 69275, 69276, 69277, 69645, 69278, 69279, 69280, 69285, 69733, 69646, 69291, 69292, 69286, 69287, 69288, 69289, 69290, 69647, 69648, 69649, 69294, 69295, 69296, 69298, 69299, 69300, 69346, 69306, 69307, 69308, 69309, 69311, 69312, 69313, 69315, 69316, 69317, 69318, 69321, 69323, 69324, 69326, 69327, 69328, 69329, 69330, 69335, 69377, 69379, 69378, 69380, 69384, 69385, 69386, 69389, 69390, 69391, 69392, 69395, 69396, 69397, 69398, 69399, 69400, 69403, 69404, 69408, 69409, 69412, 69413, 69414, 69417, 69418, 69419, 69421, 69424, 69425, 69426, 69427, 69428, 69584, 69585, 69586, 70014, 70021, 58038, 54149]</con:value></con:property><con:property><con:name>ids</con:name><con:value>[58988, 60905, 61634, 62534, 62535, 62536, 62537, 62538, 62529, 62530, 62531, 62532, 62533, 62965, 63483, 63484, 63485, 63486, 63487, 63489, 63493, 63494, 63498, 63522, 63523, 63524, 63526, 63527, 64849, 64872, 64874, 65155, 65156, 69224, 69223, 69225, 69228, 69241, 69242, 69247, 69248, 69249, 69252, 69253, 69254, 69256, 37687, 55525, 53333, 66113, 57729, 55746, 58991, 58992, 61635, 65153, 65154, 26848, 40736, 49707, 64846, 64854, 45196, 17220, 35782, 45662, 60345, 69255, 65420, 53680, 66331, 65422, 70310, 61603, 61604, 47248, 59434, 51097, 51098, 51100, 51102, 63453, 21972, 63454, 57758, 47424, 53556, 64903, 66868, 63457, 19310, 63458, 69759, 65553, 63592, 68123, 59437, 68341, 58648, 58647, 55802, 52385, 63419, 67927, 70046, 69043, 63303, 64018, 64061, 59436, 68342, 60064, 57701, 65253, 59688, 63065, 67613, 55789, 63292, 67655, 219, 50731, 20945, 50730, 4089, 48067, 3672, 57759, 64904, 22800, 53555, 66193, 46502, 62427, 17290, 69492, 21541, 63456, 69743, 32692, 63455, 53557, 64902, 70269, 70270, 70271, 70272, 70273, 70274, 70275, 70276, 70378, 28803, 68750, 55758, 69895, 57678, 67938, 55854, 70285, 70287, 70288, 70289, 70290, 70291, 70292, 70293, 59476, 52170, 70192, 70193, 68361, 57764, 61842, 57765, 58159, 34016, 28780, 19308, 17996, 40585, 70301, 13385, 27941, 27934, 40584, 29676, 29675, 69302, 60072, 39790, 19303, 8453, 63301, 25612, 25611, 19247, 8376, 14730, 19488, 59304, 50376, 27932, 27931, 67603, 67604, 29641, 29640, 51754, 51820, 61941, 61940, 65128, 47943, 39982, 66151, 66150, 60069, 10776, 27933, 65615, 65652, 65651, 65616, 65653, 53034, 70302, 65434, 65433, 65435, 58519, 68485, 70379, 50764, 61112, 69748, 63578, 67914, 67911, 67912, 67913, 67915, 67916, 67917, 46362, 62088, 55534, 63446, 70300, 69180, 60068, 70043, 70042, 55185, 46337, 46338, 67113, 67114, 67115, 67116, 67983, 67117, 67118, 67119, 67120, 67121, 67122, 67979, 70205, 70198, 70208, 65702, 69762, 69562, 69563, 69564, 68325, 68326, 68327, 68243, 70426, 70268, 70427, 64760, 69355, 41092, 61837, 41091, 22237, 34933, 24200, 65600, 26593, 41056, 41055, 50142, 24834, 28381, 62084, 34946, 42739, 53754, 54647, 58062, 59033, 59040, 60382, 61991, 61992, 61993, 62155, 62156, 62217, 62218, 68480, 65198, 65201, 65208, 65210, 65211, 65212, 65268, 65270, 65274, 65346, 65349, 65353, 65356, 65893, 65897, 65900, 66132, 66135, 66139, 66140, 66970, 68193, 60337, 69676, 65668, 51065, 57798, 53726, 65795, 59290, 59453, 59830, 50294, 66325, 6258, 64932, 65126, 65564, 65565, 47833, 45815, 63846, 63888, 63887, 63995, 63996, 64022, 65720, 64027, 64031, 64032, 64039, 65721, 63964, 63476, 64015, 64016, 64017, 64011, 64065, 60480, 64068, 66647, 47012, 51690, 18263, 63928, 63929, 59909, 63930, 31139, 31140, 66648, 60977, 64886, 67928, 45419, 66326, 53751, 59949, 66327, 65449, 65763, 62002, 58532, 61913, 70349, 70350, 70352, 70351, 60608, 63369, 58170, 53739, 51824, 63137, 64914, 64915, 64916, 64917, 64919, 64918, 64920, 64921, 64922, 64923, 64924, 66469, 59412, 63729, 62553, 27274, 69181, 58091, 60295, 60298, 61153, 61155, 61154, 61156, 61157, 59430, 59179, 59431, 59181, 59180, 59182, 63643, 58490, 58492, 58625, 58626, 58627, 58628, 63645, 58629, 58630, 58631, 59933, 59934, 59935, 59936, 59937, 59938, 59939, 59940, 64785, 60237, 47558, 64003, 34125, 59637, 59639, 59640, 59641, 54656, 59642, 57809, 58027, 58028, 58029, 58030, 61409, 61410, 61412, 57608, 61414, 57674, 61415, 61417, 59647, 70178, 65617, 58264, 65059, 50124, 23479, 28868, 61905, 37405, 39049, 46766, 48790, 59464, 53145, 54503, 55742, 60154, 61050, 62193, 62255, 65203, 65204, 65206, 65207, 65214, 65215, 65269, 65271, 65273, 65347, 65350, 65351, 65354, 65895, 65898, 65901, 65905, 66133, 66136, 66138, 66141, 68194, 53296, 59448, 53161, 54411, 62143, 62205, 53260, 53318, 70182, 9916, 24481, 24482, 32065, 24483, 23485, 47814, 63240, 60841, 60842, 65912, 66879, 32817, 23486, 51578, 51580, 51602, 51601, 51827, 47939, 48260, 48261, 48262, 48263, 46379, 46377, 51373, 47828, 51903, 32586, 32587, 32569, 42152, 42153, 42352, 42159, 32571, 32612, 32613, 39419, 43123, 62948, 51101, 24318, 24320, 31370, 24321, 43063, 24296, 39980, 40223, 39235, 39236, 59465, 35406, 53148, 53630, 62781, 54410, 60027, 62174, 62236, 64905, 64906, 64939, 64940, 65079, 65080, 65081, 65194, 65195, 65205, 65272, 65344, 65348, 65352, 65355, 65398, 65896, 65899, 65902, 65906, 66134, 66137, 68195, 53298, 46868, 53162, 61864, 65669, 53146, 53316, 8686, 69650, 61630, 61458, 69017, 69016, 69432, 63023, 65436, 59475, 63653, 65561, 63427, 63497, 63496, 70047, 60308, 65429, 63308, 67881, 65427, 60065, 63918, 63919, 63920, 63921, 63922, 63923, 61179, 63150, 65430, 59962, 66713, 65618, 65619, 65620, 65924, 66335, 57564, 57551, 57556, 57552, 42951, 68297, 59466, 39051, 60421, 63722, 63721, 48732, 53776, 53163, 48738, 54302, 53164, 70258, 48729, 70395, 42812, 70048, 58636, 65294, 46567, 46569, 46570, 70296, 69557, 69971, 69560, 69654, 63935, 61139, 70052, 61090, 55452, 53652, 53651, 62282, 61091, 61092, 70051, 70050, 70158, 70159, 70152, 70257, 70157, 59823, 30713, 20993, 17670, 30458, 24286, 19397, 23482, 59467, 38019, 53152, 61242, 63957, 64014, 69077, 41104, 48735, 61205, 43974, 62679, 61986, 62367, 61202, 50327, 69462, 70045, 59802, 56304, 62495, 59468, 32978, 55813, 62153, 62154, 62216, 63958, 64067, 66225, 66716, 59469, 70413, 62953, 60067, 63655, 61478, 65423, 63161, 65426, 65424, 69353, 65425, 68486, 33531, 58128, 63591, 63554, 58297, 50556, 63959, 48736, 56185, 52119, 70029, 58478, 69684, 58502, 69683, 59096, 66162, 58099, 30167, 30173, 50688, 69675, 30519, 69685, 69897, 70409, 58049, 66161, 59852, 30131, 49016, 30138, 58937, 30565, 61245, 61244, 65446, 68006, 60349, 60355, 22993, 60827, 61067, 31623, 53325, 55338, 61095, 61513, 60326, 61515, 61516, 61520, 68484, 68483, 68482, 63960, 64878, 64879, 48737, 64880, 56104, 60549, 56105, 60550, 67509, 59564, 62111, 66733, 64772, 64773, 64777, 63272, 62974, 62975, 68588, 63138, 27288, 63139, 27285, 62335, 62108, 62977, 62976, 68586, 27889, 58845, 27286, 62336, 62110, 66714, 69571, 63020, 69737, 65013, 60193, 63231, 40667, 63206, 40666, 65880, 59903, 60635, 65703, 58520, 35368, 40884, 40892, 65360, 59822, 59828, 59829, 61886, 67929, 67930, 67931, 68128, 67644, 65009, 64963, 64964, 64965, 60743, 56058, 59824, 48334, 62092, 61779, 59809, 65125, 63202, 66330, 66273, 67590, 53774, 53768, 52194, 42888, 70016, 55174, 67589, 37836, 29908, 42889, 66440, 70014, 37615, 68727, 63860, 60410, 36746, 36866, 70254, 70255, 70021, 43460, 54639, 54409, 54412, 47103, 61355, 67696, 63367, 21248, 7567, 63285, 63287, 63288, 60897, 42080, 64968, 47917, 60865, 60866, 60867, 60868, 60869, 60870, 60871, 60872, 69109, 69108, 48402, 63469, 22251, 60327, 65040, 65095, 65099, 65111, 65112, 65101, 65102, 66529, 66535, 66538, 66536, 66537, 66534, 66531, 66532, 66533, 66530, 66540, 66542, 66544, 66543, 66541, 66546, 66547, 66548, 66549, 66550, 60923, 70041, 60924, 60925, 60928, 70040, 60927, 60929, 60930, 60931, 60932, 60933, 60934, 60935, 60936, 60937, 60953, 60939, 60940, 60942, 60943, 60944, 60954, 60957, 60958, 66242, 60946, 60947, 54708, 54709, 54710, 54706, 54707, 54702, 55049, 54701, 54711, 54700, 54705, 54699, 66447, 60086, 69437, 61082, 61083, 61084, 25864, 17216, 17221, 45659, 29470, 61865, 67591, 44133, 28354, 55701, 47572, 11763, 14450, 63372, 63373, 63374, 63375, 63376, 63377, 63371, 67958, 57322, 60630, 38175, 66146, 61873, 63160, 67923, 70035, 70036, 69896, 32922, 70037, 34553, 70038, 70039, 70278, 70277, 70284, 70283, 70279, 70280, 70281, 70282, 32916, 55535, 61422, 61519, 67524, 70220, 70213, 55935, 69347, 57761, 61841, 69348, 57762, 58160, 34344, 34965, 40894, 36169, 41895, 51746, 53563, 53917, 53919, 53921, 53923, 53925, 53927, 53931, 53948, 56295, 57318, 58126, 60458, 60497, 66112, 62966, 62967, 70249, 63689, 63790, 64816, 64815, 64817, 64040, 64060, 65084, 65382, 65383, 65380, 65381, 66308, 66094, 66121, 69132, 69133, 68518, 68735, 68736, 69258, 69259, 69263, 69260, 69261, 69262, 69264, 69266, 69267, 69268, 69269, 69271, 69272, 69273, 69274, 69275, 69276, 69277, 69645, 69278, 69279, 69280, 69285, 69733, 69646, 69291, 69292, 69286, 69287, 69288, 69289, 69290, 69647, 69648, 69649, 69294, 69295, 69296, 69298, 69299, 69300, 69346, 69306, 69307, 69308, 69309, 69311, 69312, 69313, 69315, 69316, 69317, 69318, 69321, 69323, 69324, 69326, 69327, 69328, 69329, 69330, 69335, 69377, 69379, 69378, 69380, 69384, 69385, 69386, 69389, 69390, 69391, 69392, 69395, 69396, 69397, 69398, 69399, 69400, 69403, 69404, 69408, 69409, 69412, 69413, 69414, 69417, 69418, 69419, 69421, 69424, 69425, 69426, 69427, 69428, 69584, 69585, 69586, 70183, 70411, 58038, 54149]</con:value></con:property><con:property><con:name>names</con:name><con:value><![CDATA[Shop All Plus Specials@@@Bed & Bath@@@Holiday Drinkware@@@Coats@@@Sweaters@@@Cashmere@@@Hats, Gloves & Scarves@@@Boots@@@Coats@@@Sweaters@@@Cashmere@@@Hats, Gloves & Scarves@@@Boots@@@Shop all Teams@@@Womens@@@Shoes@@@Men@@@Jewelry & Watches@@@Handbags & Accessories@@@Juniors@@@Beauty@@@Bed & Bath@@@Kids@@@Furniture@@@Kitchen@@@For The Home@@@Sale@@@Gift Cards@@@Shoes 2-Day Specials@@@Shoes 2-Day Specials@@@Shoes 2-Day Specials@@@Guys' Limited Time Specials@@@Big & Tall Limited Time Specials@@@Shop Women@@@Shop Men@@@Shop Kids@@@Shop Women@@@Shop Men@@@Shop Kids@@@Shop Shoes@@@Shop Handbags & Accessories@@@Shop Watches@@@Shop Women@@@Shop Plus@@@Shop Petite@@@Shop Home@@@Plus Size Maxi Dresses@@@Long Maxi Skirts@@@Petite@@@Shop Junior Dresses@@@Petite Maxi Dresses@@@Long Maxi Skirts@@@Shop All Plus Specials@@@Shop All Womens Specials@@@Holiday Table Linens@@@Men's Limited Time Specials@@@Men's Limited Time Specials@@@SALE@@@SALE@@@All Christmas Ornaments@@@Shoes Limited Time Specials@@@Shoes Limited Time Specials@@@Bed & Bath@@@Naturalizer@@@Shop HER Catalog@@@CLOSEOUTS@@@BB Cream@@@Shop Jewelry@@@Shop All Yoga@@@Sneakers@@@Sports Fan Gear by Lids@@@Yoga Pants@@@Also Shop Juniors Activewear@@@Also Shop Petite Activewear@@@Also Shop Plus Activewear@@@Jackets & Blazers@@@Prom Dresses@@@Wedding Dresses@@@Bridal Dresses@@@Bridesmaid Dresses@@@Mother of the Bride Dresses@@@Shop Junior Dresses@@@Shop Petite Dresses@@@Shop Plus Size Dresses@@@Shop Petite Blazers@@@Coats@@@Shop Petite Jackets@@@Shop Plus Size Jackets@@@Shop Impulse Contemporary Jeans@@@Shop Junior Jeans@@@Shop Petite Jeans@@@Shop Plus Size Jeans@@@Junior's Jumpsuits & Rompers@@@Shop Shapewear Leggings@@@Shop Tights & Socks@@@Mother's Day Gift Guide@@@Bridal Sleepwear@@@The Wedding Shop@@@Juniors Panties@@@Plus Size Panties@@@Tights, Socks & Hosiery@@@Shop All Calvin Klein@@@b.tempt'd by Wacoal@@@Shop Free People Clothing@@@Shop All Impulse@@@Show All Brands@@@Plus Size Shapewear@@@Also Shop Dresses@@@Also Shop Petite Dresses@@@Bridal Lingerie@@@The Wedding Shop@@@Juniors Pajamas & Robes@@@Plus Size Pajamas & Robes@@@Shop Slippers@@@Full Busted Bras@@@Shop Shapewear@@@Juniors' Clothing@@@Pajamas & Robes@@@Plus Size Clothing@@@Nursing & Maternity@@@Pajamas & Robes@@@Chemises@@@Nightgowns & Sleep Shirts@@@Pajama Separates@@@Pajama Sets@@@Plus Size Pajamas & Robes@@@Robes@@@Shop Petite Shorts@@@Shop Plus Size Shorts@@@Shop Women's Dresses@@@Shop Petite Skirts@@@Shop Plus Size Skirts@@@Suits & Suit Separates@@@Impulse Swimwear@@@Junior Swimwear@@@Maternity Swimwear@@@Plus Size Swimwear@@@Shop Junior Tops@@@Shop Impulse Tops@@@Shop Petite Tops@@@Shop Plus Size Tops@@@Shop Petite Suits@@@Shop Plus Size Suits@@@Dresses@@@Jackets@@@Pants@@@Skirts@@@Suits@@@Tops@@@Handbags@@@Shoes@@@Petites Work Wonders@@@Juniors@@@Newborn Shop@@@Shop Women's Dresses@@@Leggings@@@Lingerie@@@Suits & Suit Separates@@@Swimwear@@@Dresses@@@Jackets@@@Pants@@@Skirts@@@Suits@@@Tops@@@Handbags@@@Shoes@@@Shop All INC@@@Levi's Shop@@@Haute Handbags@@@Most Wanted Shoes@@@The Wedding Shop@@@Handbags & Accessories@@@Hats, Scarves, & Wraps@@@Shoes@@@Sunglasses@@@Plus Sizes@@@Trendy Plus Sizes@@@Alfani Petites@@@Alfani Plus Sizes@@@Alfani Pajamas & Robes@@@Shop Plus Size Calvin Klein Performance@@@Calvin Klein Underwear@@@Calvin Klein Petites@@@Calvin Klein Plus Sizes@@@Charter Club Pajamas & Robes@@@Charter Club Petites@@@Charter Club Plus Sizes@@@INC Handbags & Accessories@@@INC Jewelry@@@INC Shoes@@@INC Petites@@@INC Plus Size@@@Lauren Pajamas & Robes@@@Lauren Handbags & Accessories@@@Lauren Shoes@@@Lauren Petites@@@Lauren Plus Sizes@@@Michael Kors Handbags@@@Michael Kors Shoes@@@Michael Kors Watches@@@Michael Kors Fragrance & Beauty@@@Michael Kors Plus Size@@@Michael Kors Petites@@@Petite Style&co. Jeans@@@Plus Size Style&co. Jeans@@@Style&co. Plus Sizes@@@Style&co. Petites@@@Style&co. Shoes@@@Style&co. Watches@@@The North Face Kid's@@@The North Face Men's@@@Tommy Hilfiger Pajamas & Lingerie@@@Tommy Hilfiger Shoes@@@Tommy Hilfiger Handbags & Accessories@@@Tommy Hilfiger Jewelry@@@Tommy Hilfiger Watches@@@Bar III@@@BCBGMAXAZRIA@@@DKNY Petites@@@DKNY Accessories@@@DKNY Eyewear@@@DKNY Shoes@@@DKNY Sleepwear@@@DKNY Watches@@@Free People@@@Shop Plus Size Ideology@@@GUESS Handbags@@@GUESS Shoes@@@GUESS Watches@@@Jessica Simpson@@@kensie Handbags@@@Levi's@@@Rachel Roy Jewelry@@@Silver Jeans@@@$30 & Under@@@Shop Women's Dresses@@@Lingerie@@@Beauty@@@Handbags@@@Jewelry@@@Men's@@@Shoes@@@Watches@@@Jones New York Petites@@@Jones New York Plus Sizes@@@Lingerie & Sleepwear@@@Made@@@Shop Plus Size Nike@@@Polo Ralph Lauren Men's@@@RACHEL Rachel Roy@@@Jewelry@@@Shoes@@@Levi's Juniors@@@Levi's Plus Size@@@Levi's Petites@@@7 For All Mankind@@@Bar III@@@Denim & Supply Ralph Lauren@@@Free People@@@GUESS?@@@kensie@@@Lucky Brand Jeans@@@Maison Jules@@@Miss Me@@@Rachel Rachel Roy@@@See All Impulse Brands@@@Impulse Contemporary Clothing@@@Haute Handbags@@@Most Wanted Shoes@@@Petites Must Haves@@@Sports Fan Shop by Lids@@@Wedding Day@@@Bridal Shower@@@Bachelorette Party@@@Rehearsal Dinner@@@Something Blue@@@Scarves & Wraps@@@Hosiery@@@Something Blue@@@Adrianna Papell@@@Ralph Lauren Must Haves@@@Marchesa@@@Beauty@@@Belts@@@Handbags & Accessories@@@Hats, Scarves, & Wraps@@@Shoes@@@Sunglasses@@@Impulse Contemporary Clothing@@@Juniors@@@Lingerie & Pajamas@@@Petites@@@Plus Sizes@@@Plus Sizes@@@Lingerie and Pajamas@@@Harry & David@@@COACH@@@Shop All Christmas Ornaments@@@Kitchen@@@COACH@@@Petite@@@Bare Escentuals@@@Shop Prom Shoes@@@20% off Collectibles@@@50% off Lenox Ornaments@@@White Shop Trends Petites@@@The North Face Men@@@The North Face Women@@@The North Face Kids@@@Home@@@Bed & Bath@@@Home@@@Bed & Bath@@@Shop Junior Tops@@@Big & Tall 2-Day Specials@@@Guys' 2-Day Specials@@@Guys' Specials@@@Big & Tall Specials@@@Big & Tall Specials@@@Big & Tall Specials@@@Guys Web Busters@@@Big & Tall Web Busters@@@Big & Tall Web Busters@@@Big & Tall Specials@@@Big & Tall Specials@@@Guys' Specials@@@Big & Tall Specials@@@Big & Tall 5-day Specials@@@Big & Tall 5-day Specials@@@Guys 5-day Specials@@@Big & Tall 2-Day Specials@@@Big & Tall 2-day Specials@@@Guys' 2-day Specials@@@Big & Tall 2-day Specials@@@Shop Mattress Specials@@@Big & Tall 3-Day Specials@@@Rompers@@@Nail Polish@@@Calvin Klein@@@Bvlgari@@@Clinique@@@COACH@@@Athletic Shoes@@@Athletic Shoes@@@Locker Room by Lids@@@Surf & Skate@@@Finish Line Athletic Shoes@@@Sports Fan Gear by Lids@@@Sport Sunglasses for Men@@@Casual Button-Down Shirts@@@Dress Shirts@@@Polo Shirts@@@T-Shirts@@@Locker Room By Lids@@@Shoes@@@Polo Ralph Lauren@@@Casual Button-Down Shirts@@@Dress Shirts@@@American Rag@@@Armani Jeans@@@Denim & Supply Ralph Lauren@@@G-Star@@@Sean John@@@LRG@@@Quiksilver@@@7 For All Mankind@@@Bar III@@@Activewear@@@Snapbacks@@@Socks@@@Sunglasses@@@Watches@@@Underwear@@@FinishLine@@@Locker Room By Lids@@@Sunglass Hut@@@Sports Fan Gear by Lids@@@Men's Levi's@@@Slippers@@@Dockers Pants@@@Dress Shirts@@@Polo Shirts@@@T-Shirts@@@Casual Button-Down Shirts@@@Polo Shirts@@@T-Shirts@@@Sports Fan Gear by Lids@@@Shop Vests@@@Hoodies & Fleece@@@Shop Beach Towels@@@Shop Active T-Shirts@@@Sports Fan Gear by Lids@@@Men's Jewelry@@@Cologne & Grooming@@@Sports Fan Gear by Lids@@@Also Shop Men's Socks@@@Also Shop Athletic Socks@@@Timberland Cold Weather@@@Timberland Hiking Boots@@@Levi's@@@Size 6.5 & Under@@@Size 14 & Over@@@Narrow Shoes@@@Wide Shoes@@@Extended Sizes@@@Also Shop Men's Underwear@@@Sunglasses@@@Watches@@@Calvin Klein Cologne@@@Calvin Klein Watches@@@Levi's 510: Skinny@@@Levi's 508: Slim Tapered@@@Levi's 511: Slim@@@Levi's 513: Slim Straight@@@Levi's 501: Original Classic@@@Levi's 514: Straight@@@Levi's 505: Regular@@@Levi's 550: Relaxed@@@Levi's 559: Relaxed Straight@@@Levi's 560: Comfort@@@Levi's 569: Loose Straight-Leg@@@Shop All Big & Tall@@@Nautica Cologne@@@Nautica Shoes@@@Shop All Big & Tall@@@Fragrance@@@Polo Ralph Lauren Women's@@@Denim & Supply Ralph Lauren@@@Men's Shoes@@@Watches@@@American Rag Casual Shirts@@@American Rag Hoodies@@@American Rag Pants@@@American Rag Shorts@@@American Rag T-Shirts & Tanks@@@Denim@@@Accessories@@@Denim@@@Outerwear@@@Pants & Shorts@@@Tops@@@GUESS? T-Shirts@@@GUESS? Shoes@@@Watches@@@Belts & Wallets@@@Coats & Jackets@@@Jeans@@@Shirts@@@Shorts@@@Shoes@@@T-Shirts@@@Watches@@@Accessories@@@Casual Shirts@@@Dress Shirts@@@Jackets & Coats@@@Jeans & Pants@@@Shoes@@@Swim@@@Underwear & Sleepwear@@@Izod Watches@@@Reaction Cologne & Grooming@@@Timberland@@@Finish Line Athletic Shoes@@@7 for All Mankind@@@Armani Jeans@@@Bottoms@@@Shoes@@@Tops@@@Bar III@@@Buffalo David Bitton@@@Denim & Supply Ralph Lauren@@@Accessories@@@Bottoms@@@Outerwear@@@Tops@@@Calvin Klein Jeans@@@Dockers Alpha Khaki@@@Guess@@@DC Shoes@@@Levi's@@@LRG@@@Marc Ecko Cut & Sew@@@Puma@@@Shop Watches@@@Shop All Sports Fan Gear@@@Slim Fit Shop@@@Also Shop Women's@@@Surf & Skate@@@The Wedding Shop@@@Godiva@@@Aerosoles@@@Also Shop Men's Celebrity Scents@@@Floor Lamps@@@Home@@@Mens Specials@@@Hair Care@@@SHOP ALL MATTRESSES@@@Benefit@@@Danielle Nicole@@@COACH@@@Girls Skirts@@@Home@@@Juniors@@@Juniors@@@Men's 2-Day Specials@@@Men's 2-Day Specials@@@Men's Specials@@@Men's Specials@@@Guys' Specials@@@Guys' Specials@@@Men's Web Busters@@@Men's Web Busters@@@Guy's Web Busters@@@Guys' Specials@@@Guys' Specials@@@Men's Specials@@@Men's Specials@@@Guys 5-day Specials@@@Guys 5-day Specials@@@Men's 5-day Specials@@@Men's 5-day Specials@@@Guys' 2-day Specials@@@Guys' 2-day Specials@@@Men's 2-day Specials@@@Men's 2-day Specials@@@Guys 3-Day Specials@@@Bliss@@@Cargo@@@Clarisonic@@@Flatware Sets@@@Kids@@@Kids@@@Dior@@@Fragrance@@@Shop Petites@@@Sheets@@@Bed & Bath@@@Dining & Entertaining@@@Furniture@@@Kitchen@@@Luggage@@@Mattresses@@@Gifts That Give Hope@@@Kids Bath@@@Kids Bedding@@@Kids' Curtains@@@Kids' Furniture@@@Outdoor Furniture@@@Rugs@@@Picnic & Outdoor Dinnerware@@@Outdoor & Patio Furniture@@@Outdoor/Indoor Rugs@@@Outdoor Lighting@@@Patio Umbrellas@@@Fiesta@@@Dinnerware@@@Drinkware@@@Flatware@@@Serveware@@@Hotel Collection Bath@@@Hotel Collection Bedding@@@Hotel Collection Dining@@@Hotel Collection Mattresses@@@KitchenAid@@@Bed & Bath@@@Dining@@@Lenox@@@Bath@@@Bedding@@@Dining & Home Decor@@@Kitchen@@@Waterford@@@Dining@@@Gifts & Decor@@@Mikasa@@@Monogram Gift Shop@@@Sports Fan Gear by Lids@@@The Wedding Shop@@@Bed & Bath@@@Dining & Entertaining@@@Furniture@@@Kitchen@@@Lighting & Lamps@@@Luggage@@@Mattresses@@@Rugs@@@Slipcovers@@@Window Treatments@@@Shop All Mattresses@@@Ed Hardy@@@Laura Geller@@@Fine China@@@Also Shop White Dinnerware@@@Glassware@@@Also shop Barware@@@Mens@@@Mens@@@Shoes 2-Day Specials@@@Shoes 2-Day Specials@@@Shoes Web Buster@@@Shoes Web Buster@@@Shoe Specials@@@Shoe Specials@@@Shoe Specials@@@Shoes 2-Day Specials@@@Shoes 2-Day Specials@@@Men's Specials@@@Men's Web Busters@@@Shoe Specials@@@Men's Specials@@@Shoe Specials@@@Shoe Specials@@@Men's Limited Time Specials@@@Shoes 5-day Specials@@@Men's 5-day Specials@@@Shoes 5-day Specials@@@Shoes 5-day Specials@@@Shoes 2-day Specials@@@Men's 2-day Specials@@@Shoes 3-Day Specials@@@Lea Journo@@@Personal Care@@@Peter Thomas Roth@@@Drinkware Buying Guide@@@Ralph Lauren@@@Philosophy@@@Fragrance@@@Super-Strength Skincare@@@Mother's Day Gift Guide@@@Shop Pajamas & Robes@@@Shop Activewear@@@Narrow Shoes@@@Wide Shoes@@@Wide Calf Boots@@@COACH@@@Shop GUESS Apparel@@@Shop all INC@@@Shop Michael Kors Apparel@@@Shop Michael Kors Handbags@@@Shop All Handbags & Accessories@@@Steve Madden Handbags & Accessories@@@Steve Madden Men's Shoes@@@Thalia Sodi Clothing@@@Show All Brands@@@Shop Jessica Simpson Apparel@@@Shop Marc Fisher Handbags@@@Shop Alfani Apparel@@@Shop American Rag Clothing@@@Shop All Calvin Klein@@@Also Shop CL by Laundry@@@Also Shop Dirty Laundry@@@Also Shop Chinese Laundry@@@Also Shop Dirty Laundry@@@Also Shop Chinese Laundry@@@Also Shop CL by Laundry@@@Also Shop Fergalicious@@@Shop Frye Handbags & Accessories@@@Shop All Material Girl@@@Shop All Rachel Rachel Roy@@@The North Face Clothing@@@Vince Camuto Apparel@@@Vince Camuto Handbags@@@Vince Camuto Watches@@@Vince Camuto Fragrance@@@Vince Camuto Jewelry@@@Men's Shoes@@@Kids' Shoes@@@Boys@@@Girls@@@Impulse Contemporary Shoes@@@The Wedding Shop@@@Shop All Mattresses@@@Juniors@@@Maxi Skirts@@@Petite Maxi Dresses@@@Plus Size Maxi Dresses@@@Beautiful@@@Stila@@@Strivectin@@@Calvin Klein@@@Sue Devitt@@@T3@@@Shop Women's Dresses@@@COACH@@@Prom 2015@@@The Prom Shop@@@Trendy Plus Size Dresses@@@Shop Women's Dresses@@@Shop Impulse Contemporary Jeans@@@Lingerie & Pajamas@@@Panties@@@Sets@@@Shop All Juniors@@@Under $10: Tops@@@Under $20: Bottoms@@@Under $30: Dresses@@@Under $30: Trendy Plus Sizes@@@Shop All Juniors Dresses@@@American Rag Shoes@@@Also Shop Plus Sizes@@@Bar III@@@GUESS?@@@Jessica Simpson Shoes@@@Jessica Simpson Accessories@@@Jessica Simpson Plus Sizes@@@Else Jeans@@@Miss Me@@@Impulse Contemporary Clothing@@@Trendy Plus Sizes@@@Long Prom Dresses@@@Short Prom Dresses@@@Plus Prom Dresses@@@Shop All Juniors Dresses@@@Guys@@@Beauty@@@Fashion Jewelry@@@Handbags & Accessories@@@Shoes@@@Sunglasses@@@Junior Plus Size@@@Junior Plus Size@@@Frango@@@Shop All Mattresses@@@Cole Haan@@@Urban Decay@@@Mascara@@@Shoes@@@Shoes@@@Men's Levi's@@@Holiday Lane@@@Ed Hardy@@@Lighting and Lamps@@@Mother's Day Gift Guide@@@Mother's Day Gift Guide@@@Also Shop Baby-G@@@Show All Brands@@@Burberry@@@COACH@@@Kate Spade New York@@@Thalia Sodi Clothing@@@The Wedding Shop@@@Watches@@@Shop Sale Watches@@@SHOP ALL MATTRESSES@@@Luggage@@@Slippers@@@Womens@@@Mens@@@Mens@@@Socks@@@Sports Fan Shop@@@Home Decor@@@Sports Team Barware by Lids@@@SHOP ALL MATTRESSES@@@Buy 1, Get 1 50% off@@@Mother's Day Gift Guide@@@Shop All Calvin Klein@@@Michael Kors Apparel@@@Show All Brands@@@Shop American Rag Clothing@@@Shop Frye Shoes@@@Shop Guess Clothing@@@Shop Jessica Simpson Clothing@@@Vince Camuto Apparel@@@Shop Material Girl Clothing@@@Shop Kensie Clothing@@@Luggage@@@Sunglasses@@@Shop Leggings@@@Impulse Contemporary Brands@@@Also Shop Men's@@@The Wedding Shop@@@Sunglasses@@@Juicy Couture@@@Justin Bieber@@@Ralph Lauren@@@Beauty Under $25@@@MOTHER'S DAY GIFT GUIDE@@@Anti-Aging@@@Sun Care@@@Cleansers@@@CHANEL@@@Perfume Finder@@@Shop All Brands@@@Burberry@@@Giorgio Armani@@@Viktor & Rolf@@@Lips@@@Brushes & Bags@@@Mascara@@@Moisturizers@@@Palettes@@@CHANEL@@@Cologne Finder@@@Shop All Brands@@@Burberry@@@Viktor & Rolf@@@Giorgio Armani@@@Men's Grooming@@@Tools & Accessories@@@Brows@@@Foundation@@@3-Step@@@Ibuki@@@Anti-Aging@@@Sun@@@See All Brands@@@Elizabeth Arden Prevage@@@Laura Geller Cheeks@@@Clinique@@@COACH@@@J'adore@@@Foundation@@@Primer@@@Foundation@@@Primer@@@Learn More Skincare@@@Ready Makeup Collection@@@Shop All Beauty@@@Shop All Makeup@@@Shop Cologne & Grooming@@@Watches@@@Baby Girl (0-24 months)@@@Baby Boy (0-24 months)@@@Baby Strollers & Gear@@@Newborn Shop@@@Shoes@@@Toys & Games@@@Shoes@@@Toys & Games@@@Destination Maternity@@@Ralph Lauren Baby Gift Shop@@@Baby Shoes@@@Destination Maternity@@@Carter's@@@First Impressions@@@Ralph Lauren Childrenswear@@@Dresses@@@Shoes@@@Toys & Games@@@Character Shop@@@Dresses@@@Shoes@@@Dresses@@@Shoes@@@Girls Shoes@@@Toys & Games@@@Shoes@@@Toys & Games@@@Character Shop@@@Shoes@@@Toys & Games@@@Shoes@@@Boys Shoes@@@Toys & Games@@@Sports Fan Gear by Lids@@@Finish Line Athletic Shoes@@@Dress Shoes@@@Shop Kids Slippers@@@Finish Line Athletic Shoes@@@Beach Towels@@@Shop Sandals@@@One Pieces & Bodysuits@@@Sets@@@Sleepwear@@@Carter's Baby Gifts@@@Kids & Baby Home@@@Kids' Jewelry & Watches@@@Sports Fan Shop by Lids@@@Baby Sale & Clearance@@@Recliners@@@Natural & Organic@@@Terre d'Oc@@@The Pointy-Toe Pump@@@The Statement Tote@@@Also Shop Petite@@@Also Shop Plus Sizes@@@Also shop Shower Curtains@@@Women's Swimwear@@@Men's Swimwear@@@Kids' Swimwear@@@Also shop Kids' Bedding@@@Personal Care@@@Bath Rugs & Bath Mats@@@Bath Towels@@@Bathroom Accessories@@@Shower Curtains & Accessories@@@Also shop Kids' Bath@@@Also shop Kids' Furniture@@@Also shop Kids' Bedding@@@Also Shop Ralph Lauren@@@Apartment Living@@@Bedroom Furniture@@@Mattresses@@@Ties@@@Shop All Watches@@@Lowest Prices of the Season@@@Shop Ottomans@@@Also Shop Home Bar Furniture@@@Shop all Living Room Furniture@@@Furniture Protection Plan@@@Slipcovers@@@Outdoor Ottomans@@@Rugs@@@Shop all Living Room Furniture@@@Also Shop Home Bar Furniture@@@All Bedroom Furniture@@@Bedding@@@Mattresses@@@Also Shop Kids Bedding@@@Mattresses@@@Bedroom Lighting@@@Also Shop Home Bar Furniture@@@Lowest Prices of the Season@@@Outdoor Entertaining@@@Outdoor Lighting@@@Outdoor Rugs@@@Outdoor Dining Sets@@@Outdoor Seating Sets@@@Home Bar@@@Office Lighting@@@MM Couture@@@Casual Dinnerware@@@Table Linens@@@Cleaning & Organizing@@@Kitchen Gadgets@@@Also shop Bakeware@@@Blenders@@@Coffee Makers@@@Espresso Makers@@@Food Processors@@@Juicers@@@Mixers & Accessories@@@Cleaning & Storage@@@Vacuums & Steam Cleaners@@@Dyson@@@Fiesta@@@Caribbean@@@Cassis@@@Cherry@@@Dijon@@@Dune@@@Fennel@@@Flame@@@Marseille@@@Palm@@@Soleil@@@Coffee Buying Guide@@@Cookware Buying Guide@@@Cutlery Buying Guide@@@Outdoor Living@@@Dresses@@@Pants@@@Baby@@@Boys 2-7@@@Boys 8 - 20@@@Girls 2 - 6x@@@Girls 7- 16@@@Dresses@@@Handbags@@@Juniors@@@Petite@@@Plus@@@Shoes@@@Shorts@@@Skirts@@@Swimwear@@@Tops@@@Casual Shirts@@@Polos@@@Shoes@@@Shorts@@@T-Shirts@@@Baby@@@Girls 2-6x@@@Girls 7-16@@@Boys 2-7@@@Boys 8 - 20@@@Women's Clothing@@@Impulse Contemporary Clothing@@@Plus Sizes@@@Petites@@@Lingerie@@@Trendy Plus Sizes@@@Clothing@@@Handbags & Accessories@@@Shoes@@@Apparel@@@Shoes@@@Bed & Bath@@@Dining@@@Kitchen@@@Luggage@@@Lamps@@@More For The Home@@@Jewelry@@@Watches@@@Baby Girl@@@Baby Boy@@@Girls 2-6x@@@Girls 7-16@@@Boys 2-7@@@Boys 8-20@@@Gifts & Value Sets@@@Gifts With Purchase@@@Sale & Clearance@@@Bed & Bath@@@Dining@@@For The Home@@@Handbags & Accessories@@@Jewelry@@@Juniors@@@Also Shop Junior Plus@@@Kids@@@Kitchen@@@Men@@@Shoes@@@Women@@@Watches@@@Taylor Swift@@@Roxy@@@Bar III@@@Else Jeans@@@Miss Me Jeans@@@Dr. Martens@@@Easy Spirit@@@Nike@@@Paris Hilton@@@Sperry Top-Sider@@@Drinkware Buying Guide@@@Also Shop Home Bar Furniture@@@Also shop Lenox Bath@@@Also Shop Waterford Bedding@@@DKNY Lenox@@@Holiday Dining Sale@@@Home Decor Sale@@@The Buzz@@@Area Rug Buying Guide@@@Area Rug Buying Guide@@@Area Rug Buying Guide@@@Area Rug Buying Guide@@@Area Rug Buying Guide@@@Area Rug Buying Guide@@@Area Rug Buying Guide@@@Apartment Living@@@Bath Rugs@@@Tech Accessories@@@Lowest Prices of the Season@@@Mattress Buying Guide@@@Air Mattresses@@@Beds@@@Metal Beds@@@Trendy Plus Size Coats@@@Trendy Plus Size Dresses@@@Leggings@@@Lingerie@@@Trendy Plus Size Pants@@@Suits & Suit Separates@@@Trendy Plus Size Sweaters@@@Trendy Plus Size Tops@@@Dresses@@@Jackets@@@Pants@@@Skirts@@@Suits@@@Tops@@@Handbags@@@Shoes@@@Plus Size Brands@@@Sleepwear@@@Lauren Shoes@@@Lauren Handbags and Accessories@@@Levi's Shop@@@Haute Handbags@@@Most Wanted Shoes@@@The Wedding Shop@@@Belts@@@Handbags & Accessories@@@Hats, Scarves, & Wraps@@@Hosiery@@@Shoes@@@Sunglasses@@@Shop Trendy Plus Sizes@@@Trendy Plus Sizes@@@Lingerie & Pajamas@@@Food Prep & Carts@@@Petites@@@Shop All Shoes@@@Petite@@@Petite@@@Petite@@@Petite@@@Petite@@@Petite@@@Petite@@@Petite@@@Petite@@@CLOSEOUTS@@@TestForIntWithNewStella@@@Paco Rabanne@@@Shop Brasil Mercado@@@Shop All Michael Kors@@@Shop Junior Jeans@@@Shop all Teams@@@Shop all Teams@@@Gift Cards@@@Lauren Mother's Day Gifts@@@MICHAEL Michael Kors@@@Finish Line Kids@@@Finish Line Men@@@Finish Line Womens@@@Also Shop Plus Dresses@@@Shop Plus Size Dresses@@@Shop All Beauty@@@The Pointy-Toe Pump@@@The Statement Tote@@@The Pointy-Toe Pump@@@The Statement Tote@@@Shop All Perfume@@@Ready-to-Assemble Buying Guide@@@Shop All Petite Pants@@@Shop All Women's Watches@@@Shop All Men's Watches@@@Shop All Lancome@@@Sincerely Jules' Picks@@@Jasmine V's Picks@@@Shop Women's Apparel@@@Shop Men's Apparel@@@Shop Shoes@@@Shop Handbags@@@Shop Watches@@@Shop Jewelry@@@Shop Beauty@@@Shop Men's Apparel@@@Shop Women's Apparel@@@Shop Home@@@Shop Fragrance@@@Polo Ralph Lauren@@@Shop Apparel@@@Shop Accessories@@@Shop Shoes@@@Shop Fragrance@@@Shop Custom Fit Shop@@@Shop Big & Tall@@@Denim & Supply Ralph Lauren@@@Lauren Ralph Lauren@@@Shop Apparel@@@Shop Shoes@@@Shop Fragrance@@@Polo Ralph Lauren@@@Denim & Supply Ralph Lauren@@@Ralph Lauren Childrenswear@@@Ralph Lauren Baby@@@Ralph Lauren@@@Shop Bed & Bath@@@Shop Dining@@@Shop Barware@@@Shop Home Decor@@@Lauren Ralph Lauren@@@Lauren Ralph Lauren@@@Ralph Lauren@@@Shop Men@@@Shop Women@@@Shop Kids@@@Shop Men@@@Shop Women@@@Shop Home@@@Shop Kids@@@Shop Handbags@@@Shop Accessories@@@Shop Shoes@@@Shop Watches@@@Shop Sunglasses@@@Shop Jewelry@@@Shop Fragrance@@@Shop Men@@@Shop Women@@@Shop Juniors@@@Shop Kids@@@Shop Men@@@Shop Women@@@Shop Kids@@@Shop Men@@@Shop Apparel@@@Shop Accessories@@@Shop Big & Tall@@@Shop Cologne@@@Shop Home@@@Shop Women@@@Shop Women's Shoes@@@Shop Men@@@Shop Men's Shoes@@@Shop Women@@@Shop Jewelry@@@Shop Home@@@Shop Women@@@Shop Women's Accessories@@@Shop Men@@@Shop Men's Accessories@@@Shop Women@@@Shop Men@@@Shop Shoes@@@Shop Handbags@@@Shop Jewelry@@@Shop Home@@@Shop Men@@@Shop Men's Shoes@@@Shop Shoes@@@Shop Accessories@@@Shop Women@@@Shop Men@@@Shop Handbags & Accessories@@@Shop Women@@@Shop Shoes@@@Shop Handbags@@@Shop Watches@@@Shop Women@@@Shop Shoes@@@Shop Handbags@@@Shop Jewelry@@@Shop Watches@@@Shop Men@@@Shop Women@@@Shop Kids@@@Shop Plus Sizes@@@Silver Jeans@@@SHOP ALL BRANDS@@@Also Shop Junior Plus Specials]]></con:value></con:property><con:property><con:name>registrableCount</con:name><con:value>0</con:value></con:property></con:properties><con:tearDownScript/><con:reportParameters/><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC1- Verify suppression of mP_false and bT_Hide" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="51cfac6c-7e81-470a-adb7-26970860f3ee"><con:settings/><con:testStep type="httprequest" name="v3 Index"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="v3 Index" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept_type_xml}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v3/catalog/category/index</con:endpoint><con:request><![CDATA[firstname=${#TestSuite#firstname}&lastname=${#TestSuite#lastname}&address1=${#TestSuite#address1}&address2=${#TestSuite#address2}&gender=M&city=${#TestSuite#city}&state=${#TestSuite#state}&zipcode=${#TestSuite#zipcode}&countrycode=${#TestSuite#countrycode}&emailaddress=${#TestSuite#emailId}&verifyemailaddress=${#TestSuite#emailId}&password=${#TestSuite#password}&verifypassword=${#TestSuite#password}&birthdateday=${#TestSuite#day}&birthdatemonth=${#TestSuite#month}&birthdateyear=${#TestSuite#year}&subscription=N&textoption=N&bestphone=${#TestSuite#bestphone}&mobilephone=${#TestSuite#mobilephone}&hintquestion=1&hintanswer=1]]></con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [overridecatid]" disabled="true"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
//holder.namespaces["ns2"] = "http://schemas.macys.com/definitions/ps/v3"
def over_cat = holder.getNodeValues( "//category/overridecatid" )
def over_have_cat = holder.getNodeValues( "//category[overridecatid]/@id" )

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "over_cat", over_cat.toString() )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "over_have_cat", over_have_cat.toString() )</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Transferring GoTo and override cat"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
//holder.namespaces["ns2"] = "http://schemas.macys.com/definitions/ps/v3"
def node = holder.getNodeValues( "//category[categorytype='GoTo' and overridecatid]/@id" )
//def name = holder.getNodeValues( "//category[categorytype='GoTo' and overridecatid]/name" )
def names="";
for(val in node)
{
	def name = holder.getNodeValue( "//category[@id='$val']/name" )
	names+=name+"@@@";
}
names=names.substring(0,names.size()-3)
//log.info names
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "ids", node.toString() )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "names", names.toString() )</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Transferring cat with mN"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
//holder.namespaces["ns2"] = "http://schemas.macys.com/definitions/ps/v3"
def cat_mn = holder.getNodeValues( "//category[not(contains(mobileName,'Test'))]/mobileName" )
def cat_mn_id = holder.getNodeValues( "//category[mobileName and not(contains(mobileName,'Test'))]/@id" )

assert cat_mn.size() == cat_mn_id.size()

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue("cat_mn", cat_mn.toString() )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue("cat_mn_id", cat_mn_id.toString() )</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Transfer cat with mP_false and cbt_hide"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
//holder.namespaces["ns2"] = "http://schemas.macys.com/definitions/ps/v3"
def mp_no = holder.getNodeValues( "//category[mobilePublish='N']/@id" )
def cbt = holder.getNodeValues( "//category[categorytype='Hide']/@id" )

//log.info mp_no.size()
//log.info cbt.size()

messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "mp_no", mp_no.toString() )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "cbt_hide", cbt.toString() )</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="application MEW"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="application MEW" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept_type_xml}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v4/catalog/category?application=MEW</con:endpoint><con:request><![CDATA[firstname=${#TestSuite#firstname}&lastname=${#TestSuite#lastname}&address1=${#TestSuite#address1}&address2=${#TestSuite#address2}&gender=M&city=${#TestSuite#city}&state=${#TestSuite#state}&zipcode=${#TestSuite#zipcode}&countrycode=${#TestSuite#countrycode}&emailaddress=${#TestSuite#emailId}&verifyemailaddress=${#TestSuite#emailId}&password=${#TestSuite#password}&verifypassword=${#TestSuite#password}&birthdateday=${#TestSuite#day}&birthdatemonth=${#TestSuite#month}&birthdateyear=${#TestSuite#year}&subscription=N&textoption=N&bestphone=${#TestSuite#bestphone}&mobilephone=${#TestSuite#mobilephone}&hintquestion=1&hintanswer=1]]></con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Suppresion of mP false and bT Hide"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def mp_no = context.expand( '${#TestSuite#mp_no}' )
def cbt_hide = context.expand( '${#TestSuite#cbt_hide}' )

def hold_mp_no = mp_no.replace("[","").replace("]","").replace(" ","").split(",")
def hold_cbt_hide = cbt_hide.replace("[","").replace("]","").replace(" ","").split(",")

def node_ids = holder.getNodeValues( "//categoryresponse/categoryDetails/id" )
def node_child = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/child/id" )

for(val in hold_mp_no)
{
	assert !Arrays.asList(node_ids).contains(val)
	assert !Arrays.asList(node_child).contains(val)
}

for(temp in hold_cbt_hide)
{
	assert !Arrays.asList(node_ids).contains(temp)
	assert !Arrays.asList(node_child).contains(temp)
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>testCase.getTestSuite().setPropertyValue("registrableCount","0");
</con:setupScript><con:tearDownScript>testCase.getTestSuite().setPropertyValue("registrableCount","0");
</con:tearDownScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>7104d18e-2339-426c-af27-ab391c3b4cfd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cbeae678-e619-4def-a88e-e76269a94a7e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75dc5cde-3bdb-43d8-a62b-0e1e0a5c9bfa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae723ae3-e951-45cb-a2bd-b53149f08ea3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>23ccce71-4bbe-41f4-adc7-6a25147ab6ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>19eb54eb-9f76-44e9-9d6b-c33ffbeae758</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC2-Verify URL domain change" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b610d401-3189-4ffa-a0be-9e4d7738f506"><con:settings/><con:testStep type="httprequest" name="Check URL domain"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Check URL domain" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept_type_xml}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v4/catalog/category?application=MEW</con:endpoint><con:request><![CDATA[firstname=${#TestSuite#firstname}&lastname=${#TestSuite#lastname}&address1=${#TestSuite#address1}&address2=${#TestSuite#address2}&gender=M&city=${#TestSuite#city}&state=${#TestSuite#state}&zipcode=${#TestSuite#zipcode}&countrycode=${#TestSuite#countrycode}&emailaddress=${#TestSuite#emailId}&verifyemailaddress=${#TestSuite#emailId}&password=${#TestSuite#password}&verifypassword=${#TestSuite#password}&birthdateday=${#TestSuite#day}&birthdatemonth=${#TestSuite#month}&birthdateyear=${#TestSuite#year}&subscription=N&textoption=N&bestphone=${#TestSuite#bestphone}&mobilephone=${#TestSuite#mobilephone}&hintquestion=1&hintanswer=1]]></con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [url]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def brand = context.expand( '${#Project#brand}' )

if(brand == "MCOM")
{
	for(val in node)
	{
	assert val.startsWith("http://m.macys.com/")
	}
}
else
{
	for(val in node)
	{
	assert val.startsWith("http://m.bloomingdales.com/")
	}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [bUrl]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def brand = context.expand( '${#Project#brand}' )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

if(bUrl != null)
{
	for(val in bUrl)
	{
		if(brand == "MCOM")
		assert val.startsWith("http://m.macys.com/")

		else
		assert val.startsWith("http://m.bloomingdales.com/")
	}
}
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:setupScript>testCase.getTestSuite().setPropertyValue("registrableCount","0");
</con:setupScript><con:tearDownScript>testCase.getTestSuite().setPropertyValue("registrableCount","0");
</con:tearDownScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>7104d18e-2339-426c-af27-ab391c3b4cfd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cbeae678-e619-4def-a88e-e76269a94a7e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75dc5cde-3bdb-43d8-a62b-0e1e0a5c9bfa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae723ae3-e951-45cb-a2bd-b53149f08ea3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>012f0db6-e297-450b-a8e4-ec0d91e840ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="blocked_by_MT31050_TC3 -Verify GoTo category name" searchProperties="true" id="e91b31f2-569e-4c42-aa12-87a6605f1884"><con:settings/><con:testStep type="httprequest" name="Verify fields"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Verify fields" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept_type_xml}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v4/catalog/category?application=MEW</con:endpoint><con:request><![CDATA[firstname=${#TestSuite#firstname}&lastname=${#TestSuite#lastname}&address1=${#TestSuite#address1}&address2=${#TestSuite#address2}&gender=M&city=${#TestSuite#city}&state=${#TestSuite#state}&zipcode=${#TestSuite#zipcode}&countrycode=${#TestSuite#countrycode}&emailaddress=${#TestSuite#emailId}&verifyemailaddress=${#TestSuite#emailId}&password=${#TestSuite#password}&verifypassword=${#TestSuite#password}&birthdateday=${#TestSuite#day}&birthdatemonth=${#TestSuite#month}&birthdateyear=${#TestSuite#year}&subscription=N&textoption=N&bestphone=${#TestSuite#bestphone}&mobilephone=${#TestSuite#mobilephone}&hintquestion=1&hintanswer=1]]></con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert category name placement for GoTo"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def ids = context.expand( '${#TestSuite#ids}' )
def names = context.expand( '${#TestSuite#names}' )

List hold_ids = Arrays.asList(ids.replace("[","").replace("]","").replace(" ","").split(","))
def hold_names = names.split("@@@")

log.info hold_ids.size()
log.info hold_names.size()

def child = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/child/id" )
log.info child.size()
//def override = holder.getNodeValues( "//categoryResponse/reference/goto/rId" )

for(int i=0; i&lt;hold_ids.size(); i++)
{
	def child_name="";
	def temp = hold_ids[i]
	log.info temp+"  temp"
	def override_cat = holder.getNodeValue( "//categoryresponse/reference/goto[id=$temp]/rId" )
	log.info override_cat+"  OVERRIDE"
			
	if(Arrays.asList(child).contains(override_cat) &amp;&amp; override_cat != null)
	{
		def val = hold_ids[i]
		log.info val+"  VAL"
		child_name = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/child[id=$override_cat]/name" )
		log.info child_name.toString()+"  CHILD"
		log.info hold_names[i]+"  V3-NAME"
		
		if(child_name == null)
		continue;

		if(child_name.toString().contains("Ãª") | hold_names[i].toString().contains("ê") | hold_names[i].toString().contains("®"))
		{
			log.info "ENTERING SPECIAL CASE"
			continue;
		}
		
		boolean flag=false;
		if(!child_name.contains(hold_names[i]))
		{
			log.info "EDGE CASE"
			def collection = holder.getNodeValues( "//categoryresponse/reference/goto[rId=$override_cat]/id" )
			log.info collection.toString()
			for(int j=0; j&lt;collection.size(); j++)
			{
				def mar = collection[j]
				int index = hold_ids.indexOf(mar);
				log.info hold_names[index]
				
				if(Arrays.asList(child_name).contains(hold_names[index]))
				{
					flag=true;
				}	
			}
		assert flag==true;
		continue;
		}
		
		assert child_name.contains(hold_names[i])
	}
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC4-Verify MOBILE_DISPLAY_NAME replacement" searchProperties="true" id="11d88102-0141-4bdd-8dc0-cdf2a78f4dee"><con:settings/><con:testStep type="httprequest" name="Verify fields"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Verify fields" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept_type_xml}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v4/catalog/category?application=MEW</con:endpoint><con:request><![CDATA[firstname=${#TestSuite#firstname}&lastname=${#TestSuite#lastname}&address1=${#TestSuite#address1}&address2=${#TestSuite#address2}&gender=M&city=${#TestSuite#city}&state=${#TestSuite#state}&zipcode=${#TestSuite#zipcode}&countrycode=${#TestSuite#countrycode}&emailaddress=${#TestSuite#emailId}&verifyemailaddress=${#TestSuite#emailId}&password=${#TestSuite#password}&verifypassword=${#TestSuite#password}&birthdateday=${#TestSuite#day}&birthdatemonth=${#TestSuite#month}&birthdateyear=${#TestSuite#year}&subscription=N&textoption=N&bestphone=${#TestSuite#bestphone}&mobilephone=${#TestSuite#mobilephone}&hintquestion=1&hintanswer=1]]></con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes1"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Verify mN replacement"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def cat_mn = context.expand( '${#TestSuite#cat_mn}' )
def cat_mn_id = context.expand( '${#TestSuite#cat_mn_id}' )

cat_mn = cat_mn.replace("[","").replace("]","").split(", ")
cat_mn_id = cat_mn_id.replace("[","").replace("]","").split(", ")

for(int i=0; i &lt; cat_mn.size(); i++)
{
	def hold = cat_mn_id[i]
	log.info hold
	def mdn = holder.getNodeValue( "//categoryresponse/categoryDetails[id=$hold]/summary/name" )
	log.info mdn
	def check = cat_mn[i]
	log.info check

	if(mdn == null)
	continue;
	
	assert mdn.equals(check)
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase></con:testSuite><con:testSuite name="C2 SDP ans WSSG Calls"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="C2" searchProperties="true" id="63a4d73f-814c-4d4e-a483-6a7b835bb40c"><con:settings/><con:testStep type="httprequest" name="SDP Call1">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="SDP Call1" id="26097c10-b79b-4936-82df-d29f34bda23f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#CatId}/browseproducts?show=product&amp;resultsperpage=24</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="18e2611d-1af2-4d28-9083-7edf2dccecf0"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Promotion Products]" id="9aed3787-52e8-4777-8c1e-a98eb8b26bc6"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def promotion_Products = holder.getNodeValues( "//*:CategoryResponse/category/product/product/@id" )
//log.info promotion_Products.toString()
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "promotion_Products", promotion_Products.toString().replaceAll(" ","").replace("[","").replace("]","") )
assert promotion_Products != null
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [Promotion Child Products]" id="9aed3787-52e8-4777-8c1e-a98eb8b26bc6"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def promotion_Products = holder.getNodeValues( "//*:CategoryResponse/category/product/product[iscollection=false and badges/promotionbadge]/@id" )
//log.info promotion_Products.toString()
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "promotion_child_Products", promotion_Products.toString().replaceAll(" ","").replace("[","").replace("]","") )
assert promotion_Products != null
</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>210da0ea-8b44-4acc-854a-ef5c8f80a7b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>634d0664-027a-46ac-96c7-160b48ac810a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d06cfd7-0e4c-4d46-b90d-4209454f1390</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26365983-1195-4ec6-b331-27245ad204ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>prodId</con:name><con:value>1537042</con:value></con:property><con:property><con:name>isDuplicate</con:name><con:value>false</con:value></con:property><con:property><con:name>catId</con:name><con:value>7138</con:value></con:property><con:property><con:name>promotion_Products</con:name><con:value>1324451,1354785,1354783,1353901,1352115,1345966,1358213,1354786,1354784,1354774,1354773,1346026,1346032,1369154,1324449,1354389,1353765,1346099,1346022,1345998,1329457,1324358,1324357,1356658</con:value></con:property><con:property><con:name>couponId</con:name><con:value>62</con:value></con:property><con:property><con:name>promotion_child_Products</con:name><con:value/></con:property><con:property><con:name>childProducts</con:name><con:value>1484806,1503857,1484808,1291012,1291004,1484681,1733393,958775,1062260,1203793,966235,1203794,958776,958774,1011204,1062254,958770,1708904,1708905,1740119,801464,801463,1639468,1654965,1654964,1654966,1654967,1740107,1740108,1740109,1740110,1740111,1740112,1740113,1740114,1740115,1740116,1740117,1740121,1123897,1173108</con:value></con:property><con:property><con:name>UPC_Gift</con:name><con:value>[91709535153, 882864371393]</con:value></con:property><con:property><con:name>UserID</con:name><con:value>null</con:value></con:property><con:property><con:name>upcnumber</con:name><con:value>27131268864</con:value></con:property><con:property><con:name>req</con:name><con:value>{"additemsrequest": {"userid": "${#TestSuite#userID}","quantity": 1,"upcnumber": "${#TestSuite#upcnumber}"}}</con:value></con:property><con:property><con:name>var</con:name><con:value>1748831,1748556</con:value></con:property><con:property><con:name>UPCs</con:name><con:value>91709535153,882864371393</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="15B-MT30205-Contextual Content::v4/catalog/category-Incomplete"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4/catalog/category?application=MOBILE&amp;assortment=STORE" searchProperties="true" id="dc00a6da-ec84-4828-91ad-3bcc95667591"><con:settings/><con:testStep type="httprequest" name="v4/catalog/category?assortment=STORE&amp;application=MOBILE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=STORE&amp;application=MOBILE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=STORE&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v4/catalog/category?assortment=STORE">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=STORE" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=STORE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>1cf7c61e-d5ae-4b0e-b09d-6cfd2b1d274f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e29f548-48e0-45d2-bcfb-3b6a041a1d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4/catalog/category?application=MOBILE&amp;assortment=Registry" searchProperties="true" id="04444bb4-c7ea-4b0e-bd8d-62d3d4de42a2"><con:settings/><con:testStep type="httprequest" name="v4/catalog/category?assortment=WEDDING_REGISTRY">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/category?assortment=WEDDING_REGISTRY" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v4/catalog/category?assortment=WEDDING_REGISTRY&amp;application=MOBILE</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [url&amp;bUrl domains]"><con:configuration><scriptText>def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
import com.eviware.soapui.support.XmlHolder

def domain=context.expand('${#Project#mdomain}')

if (header["#status#"].toString().contains("200 OK")){
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def url = holder.getNodeValues( "//categoryresponse/categoryDetails/summary/url" )
def bUrl = holder.getNodeValues( "//categoryresponse/categoryDetails/attributes/bUrl" )

//log.info url.toString()
//log.info domain
if (url.size()>0){
	for (urls in url){	
		assert url.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "url passed"
	}
}

if (bUrl.size()>0){
	for (burls in bUrl){	
		assert bUrl.toString().replace("[","").replace("]","").startsWith(domain)
//		log.info "burl passed"
	}
}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert node [not contains domain]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//categoryresponse[1]" )
	assert !node.toString().contains(context.expand('${#Project#domain}'))
	}</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>1cf7c61e-d5ae-4b0e-b09d-6cfd2b1d274f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e29f548-48e0-45d2-bcfb-3b6a041a1d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>domain</con:name><con:value>http://www1.macys.com</con:value></con:property><con:property><con:name>mdomain</con:name><con:value>http://m.macys.com</con:value></con:property><con:property><con:name>categories</con:name><con:value>22672,7495,118,1,16904</con:value></con:property><con:property><con:name>catId_domain</con:name><con:value>17133,9557,9562,9572,9598,9612,19264,27723</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="MT17748-AppRI-GET Captcha"><con:description>http://mingle/projects/mobile_tech/cards/17748
http://mingle/projects/mobile_tech/cards/18435
http://mingle/projects/mobile_tech/cards/19096

For getting the captha - http://www.freeformatter.com/base64-encoder.html#ad-output
Paste the challengeImage value here and decode it binary. The image will be downloaded. use the image text for the next step.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties><con:property><con:name>challenge</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>challengeKey</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">N6IsRuKSUl3gqJEIxcHjwNMbp7Uo4WctBUy/cC8odMY=</con:value></con:property></con:properties><con:reportParameters/><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PSP-10442-Verify Captcha" searchProperties="true" id="50e1eedb-168c-42dc-8580-ebb6093d50e3"><con:settings/><con:testStep type="httprequest" name="GET captcha Min"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET captcha Min" id="437fcc5d-99d9-4d2d-b0a9-f9183738967d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v4/applicationreferencedata/captcha?width=160&amp;height=60</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d687f896-9c48-41b4-9d30-f57bd3f3a141"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Transfer Captcha Values" id="b4f70995-b5b0-451a-859e-18c453658283"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def challenge = holder.getNodeValue( "//captcha/challenge" )
def challengeKey = holder.getNodeValue( "//captcha/challengeKey" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "challenge", challenge )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "challengeKey", challengeKey )</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [challenge]" id="10475fa0-67a8-4814-b910-d8afc48881bc"><con:configuration><path>exists( //captcha/challengeImage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [challengeKey]" id="ccfceb58-2e4a-4c1a-b5ca-fb16e62ee39b"><con:configuration><path>exists( //captcha/challengeKey)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="GET captcha Max" disabled="true" id="2f6a65cf-2f46-42c4-9c12-0105fced597b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET captcha Max" id="437fcc5d-99d9-4d2d-b0a9-f9183738967d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v4/applicationreferencedata/captcha?width=400&amp;height=200</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d687f896-9c48-41b4-9d30-f57bd3f3a141"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Transfer Captcha Values" id="b4f70995-b5b0-451a-859e-18c453658283"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def challenge = holder.getNodeValue( "//captcha/challenge" )
def challengeKey = holder.getNodeValue( "//captcha/challengeKey" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "challenge", challenge )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "challengeKey", challengeKey )</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [challenge]" id="10475fa0-67a8-4814-b910-d8afc48881bc"><con:configuration><path>exists( //captcha/challengeImage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [challengeKey]" id="ccfceb58-2e4a-4c1a-b5ca-fb16e62ee39b"><con:configuration><path>exists( //captcha/challengeKey)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="GET captcha Default" id="e6551a7f-e146-49fe-8d5d-313fb79b3d20" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET captcha Default" id="437fcc5d-99d9-4d2d-b0a9-f9183738967d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v4/applicationreferencedata/captcha</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d687f896-9c48-41b4-9d30-f57bd3f3a141"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Transfer Captcha Values" id="b4f70995-b5b0-451a-859e-18c453658283"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def challenge = holder.getNodeValue( "//captcha/challenge" )
def challengeKey = holder.getNodeValue( "//captcha/challengeKey" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "challenge", challenge )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "challengeKey", challengeKey )</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [challenge]" id="10475fa0-67a8-4814-b910-d8afc48881bc"><con:configuration><path>exists( //captcha/challengeImage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [challengeKey]" id="ccfceb58-2e4a-4c1a-b5ca-fb16e62ee39b"><con:configuration><path>exists( //captcha/challengeKey)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Validate captcha XML"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Validate captcha XML" postQueryString="false" mediaType="application/xml" id="229ed858-df8c-4948-9555-bdb77112d30a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v4/applicationreferencedata/captcha</con:endpoint><con:request><![CDATA[<captchaRequest>
   <challengeAnswer>4bdwr</challengeAnswer>
   <challengeKey>${#TestSuite#challengeKey}</challengeKey>
</captchaRequest>]]></con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ad7687c9-712b-4612-ab24-6907d7b82381"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Validate captcha JSON" disabled="true"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Validate captcha JSON" postQueryString="false" mediaType="application/json" id="7ef4cc97-d80d-4c04-bfbf-9cbb2a345b20" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endpoint}/v4/applicationreferencedata/captcha</con:endpoint><con:request> {
        "challengeAnswer": "5rwxp",
        "challengeKey": "${#TestSuite#challengeKey}"
    }
</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c06ea5f9-50b4-4dd0-848a-d1544ab08558"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>e6551a7f-e146-49fe-8d5d-313fb79b3d20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f6a65cf-2f46-42c4-9c12-0105fced597b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase></con:testSuite><con:testSuite name="15F-B-14711_Canvas to all Browse Pages for Chanel Categories"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="V3/catalog//browseproducts-MEW" searchProperties="true" id="8f23cf1a-d302-4718-bea4-8bb0133afbaf"><con:settings/><con:testStep type="httprequest" name="V3/catalog//browseproducts?&amp;device=PHONE&amp;assortment=SITE&amp;application=MEW&amp;country=US">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="V3/catalog//browseproducts?&amp;device=PHONE&amp;assortment=SITE&amp;application=MEW&amp;country=US" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&amp;device=PHONE&amp;assortment=SITE&amp;application=MEW&amp;country=US</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="V3/catalog//browseproducts?application=MEW&amp;show=product,facet,productpool">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="V3/catalog//browseproducts?application=MEW&amp;show=product,facet,productpool" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=product,facet,productpool&amp;device=PHONE&amp;assortment=SITE&amp;application=MEW&amp;country=US</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OTHER sortby" searchProperties="true" id="3c7eea20-ab70-48fc-8039-375291174681"><con:settings/><con:testStep type="httprequest" name="sortby=toppicks">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=toppicks" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&amp;device=PHONE&amp;assortment=SITE&amp;application=MEW&amp;country=US&amp;sortby=toppicks</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [productpool]"><con:configuration><path>exists( //*:CategoryResponse/category/productpool)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=price">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=price" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&amp;device=PHONE&amp;assortment=SITE&amp;application=MEW&amp;country=US&amp;sortby=price</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [productpool]"><con:configuration><path>exists( //*:CategoryResponse/category/productpool)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=newarrival">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=newarrival" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&amp;device=PHONE&amp;assortment=SITE&amp;application=MEW&amp;country=US&amp;sortby=newarrival</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [productpool]"><con:configuration><path>exists( //*:CategoryResponse/category/productpool)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=bestseller">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=bestseller" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&amp;device=PHONE&amp;assortment=SITE&amp;application=MEW&amp;country=US&amp;sortby=bestseller</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [productpool]"><con:configuration><path>exists( //*:CategoryResponse/category/productpool)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=customerrating">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=customerrating" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&amp;device=PHONE&amp;assortment=SITE&amp;application=MEW&amp;country=US&amp;sortby=customerrating</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [productpool]"><con:configuration><path>exists( //*:CategoryResponse/category/productpool)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=original">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=original" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&amp;device=PHONE&amp;assortment=SITE&amp;application=MEW&amp;country=US&amp;sortby=original</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [productpool]"><con:configuration><path>exists( //*:CategoryResponse/category/productpool)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="currentpage=2" searchProperties="true" id="1f9530dd-b7b6-498c-a059-05da0f9c5f4b"><con:settings/><con:testStep type="httprequest" name="sortby=toppicks">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=toppicks" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=toppicks&currentpage=2]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=price">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=price" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=price&currentpage=2]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=newarrival">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=newarrival" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=newarrival&currentpage=2]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=bestseller">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=bestseller" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=bestseller&currentpage=2]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=customerrating">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=customerrating" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=customerrating&currentpage=2]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=original">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=original" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=original&currentpage=2]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="sortorder" searchProperties="true" id="eeaffc74-9282-422a-9676-9403570da41e"><con:settings/><con:testStep type="httprequest" name="sortby=toppicks">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=toppicks" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=toppicks&currentpage=2&sortorder=desc]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=price">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=price" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=price&currentpage=2&sortorder=desc]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=newarrival">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=newarrival" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=newarrival&currentpage=2&sortorder=desc]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=bestseller">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=bestseller" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=bestseller&currentpage=2&sortorder=desc]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=customerrating">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=customerrating" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=customerrating&currentpage=2&sortorder=desc]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=original">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=original" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=original&currentpage=2&sortorder=desc]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=toppicks&amp;sortorder=asc">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=toppicks&amp;sortorder=asc" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=toppicks&currentpage=2&sortorder=asc]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=price&amp;sortorder=asc">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=price&amp;sortorder=asc" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=price&currentpage=2&sortorder=asc]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=newarrival&amp;sortorder=asc">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=newarrival&amp;sortorder=asc" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=newarrival&currentpage=2&sortorder=asc]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=bestseller&amp;sortorder=asc">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=bestseller&amp;sortorder=asc" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=bestseller&currentpage=2&sortorder=asc]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=customerrating&amp;sortorder=asc">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=customerrating&amp;sortorder=asc" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=customerrating&currentpage=2&sortorder=asc]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="sortby=original&amp;sortorder=asc">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="sortby=original&amp;sortorder=asc" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint><![CDATA[${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool&device=PHONE&assortment=SITE&application=MEW&country=US&sortby=original&currentpage=2&sortorder=asc]]></con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="V3/catalog//browseproducts" searchProperties="true" id="34ea5193-0e17-4bb6-a211-305a08a1ef53"><con:settings/><con:testStep type="httprequest" name="V3/catalog//browseproducts">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="V3/catalog//browseproducts" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=productpool</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [productpool]"><con:configuration><path>exists( //*:CategoryResponse/category/productpool)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="V3/catalog//browseproducts?show=product,facet,productpool">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="V3/catalog//browseproducts?show=product,facet,productpool" id="9a7f0263-d705-4eaf-ba58-b7a1f4568bcc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientId}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerId}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#CatId_Chanel}/browseproducts?show=product,facet,productpool&amp;device=PC&amp;assortment=SITE&amp;application=SITE&amp;country=US</con:endpoint>
          <con:request/>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59385967-23dd-4bdf-9ca2-41738a4d8d10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@id]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#CatId_Chanel}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [brand]"><con:configuration><path>//*:CategoryResponse[1]/category[1]/summary[1]/brand[1]/text()</path><content>CHANEL</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [canvases]"><con:configuration><path>exists( //*:CategoryResponse/category/canvases)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [productpool]"><con:configuration><path>exists( //*:CategoryResponse/category/productpool)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="15F-B-10098-Context parameter 'country' with 3-letter and 4-letter values-GREEN"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v3//browseproducts-Get Product" searchProperties="true" id="d7f2bb4c-2b87-45d2-9cc9-b464cede20dd"><con:settings/><con:testStep type="httprequest" name="v3/catalog/category/&lt;>/browseproducts">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v3/catalog/category/&lt;>/browseproducts" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#Accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v3/catalog/category/${#Project#catId}/browseproducts?resultsperpage=50&amp;show=product</con:endpoint>
    <con:request/>
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
      <con:configuration><codes>200</codes></con:configuration>
    </con:assertion>
    
    
    
    
    
    
    <con:assertion type="GroovyScriptAssertion" name="Script-Set Prod with [promotionbadge]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def prodId = holder.getNodeValue( "//*:CategoryResponse/category/product/product[summary/iscollection='false']/@id" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "prodId", prodId)

//log.info prodId.toString()
assert prodId != null
</scriptText></con:configuration></con:assertion><con:credentials>
      <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
    </con:credentials>
    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
    <con:jmsPropertyConfig/>
    <con:parameters>
      <con:parameter>
        <con:name>x-macys-webservice-client-id</con:name>
        <con:value>${#Project#clientid}</con:value>
        <con:style>HEADER</con:style>
        <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
        <con:default>${#TestSuite#clientid}</con:default>
        <con:path xsi:nil="true"/>
        <con:description xsi:nil="true"/>
      </con:parameter>
      <con:parameter>
        <con:name>x-macys-customer-id</con:name>
        <con:value>${#Project#customerid}</con:value>
        <con:style>HEADER</con:style>
        <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
        <con:default>${#TestSuite#customerid}</con:default>
        <con:path xsi:nil="true"/>
        <con:description xsi:nil="true"/>
      </con:parameter>
    </con:parameters>
  </con:config>
</con:testStep><con:properties><con:property><con:name>Promo_Prod</con:name><con:value>700327</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>de0ca815-3502-4d30-a73a-d72138b8c6a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4/product" searchProperties="true" id="a33f114a-0c6b-491b-9065-103f5f6a8ee4"><con:settings/><con:testStep type="httprequest" name="v4/catalog/product/?country=US">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/product/?country=US" id="7c2d70c1-c882-48c1-95de-4006d5cbe219" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#prodId}(productdetails,upcs(upcdetails))?device=PHONE&amp;application=MOBILE&amp;assortment=SITE&amp;country=US</con:endpoint>
    <con:request/>
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9705a341-7c9f-4e83-9dc7-84d9dd1a9245">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion>
    <con:assertion type="XPath Match" name="Match content of [@id]" id="bc8defca-5707-4e56-b637-30e20f3069b7">
      <con:configuration><path>//productresponse[1]/product[1]/@id</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion>
    
    
    
    
      
      
      
      
      
      
      
      
      <con:assertion type="XPath Match" name="Check for existance of [summary]" id="c930ab7b-9d69-4647-bc51-312d8c16ca2b"><con:configuration><path>exists( //productresponse/product/productDetails/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badges]" id="8bf57699-4699-4c18-9449-9058fc71e0c5"><con:configuration><path>exists( //productresponse/product/productDetails/badges)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [shipping]" id="e3108f43-5816-4f5a-9951-730a7e3c8d20"><con:configuration><path>exists( //productresponse/product/productDetails/shipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [attributes]" id="a4b0c656-48fb-4fbd-a72d-bbcb9a19c2e7"><con:configuration><path>exists( //productresponse/product/productDetails/attributes)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [primaryImage]" id="836e4614-cd83-4d35-830d-7ff320d1b39b"><con:configuration><path>exists( //productresponse/product/productDetails/primaryImage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [corpclass]" id="48d5286c-4b96-414c-8abb-fa7a7cfe18ad"><con:configuration><path>exists( //productresponse/product/productDetails/corpclass)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [price]" id="09344a49-6009-4111-bf8b-105daff77108"><con:configuration><path>exists( //productresponse/product/productDetails/price)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [colorMap]" id="108056f9-7263-45b7-903f-3e34f6fc9f36"><con:configuration><path>exists( //productresponse/product/productDetails/colorMap)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [availability]" id="658f01b1-073c-4d07-96d2-1f345b4016c6"><con:configuration><path>exists( //productresponse/product/productDetails/availability)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [urlmetadata]" id="ab08af86-4cb2-42b8-9f4c-19fc3a2a79ee"><con:configuration><path>exists( //productresponse/product/productDetails/urlmetadata)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [upcs]"><con:configuration><path>exists( //productresponse/product/upcs)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [@upcnumber]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def upcnumber = holder.getNodeValue( "//productresponse[1]/product[1]/upcs[1]/@upcnumber" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "upcnumber", upcnumber)

assert upcnumber != null
</scriptText></con:configuration></con:assertion><con:credentials>
        <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
      </con:credentials>
      <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
      <con:jmsPropertyConfig/>
      <con:parameters>
        <con:parameter>
          <con:name>x-macys-webservice-client-id</con:name>
          <con:value>${#Project#clientid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#clientid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>x-macys-customer-id</con:name>
          <con:value>${#Project#customerid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#customerid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
    </con:config>
  </con:testStep><con:testStep type="httprequest" name="v4/catalog/product/?country=EUR">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/product/?country=EUR" id="7c2d70c1-c882-48c1-95de-4006d5cbe219" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#prodId}(productdetails,upcs(upcdetails))?device=PHONE&amp;application=MOBILE&amp;assortment=SITE&amp;country=EUR</con:endpoint>
    <con:request/>
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9705a341-7c9f-4e83-9dc7-84d9dd1a9245">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion>
    <con:assertion type="XPath Match" name="Match content of [@id]" id="bc8defca-5707-4e56-b637-30e20f3069b7">
      <con:configuration><path>//productresponse[1]/product[1]/@id</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion>
    
    
    
    
      
      
      
      
      
      
      
      
      <con:assertion type="XPath Match" name="Check for existance of [summary]" id="c930ab7b-9d69-4647-bc51-312d8c16ca2b"><con:configuration><path>exists( //productresponse/product/productDetails/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badges]" id="8bf57699-4699-4c18-9449-9058fc71e0c5"><con:configuration><path>exists( //productresponse/product/productDetails/badges)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [shipping]" id="e3108f43-5816-4f5a-9951-730a7e3c8d20"><con:configuration><path>exists( //productresponse/product/productDetails/shipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [attributes]" id="a4b0c656-48fb-4fbd-a72d-bbcb9a19c2e7"><con:configuration><path>exists( //productresponse/product/productDetails/attributes)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [primaryImage]" id="836e4614-cd83-4d35-830d-7ff320d1b39b"><con:configuration><path>exists( //productresponse/product/productDetails/primaryImage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [corpclass]" id="48d5286c-4b96-414c-8abb-fa7a7cfe18ad"><con:configuration><path>exists( //productresponse/product/productDetails/corpclass)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [price]" id="09344a49-6009-4111-bf8b-105daff77108"><con:configuration><path>exists( //productresponse/product/productDetails/price)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [colorMap]" id="108056f9-7263-45b7-903f-3e34f6fc9f36"><con:configuration><path>exists( //productresponse/product/productDetails/colorMap)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [availability]" id="658f01b1-073c-4d07-96d2-1f345b4016c6"><con:configuration><path>exists( //productresponse/product/productDetails/availability)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [urlmetadata]" id="ab08af86-4cb2-42b8-9f4c-19fc3a2a79ee"><con:configuration><path>exists( //productresponse/product/productDetails/urlmetadata)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [upcs]"><con:configuration><path>exists( //productresponse/product/upcs)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
        <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
      </con:credentials>
      <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
      <con:jmsPropertyConfig/>
      <con:parameters>
        <con:parameter>
          <con:name>x-macys-webservice-client-id</con:name>
          <con:value>${#Project#clientid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#clientid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>x-macys-customer-id</con:name>
          <con:value>${#Project#customerid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#customerid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
    </con:config>
  </con:testStep><con:testStep type="httprequest" name="v4/catalog/product/?country=INTL">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/product/?country=INTL" id="7c2d70c1-c882-48c1-95de-4006d5cbe219" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v4/catalog/product/${#TestSuite#prodId}(productdetails,upcs(upcdetails))?device=PHONE&amp;application=MOBILE&amp;assortment=SITE&amp;country=INTL</con:endpoint>
    <con:request/>
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9705a341-7c9f-4e83-9dc7-84d9dd1a9245">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion>
    <con:assertion type="XPath Match" name="Match content of [@id]" id="bc8defca-5707-4e56-b637-30e20f3069b7">
      <con:configuration><path>//productresponse[1]/product[1]/@id</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion>
    
    
    
    
      
      
      
      
      
      
      
      
      <con:assertion type="XPath Match" name="Check for existance of [summary]" id="c930ab7b-9d69-4647-bc51-312d8c16ca2b"><con:configuration><path>exists( //productresponse/product/productDetails/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badges]" id="8bf57699-4699-4c18-9449-9058fc71e0c5"><con:configuration><path>exists( //productresponse/product/productDetails/badges)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [shipping]" id="e3108f43-5816-4f5a-9951-730a7e3c8d20"><con:configuration><path>exists( //productresponse/product/productDetails/shipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [attributes]" id="a4b0c656-48fb-4fbd-a72d-bbcb9a19c2e7"><con:configuration><path>exists( //productresponse/product/productDetails/attributes)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [primaryImage]" id="836e4614-cd83-4d35-830d-7ff320d1b39b"><con:configuration><path>exists( //productresponse/product/productDetails/primaryImage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [corpclass]" id="48d5286c-4b96-414c-8abb-fa7a7cfe18ad"><con:configuration><path>exists( //productresponse/product/productDetails/corpclass)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [price]" id="09344a49-6009-4111-bf8b-105daff77108"><con:configuration><path>exists( //productresponse/product/productDetails/price)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [colorMap]" id="108056f9-7263-45b7-903f-3e34f6fc9f36"><con:configuration><path>exists( //productresponse/product/productDetails/colorMap)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [availability]" id="658f01b1-073c-4d07-96d2-1f345b4016c6"><con:configuration><path>exists( //productresponse/product/productDetails/availability)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [urlmetadata]" id="ab08af86-4cb2-42b8-9f4c-19fc3a2a79ee"><con:configuration><path>exists( //productresponse/product/productDetails/urlmetadata)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [upcs]"><con:configuration><path>exists( //productresponse/product/upcs)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
        <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
      </con:credentials>
      <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
      <con:jmsPropertyConfig/>
      <con:parameters>
        <con:parameter>
          <con:name>x-macys-webservice-client-id</con:name>
          <con:value>${#Project#clientid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#clientid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>x-macys-customer-id</con:name>
          <con:value>${#Project#customerid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#customerid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
    </con:config>
  </con:testStep><con:properties><con:property><con:name>Promo_Prod</con:name><con:value>700327</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>de0ca815-3502-4d30-a73a-d72138b8c6a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v4/product/upc" searchProperties="true" id="3b0cb9eb-73f0-4358-8e3d-3cc0532ac735"><con:settings/><con:testStep type="httprequest" name="v4/catalog/product/upc/?country=US">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/product/upc/?country=US" id="7c2d70c1-c882-48c1-95de-4006d5cbe219" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v4/catalog/product/upc/${#TestSuite#upcnumber}(productdetails,upcs(upcdetails))?device=PHONE&amp;application=MOBILE&amp;assortment=SITE&amp;country=US</con:endpoint>
    <con:request/>
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9705a341-7c9f-4e83-9dc7-84d9dd1a9245">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion>
    <con:assertion type="XPath Match" name="Match content of [@id]" id="bc8defca-5707-4e56-b637-30e20f3069b7">
      <con:configuration><path>//productresponse[1]/product[1]/@id</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion>
    
    
    
    
      
      
      
      
      
      
      
      
      <con:assertion type="XPath Match" name="Check for existance of [summary]" id="c930ab7b-9d69-4647-bc51-312d8c16ca2b"><con:configuration><path>exists( //productresponse/product/productDetails/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badges]" id="8bf57699-4699-4c18-9449-9058fc71e0c5"><con:configuration><path>exists( //productresponse/product/productDetails/badges)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [shipping]" id="e3108f43-5816-4f5a-9951-730a7e3c8d20"><con:configuration><path>exists( //productresponse/product/productDetails/shipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [attributes]" id="a4b0c656-48fb-4fbd-a72d-bbcb9a19c2e7"><con:configuration><path>exists( //productresponse/product/productDetails/attributes)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [primaryImage]" id="836e4614-cd83-4d35-830d-7ff320d1b39b"><con:configuration><path>exists( //productresponse/product/productDetails/primaryImage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [corpclass]" id="48d5286c-4b96-414c-8abb-fa7a7cfe18ad"><con:configuration><path>exists( //productresponse/product/productDetails/corpclass)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [price]" id="09344a49-6009-4111-bf8b-105daff77108"><con:configuration><path>exists( //productresponse/product/productDetails/price)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [colorMap]" id="108056f9-7263-45b7-903f-3e34f6fc9f36"><con:configuration><path>exists( //productresponse/product/productDetails/colorMap)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [availability]" id="658f01b1-073c-4d07-96d2-1f345b4016c6"><con:configuration><path>exists( //productresponse/product/productDetails/availability)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [urlmetadata]" id="ab08af86-4cb2-42b8-9f4c-19fc3a2a79ee"><con:configuration><path>exists( //productresponse/product/productDetails/urlmetadata)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [upcs]"><con:configuration><path>exists( //productresponse/product/upcs)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
        <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
      </con:credentials>
      <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
      <con:jmsPropertyConfig/>
      <con:parameters>
        <con:parameter>
          <con:name>x-macys-webservice-client-id</con:name>
          <con:value>${#Project#clientid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#clientid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>x-macys-customer-id</con:name>
          <con:value>${#Project#customerid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#customerid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
    </con:config>
  </con:testStep><con:testStep type="httprequest" name="v4/catalog/product/upc?country=EUR">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/product/upc?country=EUR" id="7c2d70c1-c882-48c1-95de-4006d5cbe219" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v4/catalog/product/upc/${#TestSuite#upcnumber}(productdetails,upcs(upcdetails))?device=PHONE&amp;application=MOBILE&amp;assortment=SITE&amp;country=EUR</con:endpoint>
    <con:request/>
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9705a341-7c9f-4e83-9dc7-84d9dd1a9245">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion>
    <con:assertion type="XPath Match" name="Match content of [@id]" id="bc8defca-5707-4e56-b637-30e20f3069b7">
      <con:configuration><path>//productresponse[1]/product[1]/@id</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion>
    
    
    
    
      
      
      
      
      
      
      
      
      <con:assertion type="XPath Match" name="Check for existance of [summary]" id="c930ab7b-9d69-4647-bc51-312d8c16ca2b"><con:configuration><path>exists( //productresponse/product/productDetails/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badges]" id="8bf57699-4699-4c18-9449-9058fc71e0c5"><con:configuration><path>exists( //productresponse/product/productDetails/badges)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [shipping]" id="e3108f43-5816-4f5a-9951-730a7e3c8d20"><con:configuration><path>exists( //productresponse/product/productDetails/shipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [attributes]" id="a4b0c656-48fb-4fbd-a72d-bbcb9a19c2e7"><con:configuration><path>exists( //productresponse/product/productDetails/attributes)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [primaryImage]" id="836e4614-cd83-4d35-830d-7ff320d1b39b"><con:configuration><path>exists( //productresponse/product/productDetails/primaryImage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [corpclass]" id="48d5286c-4b96-414c-8abb-fa7a7cfe18ad"><con:configuration><path>exists( //productresponse/product/productDetails/corpclass)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [price]" id="09344a49-6009-4111-bf8b-105daff77108"><con:configuration><path>exists( //productresponse/product/productDetails/price)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [colorMap]" id="108056f9-7263-45b7-903f-3e34f6fc9f36"><con:configuration><path>exists( //productresponse/product/productDetails/colorMap)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [availability]" id="658f01b1-073c-4d07-96d2-1f345b4016c6"><con:configuration><path>exists( //productresponse/product/productDetails/availability)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [urlmetadata]" id="ab08af86-4cb2-42b8-9f4c-19fc3a2a79ee"><con:configuration><path>exists( //productresponse/product/productDetails/urlmetadata)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [upcs]"><con:configuration><path>exists( //productresponse/product/upcs)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
        <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
      </con:credentials>
      <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
      <con:jmsPropertyConfig/>
      <con:parameters>
        <con:parameter>
          <con:name>x-macys-webservice-client-id</con:name>
          <con:value>${#Project#clientid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#clientid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>x-macys-customer-id</con:name>
          <con:value>${#Project#customerid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#customerid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
    </con:config>
  </con:testStep><con:testStep type="httprequest" name="v4/catalog/product/upc?country=INTL">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v4/catalog/product/upc?country=INTL" id="7c2d70c1-c882-48c1-95de-4006d5cbe219" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v4/catalog/product/upc/${#TestSuite#upcnumber}(productdetails,upcs(upcdetails))?device=PHONE&amp;application=MOBILE&amp;assortment=SITE&amp;country=INTL</con:endpoint>
    <con:request/>
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9705a341-7c9f-4e83-9dc7-84d9dd1a9245">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion>
    <con:assertion type="XPath Match" name="Match content of [@id]" id="bc8defca-5707-4e56-b637-30e20f3069b7">
      <con:configuration><path>//productresponse[1]/product[1]/@id</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion>
    
    
    
    
      
      
      
      
      
      
      
      
      <con:assertion type="XPath Match" name="Check for existance of [summary]" id="c930ab7b-9d69-4647-bc51-312d8c16ca2b"><con:configuration><path>exists( //productresponse/product/productDetails/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badges]" id="8bf57699-4699-4c18-9449-9058fc71e0c5"><con:configuration><path>exists( //productresponse/product/productDetails/badges)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [shipping]" id="e3108f43-5816-4f5a-9951-730a7e3c8d20"><con:configuration><path>exists( //productresponse/product/productDetails/shipping)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [attributes]" id="a4b0c656-48fb-4fbd-a72d-bbcb9a19c2e7"><con:configuration><path>exists( //productresponse/product/productDetails/attributes)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [primaryImage]" id="836e4614-cd83-4d35-830d-7ff320d1b39b"><con:configuration><path>exists( //productresponse/product/productDetails/primaryImage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [corpclass]" id="48d5286c-4b96-414c-8abb-fa7a7cfe18ad"><con:configuration><path>exists( //productresponse/product/productDetails/corpclass)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [price]" id="09344a49-6009-4111-bf8b-105daff77108"><con:configuration><path>exists( //productresponse/product/productDetails/price)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [colorMap]" id="108056f9-7263-45b7-903f-3e34f6fc9f36"><con:configuration><path>exists( //productresponse/product/productDetails/colorMap)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [availability]" id="658f01b1-073c-4d07-96d2-1f345b4016c6"><con:configuration><path>exists( //productresponse/product/productDetails/availability)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [urlmetadata]" id="ab08af86-4cb2-42b8-9f4c-19fc3a2a79ee"><con:configuration><path>exists( //productresponse/product/productDetails/urlmetadata)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [upcs]"><con:configuration><path>exists( //productresponse/product/upcs)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
        <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
      </con:credentials>
      <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
      <con:jmsPropertyConfig/>
      <con:parameters>
        <con:parameter>
          <con:name>x-macys-webservice-client-id</con:name>
          <con:value>${#Project#clientid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#clientid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>x-macys-customer-id</con:name>
          <con:value>${#Project#customerid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#customerid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
    </con:config>
  </con:testStep><con:properties><con:property><con:name>Promo_Prod</con:name><con:value>700327</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>de0ca815-3502-4d30-a73a-d72138b8c6a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v3/product" searchProperties="true" id="bf0593a8-d47c-4df9-8cf3-6908db2e439c"><con:settings/><con:testStep type="httprequest" name="v3/catalog/product/?country=US">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v3/catalog/product/?country=US" id="7c2d70c1-c882-48c1-95de-4006d5cbe219" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v3/catalog/product/${#TestSuite#prodId}?device=PHONE&amp;application=MOBILE&amp;assortment=SITE&amp;country=US</con:endpoint>
    <con:request/>
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9705a341-7c9f-4e83-9dc7-84d9dd1a9245">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion>
    <con:assertion type="XPath Match" name="Match content of [@id]" id="bc8defca-5707-4e56-b637-30e20f3069b7">
      <con:configuration><path>//productresponse[1]/product[1]/@id</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion>
    
    
    
    
      
      
      
      
      
      
      
      
      <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:credentials>
        <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
      </con:credentials>
      <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
      <con:jmsPropertyConfig/>
      <con:parameters>
        <con:parameter>
          <con:name>x-macys-webservice-client-id</con:name>
          <con:value>${#Project#clientid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#clientid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>x-macys-customer-id</con:name>
          <con:value>${#Project#customerid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#customerid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
    </con:config>
  </con:testStep><con:testStep type="httprequest" name="v3/catalog/product/?country=EUR">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v3/catalog/product/?country=EUR" id="7c2d70c1-c882-48c1-95de-4006d5cbe219" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v3/catalog/product/${#TestSuite#prodId}?device=PHONE&amp;application=MOBILE&amp;assortment=SITE&amp;country=EUR</con:endpoint>
    <con:request/>
    
    
    
    
    
    
      
      
      
      
      
      
      
      
      <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Match content of [@id]">
      <con:configuration><path>//productresponse[1]/product[1]/@id</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:credentials>
        <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
      </con:credentials>
      <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
      <con:jmsPropertyConfig/>
      <con:parameters>
        <con:parameter>
          <con:name>x-macys-webservice-client-id</con:name>
          <con:value>${#Project#clientid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#clientid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>x-macys-customer-id</con:name>
          <con:value>${#Project#customerid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#customerid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
    </con:config>
  </con:testStep><con:testStep type="httprequest" name="v3/catalog/product/?country=INTL">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v3/catalog/product/?country=INTL" id="7c2d70c1-c882-48c1-95de-4006d5cbe219" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v3/catalog/product/${#TestSuite#prodId}?device=PHONE&amp;application=MOBILE&amp;assortment=SITE&amp;country=INTL</con:endpoint>
    <con:request/>
    
    
    
    
    
    
      
      
      
      
      
      
      
      
      <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Match content of [@id]">
      <con:configuration><path>//productresponse[1]/product[1]/@id</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:credentials>
        <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
      </con:credentials>
      <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
      <con:jmsPropertyConfig/>
      <con:parameters>
        <con:parameter>
          <con:name>x-macys-webservice-client-id</con:name>
          <con:value>${#Project#clientid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#clientid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>x-macys-customer-id</con:name>
          <con:value>${#Project#customerid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#customerid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
    </con:config>
  </con:testStep><con:properties><con:property><con:name>Promo_Prod</con:name><con:value>700327</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>de0ca815-3502-4d30-a73a-d72138b8c6a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="v3/product?upc" searchProperties="true" id="22c42f1d-20be-436b-a1b5-e0f15d8c6ff1"><con:settings/><con:testStep type="httprequest" name="v3/catalog/product/?country=US">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v3/catalog/product/?country=US" id="7c2d70c1-c882-48c1-95de-4006d5cbe219" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v3/catalog/product?upc=${#TestSuite#upcnumber}&amp;device=PHONE&amp;application=MOBILE&amp;assortment=SITE&amp;country=US</con:endpoint>
    <con:request/>
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9705a341-7c9f-4e83-9dc7-84d9dd1a9245">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion>
    <con:assertion type="XPath Match" name="Match content of [@id]" id="bc8defca-5707-4e56-b637-30e20f3069b7">
      <con:configuration><path>//productresponse[1]/product[1]/@id</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion>
    
    
    
    
      
      
      
      
      
      
      
      
      <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:credentials>
        <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
      </con:credentials>
      <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
      <con:jmsPropertyConfig/>
      <con:parameters>
        <con:parameter>
          <con:name>x-macys-webservice-client-id</con:name>
          <con:value>${#Project#clientid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#clientid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>x-macys-customer-id</con:name>
          <con:value>${#Project#customerid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#customerid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
    </con:config>
  </con:testStep><con:testStep type="httprequest" name="v3/catalog/product/?country=EUR">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v3/catalog/product/?country=EUR" id="7c2d70c1-c882-48c1-95de-4006d5cbe219" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v3/catalog/product?upc=${#TestSuite#upcnumber}&amp;device=PHONE&amp;application=MOBILE&amp;assortment=SITE&amp;country=EUR</con:endpoint>
    <con:request/>
    
    
    
    
    
    
      
      
      
      
      
      
      
      
      <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Match content of [@id]">
      <con:configuration><path>//productresponse[1]/product[1]/@id</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:credentials>
        <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
      </con:credentials>
      <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
      <con:jmsPropertyConfig/>
      <con:parameters>
        <con:parameter>
          <con:name>x-macys-webservice-client-id</con:name>
          <con:value>${#Project#clientid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#clientid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>x-macys-customer-id</con:name>
          <con:value>${#Project#customerid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#customerid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
    </con:config>
  </con:testStep><con:testStep type="httprequest" name="v3/catalog/product/?country=INTL">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="v3/catalog/product/?country=INTL" id="7c2d70c1-c882-48c1-95de-4006d5cbe219" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#Project#accept}" xmlns="http://eviware.com/soapui/config"/></con:setting>
    </con:settings>
    <con:endpoint>${#Project#endpoint}/v3/catalog/product?upc=${#TestSuite#upcnumber}&amp;device=PHONE&amp;application=MOBILE&amp;assortment=SITE&amp;country=INTL</con:endpoint>
    <con:request/>
    
    
    
    
    
    
      
      
      
      
      
      
      
      
      <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Match content of [@id]">
      <con:configuration><path>//productresponse[1]/product[1]/@id</path><content>${#TestSuite#prodId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:credentials>
        <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
      </con:credentials>
      <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
      <con:jmsPropertyConfig/>
      <con:parameters>
        <con:parameter>
          <con:name>x-macys-webservice-client-id</con:name>
          <con:value>${#Project#clientid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#clientid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>x-macys-customer-id</con:name>
          <con:value>${#Project#customerid}</con:value>
          <con:style>HEADER</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#Project#customerid}</con:default>
          <con:path xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
    </con:config>
  </con:testStep><con:properties><con:property><con:name>Promo_Prod</con:name><con:value>700327</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>de0ca815-3502-4d30-a73a-d72138b8c6a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>prodId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1403264</con:value></con:property><con:property><con:name>upcnumber</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">888374228578</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="VGC New Checkout"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="POST-v3/order/vgc" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d34fec2a-eec5-458e-baf3-0e21a15c36f8"><con:settings/><con:testStep type="datagen" name="Random TransactionId"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def transactionId = new java.util.Random().nextInt(99999999).toString()
testRunner.testCase.testSuite.setPropertyValue( "transactionId", transactionId)
</script></con:configuration><con:name>Random TransctionId</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="httprequest" name="without giftMessage"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="without giftMessage" postQueryString="false" mediaType="application/json" id="e5aeae1f-ed82-456c-bbdd-643758ec1159" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="x-macys-customer-id" value="${#Project#customerid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#endPoint}/v3/order/vgc</con:endpoint><con:request>{
    "transactionId": "${#TestSuite#transactionId}",
    "orderInfo": {
        "customerEmail": "customer@macys.com",
        "upcNumber": "${#Project#vgc_upc}",
        "giftAmount": "1000",
        "giftTo": "WSSG",
        "giftFrom": "QE"
    },
    "payment": {
        "creditCard": {
            "cardNumber": ${#TestSuite#cc_num},
            "typeCode": "${#TestSuite#cc_type}",
            "expirationMonth": ${#TestSuite#expirationMonth},
            "expirationYear": ${#TestSuite#expirationYear},
            "verificationNumber": ${#TestSuite#cc_ver_num}
        },
        "billingAddress": {
            "firstName": "Raam",
            "middleName": "Ghani",
            "lastName": "Mand",
            "phoneNumber": "5107938397",
            "emailAddress": "testuser@macys.com",
            "addressDetails": {
                "addressLine1": "685 market st",
                "city": "San Francisco",
                "stateCode": "CA",
                "countryCode": "USA",
                "postalCode": "94103"
            }
        }
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="8c12fb16-e082-472e-a0f8-f869e1986bb1"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [paymentStatus]" id="d4198d79-e8f0-4e97-9a02-1929aa55dc6d"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/paymentStatus[1]" )

assert node.equals("ACCEPTED")||node.equals("REJECTED")
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [orderStatus]" id="8d07acc4-64e9-4d17-9f8c-48a574c6b953"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/orderStatus[1]" )
String[] status=['BPEND','RCMPL','RPEND','BCMPL']
assert Arrays.asList(status).contains(node)
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [taxes]" id="160131cb-edae-4bd7-9c6d-f914b905c0fd"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/taxes[1]" )

assert Float.parseFloat(node)>=0.0&amp;&amp;Float.parseFloat(node)&lt;=1000.0
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [amountCharged]" id="aec80741-76cc-4081-bd21-c0dc44bd7a9c"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/amountCharged[1]" )
assert Float.parseFloat(node)>=5.0&amp;&amp;Float.parseFloat(node)&lt;=2000.0
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [reservationId]" id="f5242b0c-444b-4821-a87c-8534e4a26a32"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/reservationId[1]" )
assert node.isNumber()&amp;&amp;node.length()&lt;=30
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [orderNumber]" id="81405278-7d2d-4a8c-9375-40bae349fcab"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/orderNumber[1]" )
assert node.isNumber()&amp;&amp;node.length()&lt;=30
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [transactionId]" id="a6de14bc-211b-43ed-a0b7-571fa4f25409"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/transactionId[1]" )

assert node != null
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>0592ea83-f3a6-4715-a90d-61a7d166ee99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ca001328-af0b-4457-9da3-d4605754fd23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b9a50980-37bd-4b38-9b79-6bb20fb06fc6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>936209ae-52d8-4a89-ad21-1e5c1dac441f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fff53ffa-2e8c-4714-bdf9-1d507bf2e1b3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>transactionId</con:name><con:value>32008563</con:value></con:property><con:property><con:name>cc_num</con:name><con:value>5555555555554444</con:value></con:property><con:property><con:name>cc_type</con:name><con:value>M</con:value></con:property><con:property><con:name>expirationMonth</con:name><con:value>6</con:value></con:property><con:property><con:name>expirationYear</con:name><con:value>2020</con:value></con:property><con:property><con:name>cc_ver_num</con:name><con:value>555</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Billing">
  <con:settings/>
  <con:runType>SEQUENTIAL</con:runType>
  <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="true" maxResults="0" name="Add Stripe Card" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5b374137-db78-494f-9b9d-3d75f04db5db">
    <con:settings>
      <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
      <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      <con:setting id="IncludeOverview">true</con:setting>
      <con:setting id="IncludeResults">true</con:setting>
      <con:setting id="FlowLayout">true</con:setting>
      <con:setting id="ErrorDetails">true</con:setting>
      <con:setting id="IncludeCoverage">true</con:setting>
      <con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting>
      <con:setting id="GeneratableJUnitReport@Folder">C:\Users\tijo.thomas\Desktop</con:setting>
    </con:settings>
    <con:testStep type="datagen" name="RandomEmailGenerator">
      <con:settings/>
      <con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:property type="Script">
          <con:configuration><script>def sdf = new java.text.SimpleDateFormat("ddhhmmss")
					def useremail =  "user"+sdf.format( new Date())+"@user.com"
					def usernewemail =  "new"+sdf.format( new Date())+"@user.com"
					def regEmail =  "user"+sdf.format( new Date())+"@reg.com"
					def coregEmail =  "user"+sdf.format( new Date())+"@coreg.com"					

					def coregFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(5)
					def coregLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
					def regFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(7)
					def regLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(8)
					
					testRunner.testCase.testSuite.setPropertyValue( "emailId", useremail )
					testRunner.testCase.testSuite.setPropertyValue( "usernewemail", usernewemail )
					testRunner.testCase.testSuite.setPropertyValue( "regEmail", regEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregEmail", coregEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregFirstname", coregFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "coregLastname", coregLastname )
					testRunner.testCase.testSuite.setPropertyValue( "regFirstname", regFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "regLastname", regLastname )
					return email 
			</script></con:configuration>
          <con:name>emailAddress</con:name>
          <con:mode>STEP</con:mode>
          <con:shared>true</con:shared>
        </con:property>
      </con:config>
    </con:testStep>
    
      
      
      
      
      <con:testStep type="httprequest" name="Create user JSON">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="Create user JSON" postQueryString="false" mediaType="application/json" id="9f0b2445-5350-4ec5-93f5-176aaac8b40b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user</con:endpoint>
          <con:request>{
    "firstname": "Wssg",
    "lastname": "Tester",
    "address1": "685MarketSt",
    "address22": "Suite800",
    "gender": "M",
    "city": "SanFrancisco",
    "state": "CA",
    "zipcode": "94105",
    "countrycode": "USA",
    "emailaddress": "${#TestSuite#emailId}",
    "verifyemailaddress": "${#TestSuite#emailId}",
    "password": "${#Project#password}",
    "verifypassword": "${#Project#password}",
    "birthdateday": "31",
    "birthdatemonth": "05",
    "birthdateyear": "1976",
    "subscription": "N",
    "textoption": "false",
    "bestphone": "8005551212",
    "mobilephone": "8005551212",
    "passwordHintQuestion": "1",
    "passwordHintAnswer": "123",
    "shippingAddress": {
        "shippingAddressFirstName": "J",
        "shippingAddressLastName": "L",
        "shippingAddress1": "456MarketSt",
        "shippingAddressZipCode": "94106",
        "shippingAddressBestPhone": "8002896223",
        "shippingAddressCity": "York",
        "shippingAddressState": "AZ"
    },
    "userPreferredStoreId": "${#Project#preferredStoreId}"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3f7f4ae2-00d2-4fc0-bd7e-a0db64cba89e">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a1eb047c-19ee-4e40-ab73-880ab81bd72b">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def userId=holder.getNodeValue("//response/userId");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "userId", userId.toString() )


//log.info userId.toString()</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      
      
      <con:testStep type="httprequest" name="GET v2/oauth2/token/userDetails">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v2/oauth2/token/userDetails" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d6130e4a-803b-4834-958c-a7b217358e10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/userDetails?application=Mobile</con:endpoint>
          <con:request>grant_type=password&amp;username=${#TestSuite#emailId}&amp;password=${#Project#password}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="986f5588-983f-438c-9271-ed82fe789c8f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="4a818b8a-e33e-42f6-8bf9-de3b596cd2e2">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def access_token=holder.getNodeValue("//response/access_token");
def refresh_token=holder.getNodeValue("//response/refresh_token");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "refresh_token", refresh_token.toString() )</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api oauth v2/user?show=">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api oauth v2/user?show=" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=summary,shipping,billing,store</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration><codes>200</codes></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="POST api v2/user/billing">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="POST api v2/user/billing" postQueryString="false" mediaType="application/json" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user/billing</con:endpoint>
          <con:request>{
  "usernewbilling": {
    "creditcard": {
      "cardtype": "M",
      "isprimary": "false",
      "verificationnumber": "5555",
      "cardnumber": "5555555555554444",
      "expirationmonth": "11",
      "expirationyear": "2015"
    },
    "billingaddress": {
      "firstname": "Firstname",
      "middlename": "Middlename",
      "lastname": "Lastname",
      "areacode": "123",
      "exchange": "456",
      "numberext": "7890",
      "emailaddress": "tester@aspire.com",
      "verifyemailaddress": "tester@aspire.com",
      "attention": "bllingattention465#testinnumbe",
      "address": "#123address",
      "address1": "685MarketSt",
      "city": "San Francisco",
      "state": "CA",
      "zipcode": "94105"
    }
  }
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [cardid]"><con:configuration><path>exists( //response/billingMapper/creditcarddetails/cardid)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [cardid]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def cardid = holder.getNodeValue( "//response/billingMapper/creditcarddetails/cardid" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "cardid", cardid )

assert cardid != null
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [billingAddress]"><con:configuration><path>exists( //response/billingMapper/billingAddress)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api v2/user?show=billing">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api v2/user?show=billing" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [cardid]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/cardid[1]/text()</path><content>${#TestSuite#cardid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="PUT api v2/user/billing"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" name="PUT api v2/user/billing" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#apiendPoint}/v2/user/billing</con:endpoint><con:request>{
    "userbilling": {
        "creditcard": {
            "cardid": "${#TestSuite#cardid}",
            "cardtype": "${#TestSuite#cardtype_B}",
            "isprimary": "${#TestSuite#u_isprimary}",
            "cardnumber": "${#TestSuite#b_cardnumber1}",
            "expirationmonth": "${#TestSuite#u_expmonth}",
            "expirationyear": "${#TestSuite#u_expyear}"
        },
        "billingaddress": {
            "firstname": "${#TestSuite#u_fname}",
            "middlename": "${#TestSuite#u_mname}",
            "lastname": "${#TestSuite#u_lname}",
            "areacode": "${#TestSuite#u_areacode}",
            "exchange": "${#TestSuite#u_exchange}",
            "numberext": "${#TestSuite#u_numberext}",
            "emailaddress": "${#TestSuite#u_emailaddress}",
            "verifyemailaddress": "${#TestSuite#u_emailaddress}",
            "attention": "${#TestSuite#u_attention}",
            "address": "${#TestSuite#u_address}",
            "address1": "${#TestSuite#u_address1}",
            "city": "${#TestSuite#u_city}",
            "state": "${#TestSuite#u_state}",
            "zipcode": "${#TestSuite#u_zipcode}"
        }
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [cardid]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/cardid[1]/text()</path><content>${#TestSuite#cardid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [cardtype]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/cardtype[1]/text()</path><content>${#TestSuite#cardtype_B}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [isprimary]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/isprimary[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [cardnumber]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/billingMapper[1]/creditcarddetails[1]/cardnumber[1]" )
def cardnum=context.expand('${#TestSuite#b_cardnumber1}')
assert node.endsWith(cardnum.substring(cardnum.length()-4))
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [expirationmonth]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/billingMapper[1]/creditcarddetails[1]/expirationmonth[1]" )

assert node.equals(Integer.parseInt(context.expand('${#TestSuite#u_expmonth}')).toString())
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expirationyear]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/expirationyear[1]/text()</path><content>${#TestSuite#u_expyear}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstname]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/firstname[1]/text()</path><content>${#TestSuite#u_fname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [middlename]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/middlename[1]/text()</path><content>${#TestSuite#u_mname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastname]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/lastname[1]/text()</path><content>${#TestSuite#u_lname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [phone]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/phone[1]/text()</path><content>${#TestSuite#u_areacode}-${#TestSuite#u_exchange}-${#TestSuite#u_numberext}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="oti/cards/3287-->Match content of [emailaddress]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/emailaddress[1]/text()</path><content>${#TestSuite#u_emailaddress}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [attention]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/attention[1]/text()</path><content>${#TestSuite#u_attention}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [address]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/address[1]/text()</path><content>${#TestSuite#u_address}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [address1]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/address1[1]/text()</path><content>${#TestSuite#u_address1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [attention]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/attention[1]/text()</path><content>${#TestSuite#u_attention}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [city]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/city[1]/text()</path><content>${#TestSuite#u_city}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [state]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/state[1]/text()</path><content>${#TestSuite#u_state}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [zipcode]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/zipcode[1]/text()</path><content>${#TestSuite#u_zipcode}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="GET api v2/user?show=billing Updated"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET api v2/user?show=billing Updated" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#apiendPoint}/v2/user?show=billing</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionInfo]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscribed]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo/subscribed)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionId]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo/subscriptionId)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionName]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo/subscriptionName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [active]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo/active)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [billingMapper]"><con:configuration><path>exists( //response/billingMapper)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [creditcarddetails]"><con:configuration><path>exists( //response/billingMapper/creditcarddetails)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [billingAddress]"><con:configuration><path>exists( //response/billingMapper/billingAddress)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [cardid]"><con:configuration><path>exists( //response/billingMapper/creditcarddetails/cardid)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [cardtype]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/cardtype[1]/text()</path><content>${#TestSuite#cardtype_B}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [isprimary]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/isprimary[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expirationmonth]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/expirationmonth[1]/text()</path><content>${#TestSuite#u_expmonth}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expirationyear]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/expirationyear[1]/text()</path><content>${#TestSuite#u_expyear}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstname]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/firstname[1]/text()</path><content>${#TestSuite#u_fname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [middlename]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/middlename[1]/text()</path><content>${#TestSuite#u_mname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastname]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/lastname[1]/text()</path><content>${#TestSuite#u_lname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert Content [phone]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/billingMapper[1]/billingAddress[1]/phone[1]" )
actualPhoneNumber = node.toString()

areacode = context.expand('${#TestSuite#u_areacode}')
exchange = context.expand('${#TestSuite#u_exchange}')
numberext = context.expand('${#TestSuite#u_numberext}')

expectedPhoneNumber = areacode + '-' + exchange + '-' + numberext

assert actualPhoneNumber == expectedPhoneNumber
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [emailaddress]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/emailaddress[1]/text()</path><content>${#TestSuite#u_emailaddress}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [address]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/address[1]/text()</path><content>${#TestSuite#u_address}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [address1]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/address1[1]/text()</path><content>${#TestSuite#u_address1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [attention]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/attention[1]/text()</path><content>${#TestSuite#u_attention}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [city]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/city[1]/text()</path><content>${#TestSuite#u_city}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [state]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/state[1]/text()</path><content>${#TestSuite#u_state}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [zipcode]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/zipcode[1]/text()</path><content>${#TestSuite#u_zipcode}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check count of [billingMapper]"><con:configuration><path>count( //response/billingMapper)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST api v2/user/billing/delete">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="POST api v2/user/billing/delete" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user/billing/delete?cardid=${#TestSuite#cardid}&amp;userID=${#TestSuite#userId}</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/success[1]/text()</path><content>Credit Card Removed Successfully</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api v2/user?show=billing 1">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api v2/user?show=billing 1" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [billingMapper]"><con:configuration><path>exists( //response/billingMapper)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>itemFound_flag</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>productId</con:name>
          <con:value>28882</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>0592ea83-f3a6-4715-a90d-61a7d166ee99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>9ffeff1c-93b3-4911-802f-7b3249befd99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0b3fa046-21fa-4659-88e8-b6c33f1cf804</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>4f5c7e3c-135f-4654-93c5-d190df1852a8</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f8c76a06-37f8-4430-aeb2-95dae3164a6f</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>6872eaa4-73e8-4f42-b546-bc576a1e8b72</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>c136b370-6432-414a-8fa5-58bd2e0bbe82</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>92ec6ffc-03d0-480a-b2ca-46d275a19e41</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f0059ac9-6192-4a1e-b7fc-a1e05a6f09b5</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>bbc35938-5b71-4610-ba04-3544735df16b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>93bd8caa-2b6a-45c1-a4da-99dd6ec3d88e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e04cf0d4-2f9f-40eb-b6a6-92f97540b861</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>da4ec907-3bbe-43da-a488-fa36cab4313b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b9cfe94f-350f-4aec-a0d4-c1ef63289c4b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3ac7cb55-c0a9-4fb5-a7ad-c7aeb199a019</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>03474a32-c822-4545-b562-2b96e0134fea</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>505ee185-4d82-4c4a-a7d6-a41dd9c1d6f0</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>909feb60-d9f4-48c2-b9b4-539eb072ad17</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a7d3655f-5895-4bdd-9509-ae876f731273</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>88c4bfb7-99b8-4b0a-9f17-0b98a961a714</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a9b09540-cda6-4a4b-b13e-c7f52370eda2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>42f5b219-5485-468c-8e76-2a419789cd8a</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3245cf88-02bc-420d-8cda-9842d008c2cc</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3a329d8f-0c5b-4a5d-b19d-19cfb4ab41bf</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>8f648578-cbf5-49c9-9f30-1c26faabb4af</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>00716173-f33f-4414-badf-682d962d8850</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0141cb0c-98f6-4d7e-822a-6864e5e6c251</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>963184d7-ff9e-4db6-b4b8-6dcc09a27b5d</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>276d686a-98f8-497d-a7b0-4a0eaf4029c9</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b01c8947-86f0-4e9a-85e6-f6e82be11ff1</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>987b86e6-69f4-48e3-964f-2cdf26df18b6</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e1c4a7cf-ba07-4781-b9aa-2a06a6eb7c64</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>7f3b1263-a5a7-47ea-9a29-8ec42d9478be</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0e5c94c2-733b-49d9-a665-f180c7b83997</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b718d9d3-f914-4c39-ad82-6863e37f7b4e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    <con:breakPoints><con:testStepId>f508bf45-e40b-46ca-b4a4-827aa6324cdb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a2f35876-4d99-49fd-a801-728eef70a98e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>37690a3a-3fbe-4a16-bab2-9219068280a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>331432ed-492f-46ff-9894-edc884ba2b5a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61cb14f9-8e53-4d37-bc10-9cf2394a3b18</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22afbb4f-a05f-4421-81fc-b54d58b9140e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f82b8131-1ad5-40b0-bfeb-f7cd8a1beef8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe671435-0067-4e17-a96b-5f275b15d322</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>732820ff-9dd8-4582-9ae1-6a9e1479ea17</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d404c5f-312a-45a4-84f1-8995135bdcfa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6e3270f-fe55-49d7-836f-7be94e7beb87</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="true" maxResults="0" name="Add Prop Card" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6c421bac-ff1b-4a9e-8f8f-0231d4a37929">
    <con:settings>
      <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
      <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      <con:setting id="IncludeOverview">true</con:setting>
      <con:setting id="IncludeResults">true</con:setting>
      <con:setting id="FlowLayout">true</con:setting>
      <con:setting id="ErrorDetails">true</con:setting>
      <con:setting id="IncludeCoverage">true</con:setting>
      <con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting>
      <con:setting id="GeneratableJUnitReport@Folder">C:\Users\tijo.thomas\Desktop</con:setting>
    </con:settings>
    <con:testStep type="datagen" name="RandomEmailGenerator">
      <con:settings/>
      <con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:property type="Script">
          <con:configuration><script>def sdf = new java.text.SimpleDateFormat("ddhhmmss")
					def useremail =  "user"+sdf.format( new Date())+"@user.com"
					def usernewemail =  "new"+sdf.format( new Date())+"@user.com"
					def regEmail =  "user"+sdf.format( new Date())+"@reg.com"
					def coregEmail =  "user"+sdf.format( new Date())+"@coreg.com"					

					def coregFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(5)
					def coregLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
					def regFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(7)
					def regLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(8)
					
					testRunner.testCase.testSuite.setPropertyValue( "emailId", useremail )
					testRunner.testCase.testSuite.setPropertyValue( "usernewemail", usernewemail )
					testRunner.testCase.testSuite.setPropertyValue( "regEmail", regEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregEmail", coregEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregFirstname", coregFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "coregLastname", coregLastname )
					testRunner.testCase.testSuite.setPropertyValue( "regFirstname", regFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "regLastname", regLastname )
					return email 
			</script></con:configuration>
          <con:name>emailAddress</con:name>
          <con:mode>STEP</con:mode>
          <con:shared>true</con:shared>
        </con:property>
      </con:config>
    </con:testStep>
    
      
      
      
      
      <con:testStep type="httprequest" name="Create user JSON">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="Create user JSON" postQueryString="false" mediaType="application/json" id="9f0b2445-5350-4ec5-93f5-176aaac8b40b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user</con:endpoint>
          <con:request>{
    "firstname": "Alex",
    "lastname": "Test",
    "address1": "680 Folsom St",
    "address22": "",
    "gender": "M",
    "city": "San Francisco",
    "state": "CA",
    "zipcode": "94107",
    "countrycode": "USA",
    "emailaddress": "${#TestSuite#emailId}",
    "verifyemailaddress": "${#TestSuite#emailId}",
    "password": "${#Project#password}",
    "verifypassword": "${#Project#password}",
    "birthdateday": "30",
    "birthdatemonth": "01",
    "birthdateyear": "1975",
    "subscription": "N",
    "textoption": "false",
    "bestphone": "2246537924",
    "mobilephone": "2246537924",
    "passwordHintQuestion": "1",
    "passwordHintAnswer": "123"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3f7f4ae2-00d2-4fc0-bd7e-a0db64cba89e">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a1eb047c-19ee-4e40-ab73-880ab81bd72b">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def userId=holder.getNodeValue("//response/userId");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "userId", userId.toString() )


//log.info userId.toString()</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      
      
      <con:testStep type="httprequest" name="GET v2/oauth2/token/userDetails">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v2/oauth2/token/userDetails" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d6130e4a-803b-4834-958c-a7b217358e10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/userDetails?application=Mobile</con:endpoint>
          <con:request>grant_type=password&amp;username=${#TestSuite#emailId}&amp;password=${#Project#password}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="986f5588-983f-438c-9271-ed82fe789c8f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="4a818b8a-e33e-42f6-8bf9-de3b596cd2e2">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def access_token=holder.getNodeValue("//response/access_token");
def refresh_token=holder.getNodeValue("//response/refresh_token");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "refresh_token", refresh_token.toString() )</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api oauth v2/user?show=">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api oauth v2/user?show=" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=summary,shipping,billing,store</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration><codes>200</codes></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="POST api v2/user/billing">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="POST api v2/user/billing" postQueryString="false" mediaType="application/json" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user/billing</con:endpoint>
          <con:request>{ 
    "usernewbilling": { 
        "creditcard": { 
            "cardtype": "B", 
            "isprimary": "false", 
            "verificationnumber": "5311",
            "cardnumber": "377481124544617", 
            "expirationmonth": "12", 
            "expirationyear": "2018" 
        }, 
        "billingaddress": { 
            "firstname": "Alex",             
            "lastname": "Test", 
            "areacode": "000", 
            "exchange": "000", 
            "numberext": "0001", 
            "emailaddress": "${#TestSuite#emailId}", 
            "verifyemailaddress": "${#TestSuite#emailId}", 
            "attention": "testing#prop#card", 
            "address": "680 Folsom St",             
            "city": "San Francisco", 
            "state": "CA", 
            "zipcode": "94107" 
        } 
    } 
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [cardid]"><con:configuration><path>exists( //response/billingMapper/creditcarddetails/cardid)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Set [cardid]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def cardid = holder.getNodeValue( "//response/billingMapper/creditcarddetails/cardid" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "cardid", cardid )

assert cardid != null
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [billingAddress]"><con:configuration><path>exists( //response/billingMapper/billingAddress)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api v2/user?show=billing">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api v2/user?show=billing" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [cardid]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/cardid[1]/text()</path><content>${#TestSuite#cardid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="PUT api v2/user/billing"><con:settings/><con:config method="PUT" xsi:type="con:HttpRequest" name="PUT api v2/user/billing" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#apiendPoint}/v2/user/billing</con:endpoint><con:request>{
    "userbilling": {
        "creditcard": {
            "cardid": "${#TestSuite#cardid}",
            "cardtype": "${#TestSuite#cardtype_B}",
            "isprimary": "${#TestSuite#u_isprimary}",
            "cardnumber": "${#TestSuite#b_cardnumber1}",
            "expirationmonth": "${#TestSuite#u_expmonth}",
            "expirationyear": "${#TestSuite#u_expyear}"
        },
        "billingaddress": {
            "firstname": "${#TestSuite#u_fname}",
            "middlename": "${#TestSuite#u_mname}",
            "lastname": "${#TestSuite#u_lname}",
            "areacode": "${#TestSuite#u_areacode}",
            "exchange": "${#TestSuite#u_exchange}",
            "numberext": "${#TestSuite#u_numberext}",
            "emailaddress": "${#TestSuite#u_emailaddress}",
            "verifyemailaddress": "${#TestSuite#u_emailaddress}",
            "attention": "${#TestSuite#u_attention}",
            "address": "${#TestSuite#u_address}",
            "address1": "${#TestSuite#u_address1}",
            "city": "${#TestSuite#u_city}",
            "state": "${#TestSuite#u_state}",
            "zipcode": "${#TestSuite#u_zipcode}"
        }
    }
}</con:request><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [cardid]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/cardid[1]/text()</path><content>${#TestSuite#cardid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [cardtype]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/cardtype[1]/text()</path><content>${#TestSuite#cardtype_B}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [isprimary]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/isprimary[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [cardnumber]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/billingMapper[1]/creditcarddetails[1]/cardnumber[1]" )
def cardnum=context.expand('${#TestSuite#b_cardnumber1}')
assert node.endsWith(cardnum.substring(cardnum.length()-4))
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [expirationmonth]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/billingMapper[1]/creditcarddetails[1]/expirationmonth[1]" )

assert node.equals(Integer.parseInt(context.expand('${#TestSuite#u_expmonth}')).toString())
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expirationyear]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/expirationyear[1]/text()</path><content>${#TestSuite#u_expyear}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstname]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/firstname[1]/text()</path><content>${#TestSuite#u_fname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [middlename]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/middlename[1]/text()</path><content>${#TestSuite#u_mname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastname]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/lastname[1]/text()</path><content>${#TestSuite#u_lname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [phone]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/phone[1]/text()</path><content>${#TestSuite#u_areacode}-${#TestSuite#u_exchange}-${#TestSuite#u_numberext}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="oti/cards/3287-->Match content of [emailaddress]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/emailaddress[1]/text()</path><content>${#TestSuite#u_emailaddress}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [attention]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/attention[1]/text()</path><content>${#TestSuite#u_attention}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [address]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/address[1]/text()</path><content>${#TestSuite#u_address}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [address1]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/address1[1]/text()</path><content>${#TestSuite#u_address1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [attention]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/attention[1]/text()</path><content>${#TestSuite#u_attention}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [city]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/city[1]/text()</path><content>${#TestSuite#u_city}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [state]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/state[1]/text()</path><content>${#TestSuite#u_state}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [zipcode]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/zipcode[1]/text()</path><content>${#TestSuite#u_zipcode}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="GET api v2/user?show=billing Updated"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GET api v2/user?show=billing Updated" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#apiendPoint}/v2/user?show=billing</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionInfo]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscribed]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo/subscribed)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionId]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo/subscriptionId)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [subscriptionName]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo/subscriptionName)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [active]"><con:configuration><path>exists( //response/subscriptionMapper/subscriptionInfo/active)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [billingMapper]"><con:configuration><path>exists( //response/billingMapper)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [creditcarddetails]"><con:configuration><path>exists( //response/billingMapper/creditcarddetails)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [billingAddress]"><con:configuration><path>exists( //response/billingMapper/billingAddress)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [cardid]"><con:configuration><path>exists( //response/billingMapper/creditcarddetails/cardid)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [cardtype]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/cardtype[1]/text()</path><content>${#TestSuite#cardtype_B}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [isprimary]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/isprimary[1]/text()</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expirationmonth]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/expirationmonth[1]/text()</path><content>${#TestSuite#u_expmonth}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [expirationyear]"><con:configuration><path>//response[1]/billingMapper[1]/creditcarddetails[1]/expirationyear[1]/text()</path><content>${#TestSuite#u_expyear}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [firstname]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/firstname[1]/text()</path><content>${#TestSuite#u_fname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [middlename]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/middlename[1]/text()</path><content>${#TestSuite#u_mname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [lastname]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/lastname[1]/text()</path><content>${#TestSuite#u_lname}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert Content [phone]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getNodeValue( "//response[1]/billingMapper[1]/billingAddress[1]/phone[1]" )
actualPhoneNumber = node.toString()

areacode = context.expand('${#TestSuite#u_areacode}')
exchange = context.expand('${#TestSuite#u_exchange}')
numberext = context.expand('${#TestSuite#u_numberext}')

expectedPhoneNumber = areacode + '-' + exchange + '-' + numberext

assert actualPhoneNumber == expectedPhoneNumber
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [emailaddress]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/emailaddress[1]/text()</path><content>${#TestSuite#u_emailaddress}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [address]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/address[1]/text()</path><content>${#TestSuite#u_address}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [address1]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/address1[1]/text()</path><content>${#TestSuite#u_address1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [attention]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/attention[1]/text()</path><content>${#TestSuite#u_attention}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [city]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/city[1]/text()</path><content>${#TestSuite#u_city}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [state]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/state[1]/text()</path><content>${#TestSuite#u_state}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [zipcode]"><con:configuration><path>//response[1]/billingMapper[1]/billingAddress[1]/zipcode[1]/text()</path><content>${#TestSuite#u_zipcode}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check count of [billingMapper]"><con:configuration><path>count( //response/billingMapper)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="POST api v2/user/billing/delete">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="POST api v2/user/billing/delete" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user/billing/delete?cardid=${#TestSuite#cardid}&amp;userID=${#TestSuite#userId}</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/success[1]/text()</path><content>Credit Card Removed Successfully</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api v2/user?show=billing 1">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api v2/user?show=billing 1" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for NON existance of [billingMapper]"><con:configuration><path>exists( //response/billingMapper)</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>itemFound_flag</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>productId</con:name>
          <con:value>28882</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>0592ea83-f3a6-4715-a90d-61a7d166ee99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>9ffeff1c-93b3-4911-802f-7b3249befd99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0b3fa046-21fa-4659-88e8-b6c33f1cf804</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>4f5c7e3c-135f-4654-93c5-d190df1852a8</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f8c76a06-37f8-4430-aeb2-95dae3164a6f</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>6872eaa4-73e8-4f42-b546-bc576a1e8b72</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>c136b370-6432-414a-8fa5-58bd2e0bbe82</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>92ec6ffc-03d0-480a-b2ca-46d275a19e41</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f0059ac9-6192-4a1e-b7fc-a1e05a6f09b5</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>bbc35938-5b71-4610-ba04-3544735df16b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>93bd8caa-2b6a-45c1-a4da-99dd6ec3d88e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e04cf0d4-2f9f-40eb-b6a6-92f97540b861</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>da4ec907-3bbe-43da-a488-fa36cab4313b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b9cfe94f-350f-4aec-a0d4-c1ef63289c4b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3ac7cb55-c0a9-4fb5-a7ad-c7aeb199a019</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>03474a32-c822-4545-b562-2b96e0134fea</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>505ee185-4d82-4c4a-a7d6-a41dd9c1d6f0</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>909feb60-d9f4-48c2-b9b4-539eb072ad17</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a7d3655f-5895-4bdd-9509-ae876f731273</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>88c4bfb7-99b8-4b0a-9f17-0b98a961a714</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a9b09540-cda6-4a4b-b13e-c7f52370eda2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>42f5b219-5485-468c-8e76-2a419789cd8a</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3245cf88-02bc-420d-8cda-9842d008c2cc</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3a329d8f-0c5b-4a5d-b19d-19cfb4ab41bf</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>8f648578-cbf5-49c9-9f30-1c26faabb4af</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>00716173-f33f-4414-badf-682d962d8850</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0141cb0c-98f6-4d7e-822a-6864e5e6c251</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>963184d7-ff9e-4db6-b4b8-6dcc09a27b5d</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>276d686a-98f8-497d-a7b0-4a0eaf4029c9</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b01c8947-86f0-4e9a-85e6-f6e82be11ff1</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>987b86e6-69f4-48e3-964f-2cdf26df18b6</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e1c4a7cf-ba07-4781-b9aa-2a06a6eb7c64</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>7f3b1263-a5a7-47ea-9a29-8ec42d9478be</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0e5c94c2-733b-49d9-a665-f180c7b83997</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b718d9d3-f914-4c39-ad82-6863e37f7b4e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    <con:breakPoints><con:testStepId>f508bf45-e40b-46ca-b4a4-827aa6324cdb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a2f35876-4d99-49fd-a801-728eef70a98e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>37690a3a-3fbe-4a16-bab2-9219068280a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>331432ed-492f-46ff-9894-edc884ba2b5a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61cb14f9-8e53-4d37-bc10-9cf2394a3b18</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22afbb4f-a05f-4421-81fc-b54d58b9140e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f82b8131-1ad5-40b0-bfeb-f7cd8a1beef8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe671435-0067-4e17-a96b-5f275b15d322</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>732820ff-9dd8-4582-9ae1-6a9e1479ea17</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d404c5f-312a-45a4-84f1-8995135bdcfa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6e3270f-fe55-49d7-836f-7be94e7beb87</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties>
      <con:property>
        <con:name>genctxToken</con:name>
        <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Rb0d+JrbICPJSsbsxTlYacMvGmDZIY+48pNdy8gOsxjkVC6HH/U65wKt9TFbV+DhTv/nIkG8rFxy7to9vmX1EkHmzbWJnsAnbaXE/bHBIIoFKjlre+ftuf45eCVc2n+RbgCK+tOjl4z3ownRmZ+IhQC4wdkUm0nmktQiCzDEGVaTB7KnSDIIDi/3JaqOr3z5</con:value>
      </con:property>
      <con:property>
        <con:name>userId</con:name>
        <con:value>2158457702</con:value>
      </con:property>
      <con:property>
        <con:name>emailId</con:name>
        <con:value>user24053619@user.com</con:value>
      </con:property>
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      <con:property>
        <con:name>oauth_token</con:name>
        <con:value>c2RhaHZxZmNqeTdlNTNlZXlrOHg1OTN5Ok1nejlObmNFd1l1NXR3czZEdUpzNFZEQw==</con:value>
      </con:property>
      <con:property>
        <con:name>access_token</con:name>
        <con:value>ra9f3z3fbegb8qjg42vs525r</con:value>
      </con:property>
      <con:property>
        <con:name>refresh_token</con:name>
        <con:value>6qur2n8puz9yy63nq6kfnkx7</con:value>
      </con:property>
    <con:property><con:name>preferredStoreId</con:name><con:value>45</con:value></con:property><con:property><con:name>regEmail</con:name><con:value>user24053619@reg.com</con:value></con:property><con:property><con:name>coregEmail</con:name><con:value>user24053619@coreg.com</con:value></con:property><con:property><con:name>coregFirstname</con:name><con:value>anZUg</con:value></con:property><con:property><con:name>coregLastname</con:name><con:value>vjGKjK</con:value></con:property><con:property><con:name>regFirstname</con:name><con:value>ElDRCNr</con:value></con:property><con:property><con:name>regLastname</con:name><con:value>NStAkTHC</con:value></con:property><con:property><con:name>contactId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11652380</con:value></con:property><con:property><con:name>usernewemail</con:name><con:value>new24053619@user.com</con:value></con:property><con:property><con:name>cardid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">10362800</con:value></con:property><con:property><con:name>u_isprimary</con:name><con:value>true</con:value></con:property><con:property><con:name>u_expmonth</con:name><con:value>8</con:value></con:property><con:property><con:name>u_expyear</con:name><con:value>2020</con:value></con:property><con:property><con:name>u_fname</con:name><con:value>billing update fname</con:value></con:property><con:property><con:name>u_mname</con:name><con:value>billing update mname</con:value></con:property><con:property><con:name>u_lname</con:name><con:value>billing update lname</con:value></con:property><con:property><con:name>u_areacode</con:name><con:value>401</con:value></con:property><con:property><con:name>u_exchange</con:name><con:value>445</con:value></con:property><con:property><con:name>u_numberext</con:name><con:value>7895</con:value></con:property><con:property><con:name>u_emailaddress</con:name><con:value>billingupdate@macys.com</con:value></con:property><con:property><con:name>u_attention</con:name><con:value>billingupdate</con:value></con:property><con:property><con:name>u_address</con:name><con:value>billing update address</con:value></con:property><con:property><con:name>u_address1</con:name><con:value>billing update address1</con:value></con:property><con:property><con:name>u_city</con:name><con:value>billing update city</con:value></con:property><con:property><con:name>u_state</con:name><con:value>NY</con:value></con:property><con:property><con:name>u_zipcode</con:name><con:value>10022</con:value></con:property><con:property><con:name>fName_Update</con:name><con:value>Fname Update</con:value></con:property><con:property><con:name>lName_Update</con:name><con:value>Lname Update</con:value></con:property><con:property><con:name>add1_Update</con:name><con:value>#add1 Update</con:value></con:property><con:property><con:name>add2_Update</con:name><con:value>#add2 Update</con:value></con:property><con:property><con:name>city_Update</con:name><con:value>City Update</con:value></con:property><con:property><con:name>state_Update</con:name><con:value>NY</con:value></con:property><con:property><con:name>zip_Update</con:name><con:value>10022</con:value></con:property><con:property><con:name>gender_Update</con:name><con:value>F</con:value></con:property><con:property><con:name>DOB_day_Update</con:name><con:value>12</con:value></con:property><con:property><con:name>DOB_mon_Update</con:name><con:value>5</con:value></con:property><con:property><con:name>DOB_yr_Update</con:name><con:value>1968</con:value></con:property><con:property><con:name>bestPhone_Update</con:name><con:value>4978965412</con:value></con:property><con:property><con:name>mobilePhone_Update</con:name><con:value>1234568974</con:value></con:property><con:property><con:name>cardtype_B</con:name><con:value>B</con:value></con:property><con:property><con:name>b_cardnumber1</con:name><con:value>377481100161279</con:value></con:property></con:properties>
    <con:tearDownScript>for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      for ( testStepResult in testCaseResult.getResults() )
      {
         testStepResult.messages.each() { msg -> log.info msg }
      }
   }
}</con:tearDownScript><con:reportParameters/>
  </con:testSuite><con:testSuite name="User Lock Reset">
  <con:settings/>
  <con:runType>SEQUENTIAL</con:runType>
  <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="true" maxResults="0" name="Lock User-Access Token" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6a223667-e087-45db-bcb2-7a6d8efc751d">
    <con:settings>
      <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
      <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      <con:setting id="IncludeOverview">true</con:setting>
      <con:setting id="IncludeResults">true</con:setting>
      <con:setting id="FlowLayout">true</con:setting>
      <con:setting id="ErrorDetails">true</con:setting>
      <con:setting id="IncludeCoverage">true</con:setting>
      <con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting>
      <con:setting id="GeneratableJUnitReport@Folder">C:\Users\tijo.thomas\Desktop</con:setting>
    </con:settings>
    <con:testStep type="datagen" name="RandomEmailGenerator">
      <con:settings/>
      <con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:property type="Script">
          <con:configuration><script>def sdf = new java.text.SimpleDateFormat("ddhhmmss")
					def useremail =  "user"+sdf.format( new Date())+"@user.com"
					def usernewemail =  "new"+sdf.format( new Date())+"@user.com"
					def regEmail =  "user"+sdf.format( new Date())+"@reg.com"
					def coregEmail =  "user"+sdf.format( new Date())+"@coreg.com"					

					def coregFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(5)
					def coregLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
					def regFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(7)
					def regLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(8)
					
					testRunner.testCase.testSuite.setPropertyValue( "emailId", useremail )
					testRunner.testCase.testSuite.setPropertyValue( "usernewemail", usernewemail )
					testRunner.testCase.testSuite.setPropertyValue( "regEmail", regEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregEmail", coregEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregFirstname", coregFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "coregLastname", coregLastname )
					testRunner.testCase.testSuite.setPropertyValue( "regFirstname", regFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "regLastname", regLastname )
					return email 
			</script></con:configuration>
          <con:name>emailAddress</con:name>
          <con:mode>STEP</con:mode>
          <con:shared>true</con:shared>
        </con:property>
      </con:config>
    </con:testStep>
    
      
      
      
      
      <con:testStep type="httprequest" name="Create user JSON">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="Create user JSON" postQueryString="false" mediaType="application/json" id="9f0b2445-5350-4ec5-93f5-176aaac8b40b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user</con:endpoint>
          <con:request>{
    "firstname": "Wssg",
    "lastname": "Tester",
    "address1": "685MarketSt",
    "address22": "Suite800",
    "gender": "M",
    "city": "SanFrancisco",
    "state": "CA",
    "zipcode": "94105",
    "countrycode": "USA",
    "emailaddress": "${#TestSuite#emailId}",
    "verifyemailaddress": "${#TestSuite#emailId}",
    "password": "${#Project#password}",
    "verifypassword": "${#Project#password}",
    "birthdateday": "31",
    "birthdatemonth": "05",
    "birthdateyear": "1976",
    "subscription": "N",
    "textoption": "false",
    "bestphone": "8005551212",
    "mobilephone": "8005551212",
    "passwordHintQuestion": "1",
    "passwordHintAnswer": "123",
    "shippingAddress": {
        "shippingAddressFirstName": "J",
        "shippingAddressLastName": "L",
        "shippingAddress1": "456MarketSt",
        "shippingAddressZipCode": "94106",
        "shippingAddressBestPhone": "8002896223",
        "shippingAddressCity": "York",
        "shippingAddressState": "AZ"
    },
    "userPreferredStoreId": "${#Project#preferredStoreId}"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3f7f4ae2-00d2-4fc0-bd7e-a0db64cba89e">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a1eb047c-19ee-4e40-ab73-880ab81bd72b">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def userId=holder.getNodeValue("//response/userId");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "userId", userId.toString() )


//log.info userId.toString()</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      
      
      <con:testStep type="httprequest" name="GET v2/oauth2/token/userDetails-1">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v2/oauth2/token/userDetails-1" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d6130e4a-803b-4834-958c-a7b217358e10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/userDetails?application=Mobile</con:endpoint>
          <con:request>grant_type=password&amp;username=${#TestSuite#emailId}&amp;password=${#Project#password}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="986f5588-983f-438c-9271-ed82fe789c8f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Get&amp;Set [access_token&amp;refresh_token]" id="4a818b8a-e33e-42f6-8bf9-de3b596cd2e2">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def access_token=holder.getNodeValue("//response/access_token");
def refresh_token=holder.getNodeValue("//response/refresh_token");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "refresh_token", refresh_token.toString() )</scriptText></con:configuration>
          </con:assertion>
          <con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api oauth v2/user?show-1">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api oauth v2/user?show-1" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=summary,shipping,billing,store</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration><codes>200</codes></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Loop-Invalid SignIn"><con:settings/><con:config><script>//def gvr=context.expand('${#TestSuite#gvr}')
//
//if (gvr.equals('false')){
//	sleep(1000)	
//	testRunner.gotoStepByName( "GVR by-id-1")	
//}
//else{	
//	testRunner.gotoStepByName( "GVR by-id-2")	
//}

for (int i=0; i&lt;10; i++){
	testRunner.runTestStepByName( "GET v2/oauth2/token/userDetails-Invalid-500")
}
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET v2/oauth2/token/userDetails-Invalid-500" id="cfeb2a4e-2b99-4aa6-866b-fe1eb4c8a416">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v2/oauth2/token/userDetails-Invalid-500" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d6130e4a-803b-4834-958c-a7b217358e10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/userDetails?application=Mobile</con:endpoint>
          <con:request>grant_type=password&amp;username=${#TestSuite#emailId}&amp;password=Invalid</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="986f5588-983f-438c-9271-ed82fe789c8f">
            <con:configuration><codes>500</codes></con:configuration>
          </con:assertion>
          
          <con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET v2/oauth2/token/userDetails-2-500" id="261dad49-e275-4b80-b41d-f8967185c28d">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v2/oauth2/token/userDetails-2-500" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d6130e4a-803b-4834-958c-a7b217358e10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/userDetails?application=Mobile</con:endpoint>
          <con:request>grant_type=password&amp;username=${#TestSuite#emailId}&amp;password=${#Project#password}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="986f5588-983f-438c-9271-ed82fe789c8f">
            <con:configuration><codes>500</codes></con:configuration>
          </con:assertion>
          
          <con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v2/user/lockreset-200" id="c622cbb1-2519-47f5-8810-b0810f991aa5">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v2/user/lockreset-200" postQueryString="false" mediaType="application/xml" id="afdcfee4-dbf5-4fce-b639-b192dfe33d48" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user/lockreset?emailaddress=${#TestSuite#emailId}</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="354e4a45-85bf-4f7e-8a9f-d424e5359e3f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/success[1]/text()</path><content>RESETLOCKEDUSER</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET v2/oauth2/token/userDetails-3-200" id="5deb1d0c-9baa-4596-8156-2867b1e35a63">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v2/oauth2/token/userDetails-3-200" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d6130e4a-803b-4834-958c-a7b217358e10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ${#Project#oauth_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/oauth2/token/userDetails?application=Mobile</con:endpoint>
          <con:request>grant_type=password&amp;username=${#TestSuite#emailId}&amp;password=${#Project#password}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="986f5588-983f-438c-9271-ed82fe789c8f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Get&amp;Set [access_token&amp;refresh_token]" id="4a818b8a-e33e-42f6-8bf9-de3b596cd2e2">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def access_token=holder.getNodeValue("//response/access_token");
def refresh_token=holder.getNodeValue("//response/refresh_token");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "access_token", access_token.toString() )
messageExchange.modelItem.testCase.testSuite.setPropertyValue( "refresh_token", refresh_token.toString() )</scriptText></con:configuration>
          </con:assertion>
          <con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET api oauth v2/user?show-2-200" id="c14c20c7-16c4-49e4-be50-fa523a61dad8">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET api oauth v2/user?show-2-200" postQueryString="false" mediaType="application/xml" id="3de7d8ac-8dc8-4062-bf82-44532b450c43" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer ${#TestSuite#access_token}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings>
          <con:endpoint>${#Project#apiendPoint}/v2/user?show=summary,shipping,billing,store</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="38379560-0529-472c-a6ed-3b71e980ae01">
            <con:configuration><codes>200</codes></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties>
        
        
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>0592ea83-f3a6-4715-a90d-61a7d166ee99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>9ffeff1c-93b3-4911-802f-7b3249befd99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0b3fa046-21fa-4659-88e8-b6c33f1cf804</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>4f5c7e3c-135f-4654-93c5-d190df1852a8</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f8c76a06-37f8-4430-aeb2-95dae3164a6f</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>6872eaa4-73e8-4f42-b546-bc576a1e8b72</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>c136b370-6432-414a-8fa5-58bd2e0bbe82</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>92ec6ffc-03d0-480a-b2ca-46d275a19e41</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f0059ac9-6192-4a1e-b7fc-a1e05a6f09b5</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>bbc35938-5b71-4610-ba04-3544735df16b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>93bd8caa-2b6a-45c1-a4da-99dd6ec3d88e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e04cf0d4-2f9f-40eb-b6a6-92f97540b861</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>da4ec907-3bbe-43da-a488-fa36cab4313b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b9cfe94f-350f-4aec-a0d4-c1ef63289c4b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3ac7cb55-c0a9-4fb5-a7ad-c7aeb199a019</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>03474a32-c822-4545-b562-2b96e0134fea</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>505ee185-4d82-4c4a-a7d6-a41dd9c1d6f0</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>909feb60-d9f4-48c2-b9b4-539eb072ad17</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a7d3655f-5895-4bdd-9509-ae876f731273</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>88c4bfb7-99b8-4b0a-9f17-0b98a961a714</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a9b09540-cda6-4a4b-b13e-c7f52370eda2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>42f5b219-5485-468c-8e76-2a419789cd8a</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3245cf88-02bc-420d-8cda-9842d008c2cc</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3a329d8f-0c5b-4a5d-b19d-19cfb4ab41bf</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>8f648578-cbf5-49c9-9f30-1c26faabb4af</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>00716173-f33f-4414-badf-682d962d8850</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0141cb0c-98f6-4d7e-822a-6864e5e6c251</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>963184d7-ff9e-4db6-b4b8-6dcc09a27b5d</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>276d686a-98f8-497d-a7b0-4a0eaf4029c9</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b01c8947-86f0-4e9a-85e6-f6e82be11ff1</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>987b86e6-69f4-48e3-964f-2cdf26df18b6</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e1c4a7cf-ba07-4781-b9aa-2a06a6eb7c64</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>7f3b1263-a5a7-47ea-9a29-8ec42d9478be</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0e5c94c2-733b-49d9-a665-f180c7b83997</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b718d9d3-f914-4c39-ad82-6863e37f7b4e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    <con:breakPoints><con:testStepId>f508bf45-e40b-46ca-b4a4-827aa6324cdb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a2f35876-4d99-49fd-a801-728eef70a98e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>37690a3a-3fbe-4a16-bab2-9219068280a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>331432ed-492f-46ff-9894-edc884ba2b5a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61cb14f9-8e53-4d37-bc10-9cf2394a3b18</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22afbb4f-a05f-4421-81fc-b54d58b9140e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f82b8131-1ad5-40b0-bfeb-f7cd8a1beef8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe671435-0067-4e17-a96b-5f275b15d322</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>732820ff-9dd8-4582-9ae1-6a9e1479ea17</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d404c5f-312a-45a4-84f1-8995135bdcfa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6e3270f-fe55-49d7-836f-7be94e7beb87</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c622cbb1-2519-47f5-8810-b0810f991aa5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cfeb2a4e-2b99-4aa6-866b-fe1eb4c8a416</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c14c20c7-16c4-49e4-be50-fa523a61dad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>261dad49-e275-4b80-b41d-f8967185c28d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5deb1d0c-9baa-4596-8156-2867b1e35a63</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="true" maxResults="0" name="Lock User-SDP Token" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0f8f08f1-bd37-455f-9bbf-95d1cabce6ab">
    <con:settings>
      <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
      <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      <con:setting id="IncludeOverview">true</con:setting>
      <con:setting id="IncludeResults">true</con:setting>
      <con:setting id="FlowLayout">true</con:setting>
      <con:setting id="ErrorDetails">true</con:setting>
      <con:setting id="IncludeCoverage">true</con:setting>
      <con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting>
      <con:setting id="GeneratableJUnitReport@Folder">C:\Users\tijo.thomas\Desktop</con:setting>
    </con:settings>
    <con:testStep type="datagen" name="RandomEmailGenerator">
      <con:settings/>
      <con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <con:property type="Script">
          <con:configuration><script>def sdf = new java.text.SimpleDateFormat("ddhhmmss")
					def useremail =  "user"+sdf.format( new Date())+"@user.com"
					def usernewemail =  "new"+sdf.format( new Date())+"@user.com"
					def regEmail =  "user"+sdf.format( new Date())+"@reg.com"
					def coregEmail =  "user"+sdf.format( new Date())+"@coreg.com"					

					def coregFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(5)
					def coregLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
					def regFirstname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(7)
					def regLastname =  org.apache.commons.lang.RandomStringUtils.randomAlphabetic(8)
					
					testRunner.testCase.testSuite.setPropertyValue( "emailId", useremail )
					testRunner.testCase.testSuite.setPropertyValue( "usernewemail", usernewemail )
					testRunner.testCase.testSuite.setPropertyValue( "regEmail", regEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregEmail", coregEmail )
					testRunner.testCase.testSuite.setPropertyValue( "coregFirstname", coregFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "coregLastname", coregLastname )
					testRunner.testCase.testSuite.setPropertyValue( "regFirstname", regFirstname )
					testRunner.testCase.testSuite.setPropertyValue( "regLastname", regLastname )
					return email 
			</script></con:configuration>
          <con:name>emailAddress</con:name>
          <con:mode>STEP</con:mode>
          <con:shared>true</con:shared>
        </con:property>
      </con:config>
    </con:testStep>
    
      
      
      
      
      <con:testStep type="httprequest" name="Create user JSON">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="Create user JSON" postQueryString="false" mediaType="application/json" id="9f0b2445-5350-4ec5-93f5-176aaac8b40b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user</con:endpoint>
          <con:request>{
    "firstname": "Wssg",
    "lastname": "Tester",
    "address1": "685MarketSt",
    "address22": "Suite800",
    "gender": "M",
    "city": "SanFrancisco",
    "state": "CA",
    "zipcode": "94105",
    "countrycode": "USA",
    "emailaddress": "${#TestSuite#emailId}",
    "verifyemailaddress": "${#TestSuite#emailId}",
    "password": "${#Project#password}",
    "verifypassword": "${#Project#password}",
    "birthdateday": "31",
    "birthdatemonth": "05",
    "birthdateyear": "1976",
    "subscription": "N",
    "textoption": "false",
    "bestphone": "8005551212",
    "mobilephone": "8005551212",
    "passwordHintQuestion": "1",
    "passwordHintAnswer": "123",
    "shippingAddress": {
        "shippingAddressFirstName": "J",
        "shippingAddressLastName": "L",
        "shippingAddress1": "456MarketSt",
        "shippingAddressZipCode": "94106",
        "shippingAddressBestPhone": "8002896223",
        "shippingAddressCity": "York",
        "shippingAddressState": "AZ"
    },
    "userPreferredStoreId": "${#Project#preferredStoreId}"
}</con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3f7f4ae2-00d2-4fc0-bd7e-a0db64cba89e">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a1eb047c-19ee-4e40-ab73-880ab81bd72b">
            <con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def userId=holder.getNodeValue("//response/userId");

messageExchange.modelItem.testCase.testSuite.setPropertyValue( "userId", userId.toString() )


//log.info userId.toString()</scriptText></con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      
      
      <con:testStep type="httprequest" name="GET v1/user/sdptoken-1-200" id="b14e5eee-7226-4661-8aae-c88f45da73e4">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v1/user/sdptoken-1-200" postQueryString="false" mediaType="application/xml" id="cb5388f2-7cb7-42ba-92c7-b265370c2c07" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v1/user/sdptoken</con:endpoint>
          <con:request><![CDATA[<request>
       <email>${#TestSuite#emailId}</email>
       <password>${#Project#password}</password>
   </request>]]></con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d8a99d05-2a8d-4e51-b96c-405348c0a1e5">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [userId]" id="7b05c31e-6c2f-4a1f-9ab5-147a758ab6dd">
            <con:configuration>
              <path>exists( //sdpinfo/userId)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [token]" id="2beeb690-7953-47d8-bf31-cb106a14f52f">
            <con:configuration>
              <path>exists( //sdpinfo/token)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Assert node [token]" id="87b1d3c0-1f95-4d92-80d9-256d50f353f7">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def token = holder.getNodeValue( "//sdpinfo/token" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "genctxToken", token )


assert token != null
</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET v2/user?show-1" id="6853bc72-9bf8-4eac-a3da-9f4abae3f622">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET v2/user?show-1" postQueryString="false" mediaType="application/xml" id="de0ed9c4-82f1-4344-a88c-1d631cabed89" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user?show=summary,shipping,store,billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c8721b9f-7888-448f-9636-ecd6301f619e">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Loop-Invalid SignIn"><con:settings/><con:config><script>for (int i=0; i&lt;10; i++){
	testRunner.runTestStepByName( "GET v1/user/sdptoken-Invalid-400")
}
</script></con:config></con:testStep><con:testStep type="httprequest" name="GET v1/user/sdptoken-Invalid-400" id="1ee3d5d3-5d03-47f6-8345-c457c2ba8d27">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v1/user/sdptoken-Invalid-400" postQueryString="false" mediaType="application/xml" id="cb5388f2-7cb7-42ba-92c7-b265370c2c07" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v1/user/sdptoken</con:endpoint>
          <con:request><![CDATA[<request>
       <email>${#TestSuite#emailId}</email>
       <password>Invalid</password>
   </request>]]></con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d8a99d05-2a8d-4e51-b96c-405348c0a1e5">
            <con:configuration><codes>400</codes></con:configuration>
          </con:assertion>
          
          
          
          <con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET v1/user/sdptoken-2-400" id="6600a69d-3c99-4a6a-8cd2-f8d117ea4e7f">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v1/user/sdptoken-2-400" postQueryString="false" mediaType="application/xml" id="cb5388f2-7cb7-42ba-92c7-b265370c2c07" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v1/user/sdptoken</con:endpoint>
          <con:request><![CDATA[<request>
       <email>${#TestSuite#emailId}</email>
       <password>${#Project#password}</password>
   </request>]]></con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d8a99d05-2a8d-4e51-b96c-405348c0a1e5">
            <con:configuration><codes>400</codes></con:configuration>
          </con:assertion>
          
          
          
          <con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="v2/user/lockreset-200">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="v2/user/lockreset-200" postQueryString="false" mediaType="application/xml" id="afdcfee4-dbf5-4fce-b639-b192dfe33d48" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user/lockreset?emailaddress=${#TestSuite#emailId}</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="354e4a45-85bf-4f7e-8a9f-d424e5359e3f">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Match content of [success]"><con:configuration><path>//response[1]/success[1]/text()</path><content>RESETLOCKEDUSER</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET v1/user/sdptoken-3-200">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" name="GET v1/user/sdptoken-3-200" postQueryString="false" mediaType="application/xml" id="cb5388f2-7cb7-42ba-92c7-b265370c2c07" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v1/user/sdptoken</con:endpoint>
          <con:request><![CDATA[<request>
       <email>${#TestSuite#emailId}</email>
       <password>${#Project#password}</password>
   </request>]]></con:request>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d8a99d05-2a8d-4e51-b96c-405348c0a1e5">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [userId]" id="7b05c31e-6c2f-4a1f-9ab5-147a758ab6dd">
            <con:configuration>
              <path>exists( //sdpinfo/userId)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Check for existance of [token]" id="2beeb690-7953-47d8-bf31-cb106a14f52f">
            <con:configuration>
              <path>exists( //sdpinfo/token)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Assert node [token]" id="87b1d3c0-1f95-4d92-80d9-256d50f353f7">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def token = holder.getNodeValue( "//sdpinfo/token" )
messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "genctxToken", token )


assert token != null
</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null1"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:testStep type="httprequest" name="GET v2/user?show-2-200">
        <con:settings/>
        <con:config method="GET" xsi:type="con:HttpRequest" name="GET v2/user?show-2-200" postQueryString="false" mediaType="application/xml" id="de0ed9c4-82f1-4344-a88c-1d631cabed89" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-macys-webservice-client-id" value="${#Project#clientid}"/>
  &lt;con:entry key="X-Mashery-Oauth-User-Context" value="${#TestSuite#genctxToken}"/>
  &lt;con:entry key="Accept" value="${#Project#accept}"/>
&lt;/xml-fragment></con:setting>
        </con:settings>
          <con:endpoint>${#Project#endPoint}/v2/user?show=summary,shipping,store,billing</con:endpoint>
          <con:request/>
          <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c8721b9f-7888-448f-9636-ecd6301f619e">
            <con:configuration>
              <codes>200</codes>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('error')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def node = holder.getDomNode( "//*" )
assert !node.toString().contains('null')</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert 'macys_online_guid'"><con:configuration><scriptText>def value = messageExchange.responseHeaders["Set-Cookie"][1]
def cookie_set = value.split(';')[0]
log.info cookie_set.toString()
log.info value.toString()
assert (cookie_set.startsWith(context.expand('${#Project#cookie_guid_name}')))</scriptText></con:configuration></con:assertion><con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep><con:properties>
        
        
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>0592ea83-f3a6-4715-a90d-61a7d166ee99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>9ffeff1c-93b3-4911-802f-7b3249befd99</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0b3fa046-21fa-4659-88e8-b6c33f1cf804</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>4f5c7e3c-135f-4654-93c5-d190df1852a8</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f8c76a06-37f8-4430-aeb2-95dae3164a6f</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>6872eaa4-73e8-4f42-b546-bc576a1e8b72</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>c136b370-6432-414a-8fa5-58bd2e0bbe82</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>92ec6ffc-03d0-480a-b2ca-46d275a19e41</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>f0059ac9-6192-4a1e-b7fc-a1e05a6f09b5</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>bbc35938-5b71-4610-ba04-3544735df16b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>93bd8caa-2b6a-45c1-a4da-99dd6ec3d88e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e04cf0d4-2f9f-40eb-b6a6-92f97540b861</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>da4ec907-3bbe-43da-a488-fa36cab4313b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b9cfe94f-350f-4aec-a0d4-c1ef63289c4b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3ac7cb55-c0a9-4fb5-a7ad-c7aeb199a019</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>03474a32-c822-4545-b562-2b96e0134fea</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>505ee185-4d82-4c4a-a7d6-a41dd9c1d6f0</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>909feb60-d9f4-48c2-b9b4-539eb072ad17</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a7d3655f-5895-4bdd-9509-ae876f731273</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>88c4bfb7-99b8-4b0a-9f17-0b98a961a714</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>a9b09540-cda6-4a4b-b13e-c7f52370eda2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>42f5b219-5485-468c-8e76-2a419789cd8a</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3245cf88-02bc-420d-8cda-9842d008c2cc</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>3a329d8f-0c5b-4a5d-b19d-19cfb4ab41bf</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>8f648578-cbf5-49c9-9f30-1c26faabb4af</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>00716173-f33f-4414-badf-682d962d8850</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0141cb0c-98f6-4d7e-822a-6864e5e6c251</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>963184d7-ff9e-4db6-b4b8-6dcc09a27b5d</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>276d686a-98f8-497d-a7b0-4a0eaf4029c9</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b01c8947-86f0-4e9a-85e6-f6e82be11ff1</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>987b86e6-69f4-48e3-964f-2cdf26df18b6</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>e1c4a7cf-ba07-4781-b9aa-2a06a6eb7c64</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>7f3b1263-a5a7-47ea-9a29-8ec42d9478be</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>0e5c94c2-733b-49d9-a665-f180c7b83997</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>b718d9d3-f914-4c39-ad82-6863e37f7b4e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    <con:breakPoints><con:testStepId>f508bf45-e40b-46ca-b4a4-827aa6324cdb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a2f35876-4d99-49fd-a801-728eef70a98e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>37690a3a-3fbe-4a16-bab2-9219068280a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>331432ed-492f-46ff-9894-edc884ba2b5a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61cb14f9-8e53-4d37-bc10-9cf2394a3b18</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22afbb4f-a05f-4421-81fc-b54d58b9140e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f82b8131-1ad5-40b0-bfeb-f7cd8a1beef8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe671435-0067-4e17-a96b-5f275b15d322</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>732820ff-9dd8-4582-9ae1-6a9e1479ea17</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d404c5f-312a-45a4-84f1-8995135bdcfa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6e3270f-fe55-49d7-836f-7be94e7beb87</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c622cbb1-2519-47f5-8810-b0810f991aa5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cfeb2a4e-2b99-4aa6-866b-fe1eb4c8a416</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c14c20c7-16c4-49e4-be50-fa523a61dad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>261dad49-e275-4b80-b41d-f8967185c28d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5deb1d0c-9baa-4596-8156-2867b1e35a63</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b14e5eee-7226-4661-8aae-c88f45da73e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6853bc72-9bf8-4eac-a3da-9f4abae3f622</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ee3d5d3-5d03-47f6-8345-c457c2ba8d27</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6600a69d-3c99-4a6a-8cd2-f8d117ea4e7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties>
      <con:property>
        <con:name>genctxToken</con:name>
        <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">MJmquQWu3b1Nj7/BZK2kgwmBEIhCmPAN18M2TUHtcafgjIcxvqV0cd+J2srwKm1CLLQvFkDQ0eradfA255nc3qnpkdBmSJw65P40ATojIdiFLbMTYO42Mqw/ib3fUI+Oscux9kwvseCJbJWMSLPd2IPLwZoquNC4r72KvjjuCAqzCb6h8EQi1iAfWzn5Sgem</con:value>
      </con:property>
      <con:property>
        <con:name>userId</con:name>
        <con:value>2158262820</con:value>
      </con:property>
      <con:property>
        <con:name>emailId</con:name>
        <con:value>user24053619@user.com</con:value>
      </con:property>
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      <con:property>
        <con:name>oauth_token</con:name>
        <con:value>c2RhaHZxZmNqeTdlNTNlZXlrOHg1OTN5Ok1nejlObmNFd1l1NXR3czZEdUpzNFZEQw==</con:value>
      </con:property>
      <con:property>
        <con:name>access_token</con:name>
        <con:value>2h3e837ctamc8xgmmr4qgur4</con:value>
      </con:property>
      <con:property>
        <con:name>refresh_token</con:name>
        <con:value>uu2vrpf3wkyzst6akvatyfzc</con:value>
      </con:property>
    <con:property><con:name>preferredStoreId</con:name><con:value>45</con:value></con:property><con:property><con:name>regEmail</con:name><con:value>user24053619@reg.com</con:value></con:property><con:property><con:name>coregEmail</con:name><con:value>user24053619@coreg.com</con:value></con:property><con:property><con:name>coregFirstname</con:name><con:value>MHQuV</con:value></con:property><con:property><con:name>coregLastname</con:name><con:value>pwNQcv</con:value></con:property><con:property><con:name>regFirstname</con:name><con:value>lZnEyWv</con:value></con:property><con:property><con:name>regLastname</con:name><con:value>YUVGAZLc</con:value></con:property><con:property><con:name>contactId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11652380</con:value></con:property><con:property><con:name>usernewemail</con:name><con:value>new24053619@user.com</con:value></con:property><con:property><con:name>cardid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">10802545</con:value></con:property><con:property><con:name>u_isprimary</con:name><con:value>true</con:value></con:property><con:property><con:name>u_expmonth</con:name><con:value>8</con:value></con:property><con:property><con:name>u_expyear</con:name><con:value>2020</con:value></con:property><con:property><con:name>u_fname</con:name><con:value>billing update fname</con:value></con:property><con:property><con:name>u_mname</con:name><con:value>billing update mname</con:value></con:property><con:property><con:name>u_lname</con:name><con:value>billing update lname</con:value></con:property><con:property><con:name>u_areacode</con:name><con:value>401</con:value></con:property><con:property><con:name>u_exchange</con:name><con:value>445</con:value></con:property><con:property><con:name>u_numberext</con:name><con:value>7895</con:value></con:property><con:property><con:name>u_emailaddress</con:name><con:value>billingupdate@macys.com</con:value></con:property><con:property><con:name>u_attention</con:name><con:value>billingupdate</con:value></con:property><con:property><con:name>u_address</con:name><con:value>billing update address</con:value></con:property><con:property><con:name>u_address1</con:name><con:value>billing update address1</con:value></con:property><con:property><con:name>u_city</con:name><con:value>billing update city</con:value></con:property><con:property><con:name>u_state</con:name><con:value>NY</con:value></con:property><con:property><con:name>u_zipcode</con:name><con:value>10022</con:value></con:property><con:property><con:name>fName_Update</con:name><con:value>Fname Update</con:value></con:property><con:property><con:name>lName_Update</con:name><con:value>Lname Update</con:value></con:property><con:property><con:name>add1_Update</con:name><con:value>#add1 Update</con:value></con:property><con:property><con:name>add2_Update</con:name><con:value>#add2 Update</con:value></con:property><con:property><con:name>city_Update</con:name><con:value>City Update</con:value></con:property><con:property><con:name>state_Update</con:name><con:value>NY</con:value></con:property><con:property><con:name>zip_Update</con:name><con:value>10022</con:value></con:property><con:property><con:name>gender_Update</con:name><con:value>F</con:value></con:property><con:property><con:name>DOB_day_Update</con:name><con:value>12</con:value></con:property><con:property><con:name>DOB_mon_Update</con:name><con:value>5</con:value></con:property><con:property><con:name>DOB_yr_Update</con:name><con:value>1968</con:value></con:property><con:property><con:name>bestPhone_Update</con:name><con:value>4978965412</con:value></con:property><con:property><con:name>mobilePhone_Update</con:name><con:value>1234568974</con:value></con:property><con:property><con:name>cardtype_B</con:name><con:value>B</con:value></con:property><con:property><con:name>b_cardnumber1</con:name><con:value>377481100161279</con:value></con:property></con:properties>
    <con:tearDownScript>for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
   log.info testCaseName
   if ( testCaseResult.getStatus().toString() == 'FAILED' )
   {
      log.info "$testCaseName has failed"
      for ( testStepResult in testCaseResult.getResults() )
      {
         testStepResult.messages.each() { msg -> log.info msg }
      }
   }
}</con:tearDownScript><con:reportParameters/>
  </con:testSuite><con:testSuite name="levis"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="levis" searchProperties="true"><con:settings/><con:testStep type="httprequest" name="levis">
    <con:settings/>
    <con:config method="GET" xsi:type="con:HttpRequest" name="levis" id="ea96604a-a6c7-45b6-a5ca-1df5a7a70911" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer yTjkV8AQ7jAmbhRtmgJIfR6Euefm"/>
  &lt;con:entry key="Accept" value="${#Project#Accept}"/>
&lt;/xml-fragment></con:setting>
    </con:settings>
    <con:endpoint>http://levistrauss-prd.apigee.net/v1/storelocator?postalcode=94111&amp;country=us&amp;radius=40.23</con:endpoint>
    <con:request/>
    
    
    
    
    
    
    
    <con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
      <con:configuration>
        <codes>200</codes>
      </con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Check for existance of [@resultsperpage]">
      <con:configuration><path>exists( //*:CategoryResponse/@resultsperpage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Check for existance of [@currentpage]">
      <con:configuration><path>exists( //*:CategoryResponse/@currentpage)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Match content of [@totalresults]">
      <con:configuration><path>//*:CategoryResponse[1]/@totalresults</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Match content of [category/@id]">
      <con:configuration><path>//*:CategoryResponse[1]/category[1]/@id</path><content>${#Project#catId_C2}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration>
    </con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/summary/categorypageurl]"><con:configuration><path>exists( //*:CategoryResponse/category/summary/categorypageurl)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/summary/mobilePublish]"><con:configuration><path>exists( //*:CategoryResponse/category/summary/mobilePublish)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/parentcategory]"><con:configuration><path>exists( //*:CategoryResponse/category/parentcategory)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/parentcategory/summary]"><con:configuration><path>exists( //*:CategoryResponse/category/parentcategory/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [totalproducts]"><con:configuration><path>exists( //*:CategoryResponse/category/totalproducts)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [product]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/product/product/summary]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/summary)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/product/product/image]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/image)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/product/product/price]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/price)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/product/product/category]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/category)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/product/product/badges]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/badges)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [category/product/product/@id]"><con:configuration><path>exists( //*:CategoryResponse/category/product/product/@id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of null"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('null')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert NON existance of error"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
def header = context.currentStep.getHttpRequest().getResponse().properties["responseHeaders"]
if (header["#status#"].toString().contains("200 OK")){
	def node = holder.getDomNode( "//*" )
	assert !node.toString().contains('error')
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Product/reviews]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def products = holder.getNodeValues( "//*:CategoryResponse/category/product/product/@id" )
for (product in products){
	def totalreviews = holder.getNodeValue( "//*:CategoryResponse/category/product/product[@id="+product+"]/summary/totalreviews" )
	def customerrating = holder.getNodeValue( "//*:CategoryResponse/category/product/product[@id="+product+"]/summary/customerrating" )
	if (totalreviews != null &amp;&amp; Integer.parseInt(totalreviews)>0){
		assert customerrating != null	
//		log.info 	customerrating.toString()
	}
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [Only available Products Returned]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def Products = holder.getNodeValues( "//*:CategoryResponse/category//product/product/@id" )
//log.info Products.toString()
for (product in Products){
	def Product_available = holder.getNodeValue( "//*:CategoryResponse/category//product/product[@id="+product+"]/summary/available" )
//	log.info Product_available
	assert Product_available.toString().equals('true')
}
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [refinementName]"><con:configuration><path>//*:CategoryResponse[1]/inputRefinements[1]/refinementName[1]/text()</path><content>${#Project#refinement_BRAND}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [refinementValues]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def refinement_BRAND_Value = context.expand('${#Project#refinement_BRAND_Value}')
facet_Value_Exp=URLDecoder.decode(refinement_BRAND_Value,"UTF-8");

//log.info facet_Value.toString()

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def facet_Value_Act = holder.getNodeValue( "//*:CategoryResponse[1]/inputRefinements[1]/refinementValues[1]" )

assert facet_Value_Act.equals(facet_Value_Exp)
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script-Assert [totalproducts>0]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )

def totalproducts = holder.getNodeValue( "//*:CategoryResponse[1]/category[1]/totalproducts[1]" )
//log.info Integer.parseInt(totalproducts)
assert Integer.parseInt(totalproducts)>0
</scriptText></con:configuration></con:assertion><con:credentials>
      <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
    </con:credentials>
    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
    <con:jmsPropertyConfig/>
    <con:parameters>
      
      
    </con:parameters>
  </con:config>
</con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties>
    <con:property>
      <con:name>endpoint</con:name>
      <con:value>http://services.qa13codemacys.fds.com</con:value>
    </con:property>
    <con:property><con:name>brand</con:name><con:value>MCOM</con:value></con:property><con:property><con:name>Env</con:name><con:value>QA</con:value></con:property><con:property><con:name>customer_sdp_rest_enabled</con:name><con:value>true</con:value></con:property><con:property><con:name>DB_Server</con:name><con:value>11.168.108.116</con:value></con:property><con:property><con:name>DB_Port</con:name><con:value>60004</con:value></con:property><con:property><con:name>clientId</con:name><con:value>testclient_1.0_kweu3w323a</con:value></con:property><con:property><con:name>apiendPoint</con:name><con:value>http://api.qa13codemacys.fds.com</con:value></con:property>
    <con:property>
      <con:name>customerId</con:name>
      <con:value>testclient_1.0_kweu3w323a</con:value>
    </con:property>
    <con:property>
      <con:name>accept</con:name>
      <con:value>application/xml</con:value>
    </con:property>
    <con:property>
      <con:name>catId</con:name>
      <con:value>544</con:value>
    </con:property>
  <con:property><con:name>city</con:name><con:value>sfo</con:value></con:property><con:property><con:name>state</con:name><con:value>CA</con:value></con:property><con:property><con:name>catId_Suggestor</con:name><con:value>123</con:value></con:property><con:property><con:name>akamai_Header</con:name><con:value>akamai-x-get-client-ip, akamai-x-cache-on, akamai-x-cache-remote-on, akamai-x-check-cacheable, akamai-x-get-cache-key, akamai-x-get-extracted-values, akamai-x-get-nonces, akamai-x-get-ssl-client-session-id, akamai-x-get-true-cache-key, akamai-x-serial-no</con:value></con:property><con:property><con:name>radius</con:name><con:value>100</con:value></con:property><con:property><con:name>oauth_token</con:name><con:value>d3NzZ3FlMjAxNTpXeUVRYU1LckJZ</con:value></con:property><con:property><con:name>preferredStoreId</con:name><con:value>45</con:value></con:property><con:property><con:name>domain</con:name><con:value>http://www1.macys.com</con:value></con:property><con:property><con:name>mdomain</con:name><con:value>http://m.macys.com</con:value></con:property><con:property><con:name>password</con:name><con:value>Test@123</con:value></con:property><con:property><con:name>passwordupdate</con:name><con:value>Test@1234</con:value></con:property><con:property><con:name>passwordupdate2</con:name><con:value>Test@12345</con:value></con:property><con:property><con:name>hintAnswer</con:name><con:value>12</con:value></con:property><con:property><con:name>userfirstname</con:name><con:value>WSSG</con:value></con:property><con:property><con:name>userlastname</con:name><con:value>Tester</con:value></con:property><con:property><con:name>useraddress1</con:name><con:value>#3 Folsom</con:value></con:property><con:property><con:name>useraddress2</con:name><con:value>4th Street</con:value></con:property><con:property><con:name>usergender</con:name><con:value>M</con:value></con:property><con:property><con:name>usercity</con:name><con:value>San Francisco</con:value></con:property><con:property><con:name>userstate</con:name><con:value>CA</con:value></con:property><con:property><con:name>userzip</con:name><con:value>94103</con:value></con:property><con:property><con:name>usercountry</con:name><con:value>USA</con:value></con:property><con:property><con:name>userbestphone</con:name><con:value>1111111100</con:value></con:property><con:property><con:name>usermobilephone</con:name><con:value>9999999900</con:value></con:property><con:property><con:name>shippingFirstName</con:name><con:value>Shipping First Name</con:value></con:property><con:property><con:name>shippingLastName</con:name><con:value>Shipping Last Name</con:value></con:property><con:property><con:name>shippingAddress1</con:name><con:value>shipping Address1</con:value></con:property><con:property><con:name>shippingZip</con:name><con:value>10022</con:value></con:property><con:property><con:name>shippingBestPhone</con:name><con:value>5555555500</con:value></con:property><con:property><con:name>shippingCity</con:name><con:value>New York</con:value></con:property><con:property><con:name>shippingState</con:name><con:value>NY</con:value></con:property><con:property><con:name>PreferredStoreId_Update</con:name><con:value>70</con:value></con:property><con:property><con:name>DB_Name</con:name><con:value>mlq10</con:value></con:property><con:property><con:name>DB_User</con:name><con:value>mcyread</con:value></con:property><con:property><con:name>DB_Password</con:name><con:value>only4read</con:value></con:property><con:property><con:name>Cookie</con:name><con:value>macys_online_uid</con:value></con:property><con:property><con:name>accept_json</con:name><con:value>application/json</con:value></con:property><con:property><con:name>catId_C2</con:name><con:value>55976</con:value></con:property><con:property><con:name>refinement_BRAND</con:name><con:value>BRAND</con:value></con:property><con:property><con:name>refinement_BRAND_Value</con:name><con:value>Lladró</con:value></con:property><con:property><con:name>passwordupdate3</con:name><con:value>Test@123456</con:value></con:property><con:property><con:name>CatId_Chanel</con:name><con:value>61916</con:value></con:property><con:property><con:name>vgc_upc</con:name><con:value>478000222218</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>https://secure-m.qa14codemacys.fds.com/account/citi</con:value></con:property></con:properties>
  <con:afterLoadScript>def brand = context.expand('${#Project#brand}')
def passStrength = context.expand('${#Project#customer_sdp_rest_enabled}')
def endPoint = context.expand('${#Project#endPoint}')
def Env = context.expand('${#Project#Env}')

if(brand.equals('MCOM')){
	if (Env.equals('Production')){
		project.setPropertyValue( "apiendPoint", 'https://api.macys.com')
		project.setPropertyValue( "redirect_uri", 'https://secure-m.macys.com/account/citi')	//Fix this
//		project.setPropertyValue( "oauth_token", "c2RhaHZxZmNqeTdlNTNlZXlrOHg1OTN5Ok1nejlObmNFd1l1NXR3czZEdUpzNFZEQw==") //MCOM Prod
//		project.setPropertyValue( "oauth_token", "YTM1cXZkN2U1bXE2ajM3MzdlMnZycjJjOm1yWWRyVFNxTmZKdVRaaDNnNXE5Mktqdg==") //MCOM Prod
		project.setPropertyValue( "oauth_token", "dGZ1Z240NDRzdGduNmc3NmJuanVhNGdjOjNWN245Y3hVYnk2UEZLUFV1VHc5RnpZQw==") //MCOM Prod
		
		project.setPropertyValue( "clientId", "psp_1.0_5825a8b937")
	}
	else{
		project.setPropertyValue( "apiendPoint", endPoint.toString().replace("services","api"))
		project.setPropertyValue( "redirect_uri", 'https://secure-m.qa14codemacys.fds.com/account/citi')
//		project.setPropertyValue( "oauth_token", "N3h5ZGd2Mm12cnFjOW5jMm1yY3RqaHY4OmVBZ0JmZHVuN0d5QTg0bjVLUURzamRDWg==")
		project.setPropertyValue( "oauth_token", "d3NzZ3FlMjAxNTpXeUVRYU1LckJZ") //new Feb 2015	
		project.setPropertyValue( "clientId", "testclient_1.0_kweu3w323a")
	}
	project.setPropertyValue( "preferredStoreId", "45")
	project.setPropertyValue( "PreferredStoreId_Update", "70")
	project.setPropertyValue( "domain", "http://www1.macys.com")
	project.setPropertyValue( "mdomain", "http://m.macys.com")
	project.setPropertyValue( "catId", "544")
	project.setPropertyValue( "CatId_Chanel", "61916")	//62574	
	project.setPropertyValue( "DB_Name", "mlq10")
	project.setPropertyValue( "DB_User", "mcyread")
	project.setPropertyValue( "Cookie", "macys_online_uid")
	project.setPropertyValue( "catId_C2", "55976")
	project.setPropertyValue( "refinement_BRAND", "BRAND")
	project.setPropertyValue( "refinement_BRAND_Value", "Lladró")
	project.setPropertyValue( "vgc_upc", "478000222218")
}
else{	
	if (Env.equals('Production')){
		project.setPropertyValue( "apiendPoint", 'https://api.bloomingdales.com')
		project.setPropertyValue( "redirect_uri", 'https://secure-m.bloomingdales.com/account/citi')
		project.setPropertyValue( "oauth_token", "c3FzM3JjZ3BhNjUzeWFzaGg1aHFnOHB4OkE3Z2V6dE1VSkNBeU55Q3lleko0Y25oUg==") //BCOM Prod
		project.setPropertyValue( "clientId", "psp_1.0_5825a8b937")
	}
	else{
		project.setPropertyValue( "apiendPoint", endPoint.toString().replace("services","api"))
		project.setPropertyValue( "redirect_uri", 'https://secure-m.qa7codebloomingdales.fds.com/account/citi')
//		project.setPropertyValue( "oauth_token", "ZXd4Z3M4cDN4d2E1a3R3a2pkOXc5NThtOjdOYXA3cktNRUgzSkhZZHI0cXZtRHZ4OQ==")
		project.setPropertyValue( "oauth_token", "d3NzZ3FlMjAxNTpXeUVRYU1LckJZ") //new Feb 2015
		project.setPropertyValue( "clientId", "testclient_1.0_kweu3w323a")
	}
	project.setPropertyValue( "preferredStoreId", "4")
	project.setPropertyValue( "PreferredStoreId_Update", "50014")
	project.setPropertyValue( "domain", "http://www1.bloomingdales.com")
	project.setPropertyValue( "mdomain", "http://m.bloomingdales.com")
	project.setPropertyValue( "catId", "2910")
	project.setPropertyValue( "CatId_Chanel", "1000926")	//1001019	
	project.setPropertyValue( "DB_Name", "blx01")
	project.setPropertyValue( "DB_User", "blmread")
	project.setPropertyValue( "Cookie", "bloomingdales_online_uid")
	project.setPropertyValue( "catId_C2", "1004462")
	project.setPropertyValue( "refinement_BRAND", "BRAND")
	project.setPropertyValue( "refinement_BRAND_Value", "See by Chloé")
	project.setPropertyValue( "vgc_upc", "478000222218")
	}

if(passStrength.equals("true"))
{
	project.setPropertyValue("password", "Test@123")
	project.setPropertyValue("passwordupdate", "Test@1234")
	project.setPropertyValue("passwordupdate2", "Test@12345")
	project.setPropertyValue("hintAnswer", "12")	
}
else
{
	project.setPropertyValue("password", "test123")
	project.setPropertyValue("passwordupdate", "test1234")
	project.setPropertyValue("passwordupdate2", "Test12345")
	project.setPropertyValue("hintAnswer", "123")
}</con:afterLoadScript><con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:oAuth2ProfileContainer/><con:reporting>
    <con:reportTemplates/>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:afterRunScript/><con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest"><con:script disabled="true">def headers = request.requestHeaders
headers.put( "force_wssgapp_traffic", "jboss_wssgapp" )
//headers.remove( "force_wssgapp_traffic", "jboss_wssgapp" )
request.requestHeaders = headers</con:script></con:eventHandlers><con:sensitiveInformation/>
</con:soapui-project>